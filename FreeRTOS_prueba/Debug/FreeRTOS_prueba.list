
FreeRTOS_prueba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c44  08006c44  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c4c  08006c4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ae8  20000074  08006cc8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b5c  08006cc8  00024b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ba6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003468  00000000  00000000  00039c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003e520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f7c  00000000  00000000  0003f860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e6c  00000000  00000000  000437dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a14b  00000000  00000000  00059648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3793  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b58  00000000  00000000  000f37e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a70 	.word	0x08006a70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006a70 	.word	0x08006a70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
atomic_init(&boton, 0);
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <main+0x7c>)
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	2300      	movs	r3, #0
 8000590:	70fb      	strb	r3, [r7, #3]
 8000592:	78fb      	ldrb	r3, [r7, #3]
 8000594:	461a      	mov	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fc4f 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f84b 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f8dd 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f8b1 	bl	800070c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005aa:	f002 fa71 	bl	8002a90 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (8, sizeof(MensajeUART), &UARTQueue_attributes);
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <main+0x80>)
 80005b0:	2120      	movs	r1, #32
 80005b2:	2008      	movs	r0, #8
 80005b4:	f002 fc71 	bl	8002e9a <osMessageQueueNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <main+0x84>)
 80005bc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BlinkLED */
  BlinkLEDHandle = osThreadNew(StartBlinkLed, NULL, &BlinkLED_attributes);
 80005be:	4a13      	ldr	r2, [pc, #76]	; (800060c <main+0x88>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4813      	ldr	r0, [pc, #76]	; (8000610 <main+0x8c>)
 80005c4:	f002 faae 	bl	8002b24 <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <main+0x90>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* creation of Write_UART */
  Write_UARTHandle = osThreadNew(StartWriteUart, NULL, &Write_UART_attributes);
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <main+0x94>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <main+0x98>)
 80005d4:	f002 faa6 	bl	8002b24 <osThreadNew>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <main+0x9c>)
 80005dc:	6013      	str	r3, [r2, #0]

  /* creation of Wait_Button */
  Wait_ButtonHandle = osThreadNew(StartWaitButton, NULL, &Wait_Button_attributes);
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <main+0xa0>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	4811      	ldr	r0, [pc, #68]	; (8000628 <main+0xa4>)
 80005e4:	f002 fa9e 	bl	8002b24 <osThreadNew>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <main+0xa8>)
 80005ec:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Button_Interrupt_Event */
  Button_Interrupt_EventHandle = osEventFlagsNew(&Button_Interrupt_Event_attributes);
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <main+0xac>)
 80005f0:	f002 fc14 	bl	8002e1c <osEventFlagsNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <main+0xb0>)
 80005f8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005fa:	f002 fa6d 	bl	8002ad8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <main+0x7a>
 8000600:	200000e8 	.word	0x200000e8
 8000604:	08006b70 	.word	0x08006b70
 8000608:	200000e0 	.word	0x200000e0
 800060c:	08006b04 	.word	0x08006b04
 8000610:	08000925 	.word	0x08000925
 8000614:	200000d4 	.word	0x200000d4
 8000618:	08006b28 	.word	0x08006b28
 800061c:	0800097d 	.word	0x0800097d
 8000620:	200000d8 	.word	0x200000d8
 8000624:	08006b4c 	.word	0x08006b4c
 8000628:	080009d1 	.word	0x080009d1
 800062c:	200000dc 	.word	0x200000dc
 8000630:	08006b88 	.word	0x08006b88
 8000634:	200000e4 	.word	0x200000e4

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 fd22 	bl	8006090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006ac:	23c0      	movs	r3, #192	; 0xc0
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fe97 	bl	80013f0 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 fa3e 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2103      	movs	r1, #3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f8f8 	bl	80018e0 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 fa27 	bl	8000b48 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f001 fd9e 	bl	8002284 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f9fb 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000090 	.word	0x20000090
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b42      	ldr	r3, [pc, #264]	; (8000884 <MX_GPIO_Init+0x124>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a41      	ldr	r2, [pc, #260]	; (8000884 <MX_GPIO_Init+0x124>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <MX_GPIO_Init+0x124>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <MX_GPIO_Init+0x124>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a3a      	ldr	r2, [pc, #232]	; (8000884 <MX_GPIO_Init+0x124>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <MX_GPIO_Init+0x124>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b34      	ldr	r3, [pc, #208]	; (8000884 <MX_GPIO_Init+0x124>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a33      	ldr	r2, [pc, #204]	; (8000884 <MX_GPIO_Init+0x124>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <MX_GPIO_Init+0x124>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <MX_GPIO_Init+0x124>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <MX_GPIO_Init+0x124>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0x124>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_GPIO_Init+0x124>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a25      	ldr	r2, [pc, #148]	; (8000884 <MX_GPIO_Init+0x124>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_GPIO_Init+0x124>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Button_interrupt_Pin|Button_processed_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	210c      	movs	r1, #12
 8000806:	4820      	ldr	r0, [pc, #128]	; (8000888 <MX_GPIO_Init+0x128>)
 8000808:	f000 fdc0 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000812:	481e      	ldr	r0, [pc, #120]	; (800088c <MX_GPIO_Init+0x12c>)
 8000814:	f000 fdba 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_interrupt_Pin Button_processed_Pin */
  GPIO_InitStruct.Pin = Button_interrupt_Pin|Button_processed_Pin;
 8000818:	230c      	movs	r3, #12
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4816      	ldr	r0, [pc, #88]	; (8000888 <MX_GPIO_Init+0x128>)
 8000830:	f000 fc28 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_botton_Pin */
  GPIO_InitStruct.Pin = User_botton_Pin;
 8000834:	2301      	movs	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000838:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_botton_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_GPIO_Init+0x130>)
 800084a:	f000 fc1b 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800084e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_GPIO_Init+0x12c>)
 8000868:	f000 fc0c 	bl	8001084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2105      	movs	r1, #5
 8000870:	2006      	movs	r0, #6
 8000872:	f000 fbdd 	bl	8001030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000876:	2006      	movs	r0, #6
 8000878:	f000 fbf6 	bl	8001068 <HAL_NVIC_EnableIRQ>

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40021000 	.word	0x40021000
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40020000 	.word	0x40020000

08000894 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == User_botton_Pin) {
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d105      	bne.n	80008b0 <HAL_GPIO_EXTI_Callback+0x1c>
		osThreadFlagsSet(Wait_ButtonHandle, 1);
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x24>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 f9cc 	bl	8002c48 <osThreadFlagsSet>
	}
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000dc 	.word	0x200000dc

080008bc <ComprobarEstado>:

void ComprobarEstado (int estado){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	if (estado){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <ComprobarEstado+0x12>
		Error_Handler();
 80008ca:	f000 f93d 	bl	8000b48 <Error_Handler>
	}
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <Formato_Mensaje>:

MensajeUART Formato_Mensaje(int trigger, bool boton_pulsado){
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af02      	add	r7, sp, #8
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	4613      	mov	r3, r2
 80008e4:	71fb      	strb	r3, [r7, #7]
	MensajeUART mensaje;
	snprintf(mensaje.data, sizeof(mensaje.data),"El botón está a %i (%i)", boton_pulsado, trigger);
 80008e6:	79fa      	ldrb	r2, [r7, #7]
 80008e8:	f107 0010 	add.w	r0, r7, #16
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	4613      	mov	r3, r2
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <Formato_Mensaje+0x48>)
 80008f4:	2120      	movs	r1, #32
 80008f6:	f005 fce1 	bl	80062bc <sniprintf>
	return mensaje;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	461d      	mov	r5, r3
 80008fe:	f107 0410 	add.w	r4, r7, #16
 8000902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000904:	6028      	str	r0, [r5, #0]
 8000906:	6069      	str	r1, [r5, #4]
 8000908:	60aa      	str	r2, [r5, #8]
 800090a:	60eb      	str	r3, [r5, #12]
 800090c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090e:	6128      	str	r0, [r5, #16]
 8000910:	6169      	str	r1, [r5, #20]
 8000912:	61aa      	str	r2, [r5, #24]
 8000914:	61eb      	str	r3, [r5, #28]
}
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bdb0      	pop	{r4, r5, r7, pc}
 800091e:	bf00      	nop
 8000920:	08006ad0 	.word	0x08006ad0

08000924 <StartBlinkLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinkLed */
void StartBlinkLed(void *argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800092c:	2064      	movs	r0, #100	; 0x64
 800092e:	f002 fa5a 	bl	8002de6 <osDelay>
    if (atomic_load(&boton) == GPIO_PIN_RESET) {
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <StartBlinkLed+0x50>)
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f3bf 8f5b 	dmb	ish
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	f3bf 8f5b 	dmb	ish
 8000942:	b2db      	uxtb	r3, r3
 8000944:	72fb      	strb	r3, [r7, #11]
 8000946:	7afb      	ldrb	r3, [r7, #11]
 8000948:	f083 0301 	eor.w	r3, r3, #1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d005      	beq.n	800095e <StartBlinkLed+0x3a>
    	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <StartBlinkLed+0x54>)
 800095a:	f000 fd17 	bl	800138c <HAL_GPIO_WritePin>
    }
    osDelay(100);
 800095e:	2064      	movs	r0, #100	; 0x64
 8000960:	f002 fa41 	bl	8002de6 <osDelay>
    HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <StartBlinkLed+0x54>)
 800096c:	f000 fd0e 	bl	800138c <HAL_GPIO_WritePin>
    osDelay(100);
 8000970:	e7dc      	b.n	800092c <StartBlinkLed+0x8>
 8000972:	bf00      	nop
 8000974:	200000e8 	.word	0x200000e8
 8000978:	40020c00 	.word	0x40020c00

0800097c <StartWriteUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWriteUart */
void StartWriteUart(void *argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWriteUart */
  /* Infinite loop */
  for(;;)
  {
	MensajeUART mensaje;
	ComprobarEstado(osMessageQueueGet(UARTQueueHandle, &mensaje, 0, osWaitForever));
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <StartWriteUart+0x4c>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	2200      	movs	r2, #0
 8000992:	f002 fb55 	bl	8003040 <osMessageQueueGet>
 8000996:	4603      	mov	r3, r0
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff8f 	bl	80008bc <ComprobarEstado>
	size_t tamaño_mensaje = strnlen(mensaje.data, sizeof(mensaje.data));
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2120      	movs	r1, #32
 80009a4:	4618      	mov	r0, r3
 80009a6:	f005 fcbd 	bl	8006324 <strnlen>
 80009aa:	62f8      	str	r0, [r7, #44]	; 0x2c
	ComprobarEstado(HAL_UART_Transmit(&huart2, (uint8_t*) &mensaje.data, (uint16_t) tamaño_mensaje, 1000));
 80009ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	f107 010c 	add.w	r1, r7, #12
 80009b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <StartWriteUart+0x50>)
 80009ba:	f001 fcb0 	bl	800231e <HAL_UART_Transmit>
 80009be:	4603      	mov	r3, r0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff7b 	bl	80008bc <ComprobarEstado>
  {
 80009c6:	e7dd      	b.n	8000984 <StartWriteUart+0x8>
 80009c8:	200000e0 	.word	0x200000e0
 80009cc:	20000090 	.word	0x20000090

080009d0 <StartWaitButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWaitButton */
void StartWaitButton(void *argument)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b096      	sub	sp, #88	; 0x58
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6278      	str	r0, [r7, #36]	; 0x24
  /* USER CODE BEGIN StartWaitButton */
	int trigger = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	657b      	str	r3, [r7, #84]	; 0x54
	MensajeUART mensaje;
  /* Infinite loop */
  for(;;)
  {
	//Reaccionar solo a rising edge
	EXTI->RTSR |= User_botton_Pin;
 80009dc:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <StartWaitButton+0x144>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <StartWaitButton+0x144>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~User_botton_Pin;
 80009e8:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <StartWaitButton+0x144>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	4a49      	ldr	r2, [pc, #292]	; (8000b14 <StartWaitButton+0x144>)
 80009ee:	f023 0301 	bic.w	r3, r3, #1
 80009f2:	60d3      	str	r3, [r2, #12]

	HAL_GPIO_WritePin(GPIOE, Button_processed_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2108      	movs	r1, #8
 80009f8:	4847      	ldr	r0, [pc, #284]	; (8000b18 <StartWaitButton+0x148>)
 80009fa:	f000 fcc7 	bl	800138c <HAL_GPIO_WritePin>
	osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80009fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000a02:	2100      	movs	r1, #0
 8000a04:	2001      	movs	r0, #1
 8000a06:	f002 f96d 	bl	8002ce4 <osThreadFlagsWait>
	HAL_GPIO_WritePin(GPIOE, Button_processed_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4842      	ldr	r0, [pc, #264]	; (8000b18 <StartWaitButton+0x148>)
 8000a10:	f000 fcbc 	bl	800138c <HAL_GPIO_WritePin>
    trigger++;
 8000a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a16:	3301      	adds	r3, #1
 8000a18:	657b      	str	r3, [r7, #84]	; 0x54

    atomic_store(&boton, 1);
 8000a1a:	4b40      	ldr	r3, [pc, #256]	; (8000b1c <StartWaitButton+0x14c>)
 8000a1c:	653b      	str	r3, [r7, #80]	; 0x50
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a28:	461a      	mov	r2, r3
 8000a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a2c:	f3bf 8f5b 	dmb	ish
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	f3bf 8f5b 	dmb	ish
    mensaje = Formato_Mensaje(trigger, true);
 8000a36:	463b      	mov	r3, r7
 8000a38:	2201      	movs	r2, #1
 8000a3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff4b 	bl	80008d8 <Formato_Mensaje>
 8000a42:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000a46:	463d      	mov	r5, r7
 8000a48:	6828      	ldr	r0, [r5, #0]
 8000a4a:	6869      	ldr	r1, [r5, #4]
 8000a4c:	68aa      	ldr	r2, [r5, #8]
 8000a4e:	68eb      	ldr	r3, [r5, #12]
 8000a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a52:	6928      	ldr	r0, [r5, #16]
 8000a54:	6969      	ldr	r1, [r5, #20]
 8000a56:	69aa      	ldr	r2, [r5, #24]
 8000a58:	69eb      	ldr	r3, [r5, #28]
 8000a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ComprobarEstado(osMessageQueuePut(UARTQueueHandle, &mensaje, 0, osWaitForever));
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <StartWaitButton+0x150>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f002 fa89 	bl	8002f80 <osMessageQueuePut>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff23 	bl	80008bc <ComprobarEstado>

    //Reccionar solo a falling edge
    EXTI->FTSR |= User_botton_Pin;
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <StartWaitButton+0x144>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <StartWaitButton+0x144>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	60d3      	str	r3, [r2, #12]
    EXTI->RTSR &= ~User_botton_Pin;
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <StartWaitButton+0x144>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <StartWaitButton+0x144>)
 8000a88:	f023 0301 	bic.w	r3, r3, #1
 8000a8c:	6093      	str	r3, [r2, #8]

    HAL_GPIO_WritePin(GPIOE, Button_processed_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2108      	movs	r1, #8
 8000a92:	4821      	ldr	r0, [pc, #132]	; (8000b18 <StartWaitButton+0x148>)
 8000a94:	f000 fc7a 	bl	800138c <HAL_GPIO_WritePin>
	osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f002 f920 	bl	8002ce4 <osThreadFlagsWait>
	HAL_GPIO_WritePin(GPIOE, Button_processed_Pin, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	481b      	ldr	r0, [pc, #108]	; (8000b18 <StartWaitButton+0x148>)
 8000aaa:	f000 fc6f 	bl	800138c <HAL_GPIO_WritePin>
	trigger++;
 8000aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	657b      	str	r3, [r7, #84]	; 0x54

	 atomic_store(&boton, 0);
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <StartWaitButton+0x14c>)
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000abe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ac6:	f3bf 8f5b 	dmb	ish
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	f3bf 8f5b 	dmb	ish
	 mensaje = Formato_Mensaje(trigger, false);
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fefe 	bl	80008d8 <Formato_Mensaje>
 8000adc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000ae0:	463d      	mov	r5, r7
 8000ae2:	6828      	ldr	r0, [r5, #0]
 8000ae4:	6869      	ldr	r1, [r5, #4]
 8000ae6:	68aa      	ldr	r2, [r5, #8]
 8000ae8:	68eb      	ldr	r3, [r5, #12]
 8000aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aec:	6928      	ldr	r0, [r5, #16]
 8000aee:	6969      	ldr	r1, [r5, #20]
 8000af0:	69aa      	ldr	r2, [r5, #24]
 8000af2:	69eb      	ldr	r3, [r5, #28]
 8000af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	 ComprobarEstado(osMessageQueuePut(UARTQueueHandle, &mensaje, 0, osWaitForever));
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <StartWaitButton+0x150>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	2200      	movs	r2, #0
 8000b04:	f002 fa3c 	bl	8002f80 <osMessageQueuePut>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fed6 	bl	80008bc <ComprobarEstado>
	EXTI->RTSR |= User_botton_Pin;
 8000b10:	e764      	b.n	80009dc <StartWaitButton+0xc>
 8000b12:	bf00      	nop
 8000b14:	40013c00 	.word	0x40013c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	200000e8 	.word	0x200000e8
 8000b20:	200000e0 	.word	0x200000e0

08000b24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b36:	f000 f9a3 	bl	8000e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010000 	.word	0x40010000

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  __BKPT(0);
 8000b50:	be00      	bkpt	0x0000
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_MspInit+0x54>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <HAL_MspInit+0x54>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_MspInit+0x54>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_MspInit+0x54>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_MspInit+0x54>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_MspInit+0x54>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	210f      	movs	r1, #15
 8000b96:	f06f 0001 	mvn.w	r0, #1
 8000b9a:	f000 fa49 	bl	8001030 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_UART_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12b      	bne.n	8000c26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a10      	ldr	r2, [pc, #64]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_UART_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c06:	230c      	movs	r3, #12
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c16:	2307      	movs	r3, #7
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_UART_MspInit+0x8c>)
 8000c22:	f000 fa2f 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	2019      	movs	r0, #25
 8000c52:	f000 f9ed 	bl	8001030 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c56:	2019      	movs	r0, #25
 8000c58:	f000 fa06 	bl	8001068 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_InitTick+0xa4>)
 8000c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c64:	4a1e      	ldr	r2, [pc, #120]	; (8000ce0 <HAL_InitTick+0xa4>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_InitTick+0xa4>)
 8000c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c78:	f107 0210 	add.w	r2, r7, #16
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4611      	mov	r1, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 f84c 	bl	8001d20 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c88:	f001 f836 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <HAL_InitTick+0xa8>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	0c9b      	lsrs	r3, r3, #18
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_InitTick+0xac>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <HAL_InitTick+0xb0>)
 8000ca4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_InitTick+0xac>)
 8000ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_InitTick+0xac>)
 8000cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_InitTick+0xac>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_InitTick+0xac>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_InitTick+0xac>)
 8000cc2:	f001 f85f 	bl	8001d84 <HAL_TIM_Base_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d104      	bne.n	8000cd6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ccc:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <HAL_InitTick+0xac>)
 8000cce:	f001 f8b3 	bl	8001e38 <HAL_TIM_Base_Start_IT>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	431bde83 	.word	0x431bde83
 8000ce8:	200000ec 	.word	0x200000ec
 8000cec:	40010000 	.word	0x40010000

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_WritePin(GPIOE, Button_interrupt_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2104      	movs	r1, #4
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <EXTI0_IRQHandler+0x24>)
 8000d26:	f000 fb31 	bl	800138c <HAL_GPIO_WritePin>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_botton_Pin);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 fb48 	bl	80013c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HAL_GPIO_WritePin(GPIOE, Button_interrupt_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2104      	movs	r1, #4
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <EXTI0_IRQHandler+0x24>)
 8000d36:	f000 fb29 	bl	800138c <HAL_GPIO_WritePin>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000

08000d44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d4a:	f001 f8d7 	bl	8001efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000ec 	.word	0x200000ec

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f005 f948 	bl	800601c <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20020000 	.word	0x20020000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	20000134 	.word	0x20000134
 8000dc0:	20004b60 	.word	0x20004b60

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd7 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f005 f907 	bl	8006028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fbb3 	bl	8000584 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e2c:	08006c54 	.word	0x08006c54
  ldr r2, =_sbss
 8000e30:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e34:	20004b5c 	.word	0x20004b5c

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f8d8 	bl	800101a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f7ff fee6 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fe70 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000138 	.word	0x20000138

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000138 	.word	0x20000138

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff4c 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001042:	f7ff ff61 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001046:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	f7ff ffb1 	bl	8000fb4 <NVIC_EncodePriority>
 8001052:	4602      	mov	r2, r0
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff80 	bl	8000f60 <__NVIC_SetPriority>
}
 8001060:	bf00      	nop
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff54 	bl	8000f24 <__NVIC_EnableIRQ>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e159      	b.n	8001354 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f040 8148 	bne.w	800134e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d005      	beq.n	80010d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b03      	cmp	r3, #3
 8001142:	d017      	beq.n	8001174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d123      	bne.n	80011c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	69b9      	ldr	r1, [r7, #24]
 80011c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80a2 	beq.w	800134e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b57      	ldr	r3, [pc, #348]	; (800136c <HAL_GPIO_Init+0x2e8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a56      	ldr	r2, [pc, #344]	; (800136c <HAL_GPIO_Init+0x2e8>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b54      	ldr	r3, [pc, #336]	; (800136c <HAL_GPIO_Init+0x2e8>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001226:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_GPIO_Init+0x2ec>)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a49      	ldr	r2, [pc, #292]	; (8001374 <HAL_GPIO_Init+0x2f0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x202>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a48      	ldr	r2, [pc, #288]	; (8001378 <HAL_GPIO_Init+0x2f4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x1fe>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a47      	ldr	r2, [pc, #284]	; (800137c <HAL_GPIO_Init+0x2f8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x1fa>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a46      	ldr	r2, [pc, #280]	; (8001380 <HAL_GPIO_Init+0x2fc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x1f6>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a45      	ldr	r2, [pc, #276]	; (8001384 <HAL_GPIO_Init+0x300>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x1f2>
 8001272:	2304      	movs	r3, #4
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x204>
 8001276:	2307      	movs	r3, #7
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x204>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x204>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x204>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x204>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <HAL_GPIO_Init+0x2ec>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f4:	4a24      	ldr	r2, [pc, #144]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131e:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001348:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <HAL_GPIO_Init+0x304>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f aea2 	bls.w	80010a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fa58 	bl	8000894 <HAL_GPIO_EXTI_Callback>
  }
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40013c00 	.word	0x40013c00

080013f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e267      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d075      	beq.n	80014fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800140e:	4b88      	ldr	r3, [pc, #544]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b04      	cmp	r3, #4
 8001418:	d00c      	beq.n	8001434 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800141a:	4b85      	ldr	r3, [pc, #532]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001422:	2b08      	cmp	r3, #8
 8001424:	d112      	bne.n	800144c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001426:	4b82      	ldr	r3, [pc, #520]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001432:	d10b      	bne.n	800144c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	4b7e      	ldr	r3, [pc, #504]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d05b      	beq.n	80014f8 <HAL_RCC_OscConfig+0x108>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d157      	bne.n	80014f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e242      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001454:	d106      	bne.n	8001464 <HAL_RCC_OscConfig+0x74>
 8001456:	4b76      	ldr	r3, [pc, #472]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a75      	ldr	r2, [pc, #468]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e01d      	b.n	80014a0 <HAL_RCC_OscConfig+0xb0>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x98>
 800146e:	4b70      	ldr	r3, [pc, #448]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6f      	ldr	r2, [pc, #444]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b6d      	ldr	r3, [pc, #436]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6c      	ldr	r2, [pc, #432]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0xb0>
 8001488:	4b69      	ldr	r3, [pc, #420]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a68      	ldr	r2, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800148e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b66      	ldr	r3, [pc, #408]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a65      	ldr	r2, [pc, #404]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fcfe 	bl	8000ea8 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fcfa 	bl	8000ea8 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e207      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0xc0>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fcea 	bl	8000ea8 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fce6 	bl	8000ea8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e1f3      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	4b51      	ldr	r3, [pc, #324]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0xe8>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d063      	beq.n	80015ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001506:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00b      	beq.n	800152a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151a:	2b08      	cmp	r3, #8
 800151c:	d11c      	bne.n	8001558 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151e:	4b44      	ldr	r3, [pc, #272]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d116      	bne.n	8001558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_RCC_OscConfig+0x152>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e1c7      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4937      	ldr	r1, [pc, #220]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001556:	e03a      	b.n	80015ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d020      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_RCC_OscConfig+0x244>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001566:	f7ff fc9f 	bl	8000ea8 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156e:	f7ff fc9b 	bl	8000ea8 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e1a8      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4925      	ldr	r1, [pc, #148]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
 80015a0:	e015      	b.n	80015ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x244>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc7e 	bl	8000ea8 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff fc7a 	bl	8000ea8 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e187      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d036      	beq.n	8001648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d016      	beq.n	8001610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_RCC_OscConfig+0x248>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fc5e 	bl	8000ea8 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f0:	f7ff fc5a 	bl	8000ea8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e167      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_OscConfig+0x240>)
 8001604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x200>
 800160e:	e01b      	b.n	8001648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_RCC_OscConfig+0x248>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fc47 	bl	8000ea8 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161c:	e00e      	b.n	800163c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161e:	f7ff fc43 	bl	8000ea8 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d907      	bls.n	800163c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e150      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
 8001630:	40023800 	.word	0x40023800
 8001634:	42470000 	.word	0x42470000
 8001638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163c:	4b88      	ldr	r3, [pc, #544]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800163e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1ea      	bne.n	800161e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 8097 	beq.w	8001784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165a:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10f      	bne.n	8001686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b7d      	ldr	r3, [pc, #500]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a7c      	ldr	r2, [pc, #496]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b7a      	ldr	r3, [pc, #488]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001682:	2301      	movs	r3, #1
 8001684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001686:	4b77      	ldr	r3, [pc, #476]	; (8001864 <HAL_RCC_OscConfig+0x474>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001692:	4b74      	ldr	r3, [pc, #464]	; (8001864 <HAL_RCC_OscConfig+0x474>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a73      	ldr	r2, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x474>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169e:	f7ff fc03 	bl	8000ea8 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a6:	f7ff fbff 	bl	8000ea8 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e10c      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b6a      	ldr	r3, [pc, #424]	; (8001864 <HAL_RCC_OscConfig+0x474>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x2ea>
 80016cc:	4b64      	ldr	r3, [pc, #400]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d0:	4a63      	ldr	r2, [pc, #396]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6713      	str	r3, [r2, #112]	; 0x70
 80016d8:	e01c      	b.n	8001714 <HAL_RCC_OscConfig+0x324>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x30c>
 80016e2:	4b5f      	ldr	r3, [pc, #380]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e6:	4a5e      	ldr	r2, [pc, #376]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6713      	str	r3, [r2, #112]	; 0x70
 80016ee:	4b5c      	ldr	r3, [pc, #368]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	4a5b      	ldr	r2, [pc, #364]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6713      	str	r3, [r2, #112]	; 0x70
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0x324>
 80016fc:	4b58      	ldr	r3, [pc, #352]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a57      	ldr	r2, [pc, #348]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	4b55      	ldr	r3, [pc, #340]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a54      	ldr	r2, [pc, #336]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800170e:	f023 0304 	bic.w	r3, r3, #4
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d015      	beq.n	8001748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff fbc4 	bl	8000ea8 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001722:	e00a      	b.n	800173a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff fbc0 	bl	8000ea8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e0cb      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173a:	4b49      	ldr	r3, [pc, #292]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0ee      	beq.n	8001724 <HAL_RCC_OscConfig+0x334>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001748:	f7ff fbae 	bl	8000ea8 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff fbaa 	bl	8000ea8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0b5      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ee      	bne.n	8001750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001778:	4b39      	ldr	r3, [pc, #228]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a38      	ldr	r2, [pc, #224]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800177e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a1 	beq.w	80018d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b08      	cmp	r3, #8
 8001798:	d05c      	beq.n	8001854 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d141      	bne.n	8001826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a2:	4b31      	ldr	r3, [pc, #196]	; (8001868 <HAL_RCC_OscConfig+0x478>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fb7e 	bl	8000ea8 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff fb7a 	bl	8000ea8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e087      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	019b      	lsls	r3, r3, #6
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	085b      	lsrs	r3, r3, #1
 80017e6:	3b01      	subs	r3, #1
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	061b      	lsls	r3, r3, #24
 80017f2:	491b      	ldr	r1, [pc, #108]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x478>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fb53 	bl	8000ea8 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff fb4f 	bl	8000ea8 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e05c      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x416>
 8001824:	e054      	b.n	80018d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_RCC_OscConfig+0x478>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fb3c 	bl	8000ea8 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fb38 	bl	8000ea8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e045      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_RCC_OscConfig+0x470>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x444>
 8001852:	e03d      	b.n	80018d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d107      	bne.n	800186c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e038      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000
 8001868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_RCC_OscConfig+0x4ec>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d028      	beq.n	80018cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d121      	bne.n	80018cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d11a      	bne.n	80018cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d111      	bne.n	80018cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0cc      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f4:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d90c      	bls.n	800191c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b65      	ldr	r3, [pc, #404]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b63      	ldr	r3, [pc, #396]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0b8      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001934:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4a58      	ldr	r2, [pc, #352]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800193e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	494d      	ldr	r1, [pc, #308]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d044      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b47      	ldr	r3, [pc, #284]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d119      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e07f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d003      	beq.n	800199e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199a:	2b03      	cmp	r3, #3
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199e:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e06f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e067      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019be:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f023 0203 	bic.w	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4934      	ldr	r1, [pc, #208]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d0:	f7ff fa6a 	bl	8000ea8 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d6:	e00a      	b.n	80019ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d8:	f7ff fa66 	bl	8000ea8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e04f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 020c 	and.w	r2, r3, #12
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d1eb      	bne.n	80019d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d20c      	bcs.n	8001a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e032      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4916      	ldr	r1, [pc, #88]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	490e      	ldr	r1, [pc, #56]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a66:	f000 f821 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	490a      	ldr	r1, [pc, #40]	; (8001aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	5ccb      	ldrb	r3, [r1, r3]
 8001a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7e:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f8d8 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023c00 	.word	0x40023c00
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	08006b98 	.word	0x08006b98
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab0:	b094      	sub	sp, #80	; 0x50
 8001ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ab8:	2300      	movs	r3, #0
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001abc:	2300      	movs	r3, #0
 8001abe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac4:	4b79      	ldr	r3, [pc, #484]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d00d      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x40>
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	f200 80e1 	bhi.w	8001c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ade:	e0db      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ae4:	e0db      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae6:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aea:	e0d8      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aec:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af6:	4b6d      	ldr	r3, [pc, #436]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d063      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	4b6a      	ldr	r3, [pc, #424]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	099b      	lsrs	r3, r3, #6
 8001b08:	2200      	movs	r2, #0
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
 8001b16:	2300      	movs	r3, #0
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b1e:	4622      	mov	r2, r4
 8001b20:	462b      	mov	r3, r5
 8001b22:	f04f 0000 	mov.w	r0, #0
 8001b26:	f04f 0100 	mov.w	r1, #0
 8001b2a:	0159      	lsls	r1, r3, #5
 8001b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b30:	0150      	lsls	r0, r2, #5
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4621      	mov	r1, r4
 8001b38:	1a51      	subs	r1, r2, r1
 8001b3a:	6139      	str	r1, [r7, #16]
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b50:	4659      	mov	r1, fp
 8001b52:	018b      	lsls	r3, r1, #6
 8001b54:	4651      	mov	r1, sl
 8001b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b5a:	4651      	mov	r1, sl
 8001b5c:	018a      	lsls	r2, r1, #6
 8001b5e:	4651      	mov	r1, sl
 8001b60:	ebb2 0801 	subs.w	r8, r2, r1
 8001b64:	4659      	mov	r1, fp
 8001b66:	eb63 0901 	sbc.w	r9, r3, r1
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b7e:	4690      	mov	r8, r2
 8001b80:	4699      	mov	r9, r3
 8001b82:	4623      	mov	r3, r4
 8001b84:	eb18 0303 	adds.w	r3, r8, r3
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	462b      	mov	r3, r5
 8001b8c:	eb49 0303 	adc.w	r3, r9, r3
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	024b      	lsls	r3, r1, #9
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ba8:	4621      	mov	r1, r4
 8001baa:	024a      	lsls	r2, r1, #9
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bbc:	f7fe fb60 	bl	8000280 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bc8:	e058      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bca:	4b38      	ldr	r3, [pc, #224]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001be4:	4642      	mov	r2, r8
 8001be6:	464b      	mov	r3, r9
 8001be8:	f04f 0000 	mov.w	r0, #0
 8001bec:	f04f 0100 	mov.w	r1, #0
 8001bf0:	0159      	lsls	r1, r3, #5
 8001bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf6:	0150      	lsls	r0, r2, #5
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4641      	mov	r1, r8
 8001bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c02:	4649      	mov	r1, r9
 8001c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c20:	eb63 050b 	sbc.w	r5, r3, fp
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	00eb      	lsls	r3, r5, #3
 8001c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c32:	00e2      	lsls	r2, r4, #3
 8001c34:	4614      	mov	r4, r2
 8001c36:	461d      	mov	r5, r3
 8001c38:	4643      	mov	r3, r8
 8001c3a:	18e3      	adds	r3, r4, r3
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	464b      	mov	r3, r9
 8001c40:	eb45 0303 	adc.w	r3, r5, r3
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c52:	4629      	mov	r1, r5
 8001c54:	028b      	lsls	r3, r1, #10
 8001c56:	4621      	mov	r1, r4
 8001c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	028a      	lsls	r2, r1, #10
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c66:	2200      	movs	r2, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	61fa      	str	r2, [r7, #28]
 8001c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c70:	f7fe fb06 	bl	8000280 <__aeabi_uldivmod>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4613      	mov	r3, r2
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	3301      	adds	r3, #1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3750      	adds	r7, #80	; 0x50
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	007a1200 	.word	0x007a1200

08001cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000

08001cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cd4:	f7ff fff0 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	0a9b      	lsrs	r3, r3, #10
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	08006ba8 	.word	0x08006ba8

08001cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cfc:	f7ff ffdc 	bl	8001cb8 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0b5b      	lsrs	r3, r3, #13
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4903      	ldr	r1, [pc, #12]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	08006ba8 	.word	0x08006ba8

08001d20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_RCC_GetClockConfig+0x60>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0207 	and.w	r2, r3, #7
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e041      	b.n	8001e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f839 	bl	8001e22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 f9ca 	bl	800215c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d001      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e044      	b.n	8001eda <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d018      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7a:	d013      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <HAL_TIM_Base_Start_IT+0xb4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00e      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d009      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d111      	bne.n	8001ec8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d010      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec6:	e007      	b.n	8001ed8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40000400 	.word	0x40000400
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40000c00 	.word	0x40000c00
 8001ef8:	40014000 	.word	0x40014000

08001efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d122      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d11b      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0202 	mvn.w	r2, #2
 8001f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8ee 	bl	8002120 <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8e0 	bl	800210c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8f1 	bl	8002134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d122      	bne.n	8001fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d11b      	bne.n	8001fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0204 	mvn.w	r2, #4
 8001f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8c4 	bl	8002120 <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8b6 	bl	800210c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f8c7 	bl	8002134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0208 	mvn.w	r2, #8
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f89a 	bl	8002120 <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f88c 	bl	800210c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f89d 	bl	8002134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	2b10      	cmp	r3, #16
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b10      	cmp	r3, #16
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0210 	mvn.w	r2, #16
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2208      	movs	r2, #8
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f870 	bl	8002120 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f862 	bl	800210c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f873 	bl	8002134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0201 	mvn.w	r2, #1
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fd52 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	2b80      	cmp	r3, #128	; 0x80
 800208c:	d10e      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002098:	2b80      	cmp	r3, #128	; 0x80
 800209a:	d107      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8e2 	bl	8002270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b6:	2b40      	cmp	r3, #64	; 0x40
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c4:	2b40      	cmp	r3, #64	; 0x40
 80020c6:	d107      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f838 	bl	8002148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	d107      	bne.n	8002104 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0220 	mvn.w	r2, #32
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8ac 	bl	800225c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a34      	ldr	r2, [pc, #208]	; (8002240 <TIM_Base_SetConfig+0xe4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00f      	beq.n	8002194 <TIM_Base_SetConfig+0x38>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217a:	d00b      	beq.n	8002194 <TIM_Base_SetConfig+0x38>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a31      	ldr	r2, [pc, #196]	; (8002244 <TIM_Base_SetConfig+0xe8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <TIM_Base_SetConfig+0x38>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a30      	ldr	r2, [pc, #192]	; (8002248 <TIM_Base_SetConfig+0xec>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <TIM_Base_SetConfig+0x38>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a2f      	ldr	r2, [pc, #188]	; (800224c <TIM_Base_SetConfig+0xf0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d108      	bne.n	80021a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a25      	ldr	r2, [pc, #148]	; (8002240 <TIM_Base_SetConfig+0xe4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01b      	beq.n	80021e6 <TIM_Base_SetConfig+0x8a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d017      	beq.n	80021e6 <TIM_Base_SetConfig+0x8a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a22      	ldr	r2, [pc, #136]	; (8002244 <TIM_Base_SetConfig+0xe8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <TIM_Base_SetConfig+0x8a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a21      	ldr	r2, [pc, #132]	; (8002248 <TIM_Base_SetConfig+0xec>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00f      	beq.n	80021e6 <TIM_Base_SetConfig+0x8a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a20      	ldr	r2, [pc, #128]	; (800224c <TIM_Base_SetConfig+0xf0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00b      	beq.n	80021e6 <TIM_Base_SetConfig+0x8a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <TIM_Base_SetConfig+0xf4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <TIM_Base_SetConfig+0x8a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1e      	ldr	r2, [pc, #120]	; (8002254 <TIM_Base_SetConfig+0xf8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d003      	beq.n	80021e6 <TIM_Base_SetConfig+0x8a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <TIM_Base_SetConfig+0xfc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d108      	bne.n	80021f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <TIM_Base_SetConfig+0xe4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d103      	bne.n	800222c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	615a      	str	r2, [r3, #20]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40010000 	.word	0x40010000
 8002244:	40000400 	.word	0x40000400
 8002248:	40000800 	.word	0x40000800
 800224c:	40000c00 	.word	0x40000c00
 8002250:	40014000 	.word	0x40014000
 8002254:	40014400 	.word	0x40014400
 8002258:	40014800 	.word	0x40014800

0800225c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e03f      	b.n	8002316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fc7e 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	; 0x24
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f929 	bl	8002520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b08a      	sub	sp, #40	; 0x28
 8002322:	af02      	add	r7, sp, #8
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b20      	cmp	r3, #32
 800233c:	d17c      	bne.n	8002438 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_UART_Transmit+0x2c>
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e075      	b.n	800243a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_UART_Transmit+0x3e>
 8002358:	2302      	movs	r3, #2
 800235a:	e06e      	b.n	800243a <HAL_UART_Transmit+0x11c>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2221      	movs	r2, #33	; 0x21
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002372:	f7fe fd99 	bl	8000ea8 <HAL_GetTick>
 8002376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	88fa      	ldrh	r2, [r7, #6]
 800237c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	88fa      	ldrh	r2, [r7, #6]
 8002382:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238c:	d108      	bne.n	80023a0 <HAL_UART_Transmit+0x82>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d104      	bne.n	80023a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	e003      	b.n	80023a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023b0:	e02a      	b.n	8002408 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2200      	movs	r2, #0
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f840 	bl	8002442 <UART_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e036      	b.n	800243a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10b      	bne.n	80023ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	3302      	adds	r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	e007      	b.n	80023fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	781a      	ldrb	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	3301      	adds	r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1cf      	bne.n	80023b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2200      	movs	r2, #0
 800241a:	2140      	movs	r1, #64	; 0x40
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f810 	bl	8002442 <UART_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e006      	b.n	800243a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e000      	b.n	800243a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002438:	2302      	movs	r3, #2
  }
}
 800243a:	4618      	mov	r0, r3
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b090      	sub	sp, #64	; 0x40
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002452:	e050      	b.n	80024f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d04c      	beq.n	80024f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800245c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <UART_WaitOnFlagUntilTimeout+0x30>
 8002462:	f7fe fd21 	bl	8000ea8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800246e:	429a      	cmp	r2, r3
 8002470:	d241      	bcs.n	80024f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	330c      	adds	r3, #12
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	e853 3f00 	ldrex	r3, [r3]
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	330c      	adds	r3, #12
 8002490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002492:	637a      	str	r2, [r7, #52]	; 0x34
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800249a:	e841 2300 	strex	r3, r2, [r1]
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1e5      	bne.n	8002472 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3314      	adds	r3, #20
 80024ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	e853 3f00 	ldrex	r3, [r3]
 80024b4:	613b      	str	r3, [r7, #16]
   return(result);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3314      	adds	r3, #20
 80024c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c6:	623a      	str	r2, [r7, #32]
 80024c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ca:	69f9      	ldr	r1, [r7, #28]
 80024cc:	6a3a      	ldr	r2, [r7, #32]
 80024ce:	e841 2300 	strex	r3, r2, [r1]
 80024d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e5      	bne.n	80024a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e00f      	b.n	8002516 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4013      	ands	r3, r2
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	429a      	cmp	r2, r3
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	429a      	cmp	r2, r3
 8002512:	d09f      	beq.n	8002454 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3740      	adds	r7, #64	; 0x40
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002524:	b0c0      	sub	sp, #256	; 0x100
 8002526:	af00      	add	r7, sp, #0
 8002528:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253c:	68d9      	ldr	r1, [r3, #12]
 800253e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	ea40 0301 	orr.w	r3, r0, r1
 8002548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800254a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	431a      	orrs	r2, r3
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	431a      	orrs	r2, r3
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002578:	f021 010c 	bic.w	r1, r1, #12
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002586:	430b      	orrs	r3, r1
 8002588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800258a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259a:	6999      	ldr	r1, [r3, #24]
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	ea40 0301 	orr.w	r3, r0, r1
 80025a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b8f      	ldr	r3, [pc, #572]	; (80027ec <UART_SetConfig+0x2cc>)
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d005      	beq.n	80025c0 <UART_SetConfig+0xa0>
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b8d      	ldr	r3, [pc, #564]	; (80027f0 <UART_SetConfig+0x2d0>)
 80025bc:	429a      	cmp	r2, r3
 80025be:	d104      	bne.n	80025ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025c0:	f7ff fb9a 	bl	8001cf8 <HAL_RCC_GetPCLK2Freq>
 80025c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025c8:	e003      	b.n	80025d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025ca:	f7ff fb81 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 80025ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025dc:	f040 810c 	bne.w	80027f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025f2:	4622      	mov	r2, r4
 80025f4:	462b      	mov	r3, r5
 80025f6:	1891      	adds	r1, r2, r2
 80025f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80025fa:	415b      	adcs	r3, r3
 80025fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002602:	4621      	mov	r1, r4
 8002604:	eb12 0801 	adds.w	r8, r2, r1
 8002608:	4629      	mov	r1, r5
 800260a:	eb43 0901 	adc.w	r9, r3, r1
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800261a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800261e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002622:	4690      	mov	r8, r2
 8002624:	4699      	mov	r9, r3
 8002626:	4623      	mov	r3, r4
 8002628:	eb18 0303 	adds.w	r3, r8, r3
 800262c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002630:	462b      	mov	r3, r5
 8002632:	eb49 0303 	adc.w	r3, r9, r3
 8002636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002646:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800264a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800264e:	460b      	mov	r3, r1
 8002650:	18db      	adds	r3, r3, r3
 8002652:	653b      	str	r3, [r7, #80]	; 0x50
 8002654:	4613      	mov	r3, r2
 8002656:	eb42 0303 	adc.w	r3, r2, r3
 800265a:	657b      	str	r3, [r7, #84]	; 0x54
 800265c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002664:	f7fd fe0c 	bl	8000280 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4b61      	ldr	r3, [pc, #388]	; (80027f4 <UART_SetConfig+0x2d4>)
 800266e:	fba3 2302 	umull	r2, r3, r3, r2
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	011c      	lsls	r4, r3, #4
 8002676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800267a:	2200      	movs	r2, #0
 800267c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002680:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002688:	4642      	mov	r2, r8
 800268a:	464b      	mov	r3, r9
 800268c:	1891      	adds	r1, r2, r2
 800268e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002690:	415b      	adcs	r3, r3
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002698:	4641      	mov	r1, r8
 800269a:	eb12 0a01 	adds.w	sl, r2, r1
 800269e:	4649      	mov	r1, r9
 80026a0:	eb43 0b01 	adc.w	fp, r3, r1
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026b8:	4692      	mov	sl, r2
 80026ba:	469b      	mov	fp, r3
 80026bc:	4643      	mov	r3, r8
 80026be:	eb1a 0303 	adds.w	r3, sl, r3
 80026c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026c6:	464b      	mov	r3, r9
 80026c8:	eb4b 0303 	adc.w	r3, fp, r3
 80026cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026e4:	460b      	mov	r3, r1
 80026e6:	18db      	adds	r3, r3, r3
 80026e8:	643b      	str	r3, [r7, #64]	; 0x40
 80026ea:	4613      	mov	r3, r2
 80026ec:	eb42 0303 	adc.w	r3, r2, r3
 80026f0:	647b      	str	r3, [r7, #68]	; 0x44
 80026f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026fa:	f7fd fdc1 	bl	8000280 <__aeabi_uldivmod>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4611      	mov	r1, r2
 8002704:	4b3b      	ldr	r3, [pc, #236]	; (80027f4 <UART_SetConfig+0x2d4>)
 8002706:	fba3 2301 	umull	r2, r3, r3, r1
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2264      	movs	r2, #100	; 0x64
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	1acb      	subs	r3, r1, r3
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800271a:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <UART_SetConfig+0x2d4>)
 800271c:	fba3 2302 	umull	r2, r3, r3, r2
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002728:	441c      	add	r4, r3
 800272a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800272e:	2200      	movs	r2, #0
 8002730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002734:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800273c:	4642      	mov	r2, r8
 800273e:	464b      	mov	r3, r9
 8002740:	1891      	adds	r1, r2, r2
 8002742:	63b9      	str	r1, [r7, #56]	; 0x38
 8002744:	415b      	adcs	r3, r3
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800274c:	4641      	mov	r1, r8
 800274e:	1851      	adds	r1, r2, r1
 8002750:	6339      	str	r1, [r7, #48]	; 0x30
 8002752:	4649      	mov	r1, r9
 8002754:	414b      	adcs	r3, r1
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002764:	4659      	mov	r1, fp
 8002766:	00cb      	lsls	r3, r1, #3
 8002768:	4651      	mov	r1, sl
 800276a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800276e:	4651      	mov	r1, sl
 8002770:	00ca      	lsls	r2, r1, #3
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	4603      	mov	r3, r0
 8002778:	4642      	mov	r2, r8
 800277a:	189b      	adds	r3, r3, r2
 800277c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002780:	464b      	mov	r3, r9
 8002782:	460a      	mov	r2, r1
 8002784:	eb42 0303 	adc.w	r3, r2, r3
 8002788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002798:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800279c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027a0:	460b      	mov	r3, r1
 80027a2:	18db      	adds	r3, r3, r3
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a6:	4613      	mov	r3, r2
 80027a8:	eb42 0303 	adc.w	r3, r2, r3
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027b6:	f7fd fd63 	bl	8000280 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <UART_SetConfig+0x2d4>)
 80027c0:	fba3 1302 	umull	r1, r3, r3, r2
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	2164      	movs	r1, #100	; 0x64
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	3332      	adds	r3, #50	; 0x32
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <UART_SetConfig+0x2d4>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	f003 0207 	and.w	r2, r3, #7
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4422      	add	r2, r4
 80027e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027e8:	e105      	b.n	80029f6 <UART_SetConfig+0x4d6>
 80027ea:	bf00      	nop
 80027ec:	40011000 	.word	0x40011000
 80027f0:	40011400 	.word	0x40011400
 80027f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002802:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800280a:	4642      	mov	r2, r8
 800280c:	464b      	mov	r3, r9
 800280e:	1891      	adds	r1, r2, r2
 8002810:	6239      	str	r1, [r7, #32]
 8002812:	415b      	adcs	r3, r3
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800281a:	4641      	mov	r1, r8
 800281c:	1854      	adds	r4, r2, r1
 800281e:	4649      	mov	r1, r9
 8002820:	eb43 0501 	adc.w	r5, r3, r1
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	00eb      	lsls	r3, r5, #3
 800282e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002832:	00e2      	lsls	r2, r4, #3
 8002834:	4614      	mov	r4, r2
 8002836:	461d      	mov	r5, r3
 8002838:	4643      	mov	r3, r8
 800283a:	18e3      	adds	r3, r4, r3
 800283c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002840:	464b      	mov	r3, r9
 8002842:	eb45 0303 	adc.w	r3, r5, r3
 8002846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800284a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002856:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002866:	4629      	mov	r1, r5
 8002868:	008b      	lsls	r3, r1, #2
 800286a:	4621      	mov	r1, r4
 800286c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002870:	4621      	mov	r1, r4
 8002872:	008a      	lsls	r2, r1, #2
 8002874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002878:	f7fd fd02 	bl	8000280 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4b60      	ldr	r3, [pc, #384]	; (8002a04 <UART_SetConfig+0x4e4>)
 8002882:	fba3 2302 	umull	r2, r3, r3, r2
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	011c      	lsls	r4, r3, #4
 800288a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800288e:	2200      	movs	r2, #0
 8002890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002894:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800289c:	4642      	mov	r2, r8
 800289e:	464b      	mov	r3, r9
 80028a0:	1891      	adds	r1, r2, r2
 80028a2:	61b9      	str	r1, [r7, #24]
 80028a4:	415b      	adcs	r3, r3
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ac:	4641      	mov	r1, r8
 80028ae:	1851      	adds	r1, r2, r1
 80028b0:	6139      	str	r1, [r7, #16]
 80028b2:	4649      	mov	r1, r9
 80028b4:	414b      	adcs	r3, r1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028c4:	4659      	mov	r1, fp
 80028c6:	00cb      	lsls	r3, r1, #3
 80028c8:	4651      	mov	r1, sl
 80028ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ce:	4651      	mov	r1, sl
 80028d0:	00ca      	lsls	r2, r1, #3
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	4642      	mov	r2, r8
 80028da:	189b      	adds	r3, r3, r2
 80028dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028e0:	464b      	mov	r3, r9
 80028e2:	460a      	mov	r2, r1
 80028e4:	eb42 0303 	adc.w	r3, r2, r3
 80028e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80028f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002904:	4649      	mov	r1, r9
 8002906:	008b      	lsls	r3, r1, #2
 8002908:	4641      	mov	r1, r8
 800290a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800290e:	4641      	mov	r1, r8
 8002910:	008a      	lsls	r2, r1, #2
 8002912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002916:	f7fd fcb3 	bl	8000280 <__aeabi_uldivmod>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <UART_SetConfig+0x4e4>)
 8002920:	fba3 1302 	umull	r1, r3, r3, r2
 8002924:	095b      	lsrs	r3, r3, #5
 8002926:	2164      	movs	r1, #100	; 0x64
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	3332      	adds	r3, #50	; 0x32
 8002932:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <UART_SetConfig+0x4e4>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293e:	441c      	add	r4, r3
 8002940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002944:	2200      	movs	r2, #0
 8002946:	673b      	str	r3, [r7, #112]	; 0x70
 8002948:	677a      	str	r2, [r7, #116]	; 0x74
 800294a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800294e:	4642      	mov	r2, r8
 8002950:	464b      	mov	r3, r9
 8002952:	1891      	adds	r1, r2, r2
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	415b      	adcs	r3, r3
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800295e:	4641      	mov	r1, r8
 8002960:	1851      	adds	r1, r2, r1
 8002962:	6039      	str	r1, [r7, #0]
 8002964:	4649      	mov	r1, r9
 8002966:	414b      	adcs	r3, r1
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002976:	4659      	mov	r1, fp
 8002978:	00cb      	lsls	r3, r1, #3
 800297a:	4651      	mov	r1, sl
 800297c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002980:	4651      	mov	r1, sl
 8002982:	00ca      	lsls	r2, r1, #3
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	4603      	mov	r3, r0
 800298a:	4642      	mov	r2, r8
 800298c:	189b      	adds	r3, r3, r2
 800298e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002990:	464b      	mov	r3, r9
 8002992:	460a      	mov	r2, r1
 8002994:	eb42 0303 	adc.w	r3, r2, r3
 8002998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	663b      	str	r3, [r7, #96]	; 0x60
 80029a4:	667a      	str	r2, [r7, #100]	; 0x64
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029b2:	4649      	mov	r1, r9
 80029b4:	008b      	lsls	r3, r1, #2
 80029b6:	4641      	mov	r1, r8
 80029b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029bc:	4641      	mov	r1, r8
 80029be:	008a      	lsls	r2, r1, #2
 80029c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029c4:	f7fd fc5c 	bl	8000280 <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <UART_SetConfig+0x4e4>)
 80029ce:	fba3 1302 	umull	r1, r3, r3, r2
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2164      	movs	r1, #100	; 0x64
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	3332      	adds	r3, #50	; 0x32
 80029e0:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <UART_SetConfig+0x4e4>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	f003 020f 	and.w	r2, r3, #15
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4422      	add	r2, r4
 80029f4:	609a      	str	r2, [r3, #8]
}
 80029f6:	bf00      	nop
 80029f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029fc:	46bd      	mov	sp, r7
 80029fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a02:	bf00      	nop
 8002a04:	51eb851f 	.word	0x51eb851f

08002a08 <__NVIC_SetPriority>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <SysTick_Handler+0x1c>)
 8002a62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a64:	f002 f872 	bl	8004b4c <xTaskGetSchedulerState>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d001      	beq.n	8002a72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a6e:	f003 f85b 	bl	8005b28 <xPortSysTickHandler>
  }
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a80:	2100      	movs	r1, #0
 8002a82:	f06f 0004 	mvn.w	r0, #4
 8002a86:	f7ff ffbf 	bl	8002a08 <__NVIC_SetPriority>
#endif
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a96:	f3ef 8305 	mrs	r3, IPSR
 8002a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002aa2:	f06f 0305 	mvn.w	r3, #5
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	e00c      	b.n	8002ac4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <osKernelInitialize+0x44>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <osKernelInitialize+0x44>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	e002      	b.n	8002ac4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ac4:	687b      	ldr	r3, [r7, #4]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	2000013c 	.word	0x2000013c

08002ad8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ade:	f3ef 8305 	mrs	r3, IPSR
 8002ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ae4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002aea:	f06f 0305 	mvn.w	r3, #5
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	e010      	b.n	8002b14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <osKernelStart+0x48>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d109      	bne.n	8002b0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002afa:	f7ff ffbf 	bl	8002a7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <osKernelStart+0x48>)
 8002b00:	2202      	movs	r2, #2
 8002b02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b04:	f001 fbc6 	bl	8004294 <vTaskStartScheduler>
      stat = osOK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	e002      	b.n	8002b14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b14:	687b      	ldr	r3, [r7, #4]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	2000013c 	.word	0x2000013c

08002b24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af04      	add	r7, sp, #16
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b34:	f3ef 8305 	mrs	r3, IPSR
 8002b38:	617b      	str	r3, [r7, #20]
  return(result);
 8002b3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d17e      	bne.n	8002c3e <osThreadNew+0x11a>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d07b      	beq.n	8002c3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b4a:	2318      	movs	r3, #24
 8002b4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d045      	beq.n	8002bea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <osThreadNew+0x48>
        name = attr->name;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <osThreadNew+0x6e>
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b38      	cmp	r3, #56	; 0x38
 8002b84:	d805      	bhi.n	8002b92 <osThreadNew+0x6e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <osThreadNew+0x72>
        return (NULL);
 8002b92:	2300      	movs	r3, #0
 8002b94:	e054      	b.n	8002c40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00e      	beq.n	8002bcc <osThreadNew+0xa8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2bbb      	cmp	r3, #187	; 0xbb
 8002bb4:	d90a      	bls.n	8002bcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <osThreadNew+0xa8>
        mem = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	e010      	b.n	8002bee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10c      	bne.n	8002bee <osThreadNew+0xca>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d108      	bne.n	8002bee <osThreadNew+0xca>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d104      	bne.n	8002bee <osThreadNew+0xca>
          mem = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e001      	b.n	8002bee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d110      	bne.n	8002c16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bfc:	9202      	str	r2, [sp, #8]
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	6a3a      	ldr	r2, [r7, #32]
 8002c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f001 f956 	bl	8003ebc <xTaskCreateStatic>
 8002c10:	4603      	mov	r3, r0
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	e013      	b.n	8002c3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d110      	bne.n	8002c3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	f107 0310 	add.w	r3, r7, #16
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f001 f9a1 	bl	8003f76 <xTaskCreate>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d001      	beq.n	8002c3e <osThreadNew+0x11a>
            hTask = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c3e:	693b      	ldr	r3, [r7, #16]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3728      	adds	r7, #40	; 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <osThreadFlagsSet+0x1a>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	da03      	bge.n	8002c6a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8002c62:	f06f 0303 	mvn.w	r3, #3
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e035      	b.n	8002cd6 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c70:	f3ef 8305 	mrs	r3, IPSR
 8002c74:	613b      	str	r3, [r7, #16]
  return(result);
 8002c76:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01f      	beq.n	8002cbc <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8002c80:	f107 0308 	add.w	r3, r7, #8
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2300      	movs	r3, #0
 8002c88:	2201      	movs	r2, #1
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f002 f907 	bl	8004ea0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8002c92:	f107 030c 	add.w	r3, r7, #12
 8002c96:	2200      	movs	r2, #0
 8002c98:	9200      	str	r2, [sp, #0]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f002 f8fe 	bl	8004ea0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d015      	beq.n	8002cd6 <osThreadFlagsSet+0x8e>
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <osThreadFlagsSet+0x98>)
 8002cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	e00c      	b.n	8002cd6 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	6839      	ldr	r1, [r7, #0]
 8002cc2:	6978      	ldr	r0, [r7, #20]
 8002cc4:	f002 f82e 	bl	8004d24 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2100      	movs	r1, #0
 8002cd0:	6978      	ldr	r0, [r7, #20]
 8002cd2:	f002 f827 	bl	8004d24 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cf0:	f3ef 8305 	mrs	r3, IPSR
 8002cf4:	617b      	str	r3, [r7, #20]
  return(result);
 8002cf6:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8002cfc:	f06f 0305 	mvn.w	r3, #5
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d02:	e06b      	b.n	8002ddc <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da03      	bge.n	8002d12 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8002d0a:	f06f 0303 	mvn.w	r3, #3
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d10:	e064      	b.n	8002ddc <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d20:	e001      	b.n	8002d26 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8002d2e:	f001 fbcd 	bl	80044cc <xTaskGetTickCount>
 8002d32:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8002d34:	f107 0210 	add.w	r2, r7, #16
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f001 ff91 	bl	8004c64 <xTaskNotifyWait>
 8002d42:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d137      	bne.n	8002dba <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8002d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d56:	4313      	orrs	r3, r2
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00c      	beq.n	8002d7e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	4013      	ands	r3, r2
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d032      	beq.n	8002dd6 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8002d76:	f06f 0302 	mvn.w	r3, #2
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8002d7c:	e02e      	b.n	8002ddc <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d128      	bne.n	8002dda <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d103      	bne.n	8002d96 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8002d8e:	f06f 0302 	mvn.w	r3, #2
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8002d94:	e022      	b.n	8002ddc <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8002d96:	f001 fb99 	bl	80044cc <xTaskGetTickCount>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d902      	bls.n	8002db0 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
 8002dae:	e00e      	b.n	8002dce <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
 8002db8:	e009      	b.n	8002dce <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d103      	bne.n	8002dc8 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8002dc0:	f06f 0302 	mvn.w	r3, #2
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc6:	e002      	b.n	8002dce <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8002dc8:	f06f 0301 	mvn.w	r3, #1
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1af      	bne.n	8002d34 <osThreadFlagsWait+0x50>
 8002dd4:	e002      	b.n	8002ddc <osThreadFlagsWait+0xf8>
            break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <osThreadFlagsWait+0xf8>
            break;
 8002dda:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3730      	adds	r7, #48	; 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dee:	f3ef 8305 	mrs	r3, IPSR
 8002df2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002df4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <osDelay+0x1c>
    stat = osErrorISR;
 8002dfa:	f06f 0305 	mvn.w	r3, #5
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e007      	b.n	8002e12 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f001 fa0d 	bl	800422c <vTaskDelay>
    }
  }

  return (stat);
 8002e12:	68fb      	ldr	r3, [r7, #12]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e28:	f3ef 8305 	mrs	r3, IPSR
 8002e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e2e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d12d      	bne.n	8002e90 <osEventFlagsNew+0x74>
    mem = -1;
 8002e34:	f04f 33ff 	mov.w	r3, #4294967295
 8002e38:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d015      	beq.n	8002e6c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <osEventFlagsNew+0x3a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b1f      	cmp	r3, #31
 8002e4e:	d902      	bls.n	8002e56 <osEventFlagsNew+0x3a>
        mem = 1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	e00c      	b.n	8002e70 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d108      	bne.n	8002e70 <osEventFlagsNew+0x54>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <osEventFlagsNew+0x54>
          mem = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	e001      	b.n	8002e70 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d106      	bne.n	8002e84 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f972 	bl	8003164 <xEventGroupCreateStatic>
 8002e80:	6178      	str	r0, [r7, #20]
 8002e82:	e005      	b.n	8002e90 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002e8a:	f000 f9a2 	bl	80031d2 <xEventGroupCreate>
 8002e8e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002e90:	697b      	ldr	r3, [r7, #20]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b08a      	sub	sp, #40	; 0x28
 8002e9e:	af02      	add	r7, sp, #8
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eaa:	f3ef 8305 	mrs	r3, IPSR
 8002eae:	613b      	str	r3, [r7, #16]
  return(result);
 8002eb0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d15f      	bne.n	8002f76 <osMessageQueueNew+0xdc>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05c      	beq.n	8002f76 <osMessageQueueNew+0xdc>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d059      	beq.n	8002f76 <osMessageQueueNew+0xdc>
    mem = -1;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d029      	beq.n	8002f22 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d012      	beq.n	8002efc <osMessageQueueNew+0x62>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b4f      	cmp	r3, #79	; 0x4f
 8002edc:	d90e      	bls.n	8002efc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d302      	bcc.n	8002efc <osMessageQueueNew+0x62>
        mem = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	e014      	b.n	8002f26 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d110      	bne.n	8002f26 <osMessageQueueNew+0x8c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10c      	bne.n	8002f26 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d108      	bne.n	8002f26 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d104      	bne.n	8002f26 <osMessageQueueNew+0x8c>
          mem = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	e001      	b.n	8002f26 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10b      	bne.n	8002f44 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2100      	movs	r1, #0
 8002f36:	9100      	str	r1, [sp, #0]
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fa80 	bl	8003440 <xQueueGenericCreateStatic>
 8002f40:	61f8      	str	r0, [r7, #28]
 8002f42:	e008      	b.n	8002f56 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 faee 	bl	8003530 <xQueueGenericCreate>
 8002f54:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00c      	beq.n	8002f76 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <osMessageQueueNew+0xd0>
        name = attr->name;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	e001      	b.n	8002f6e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002f6e:	6979      	ldr	r1, [r7, #20]
 8002f70:	69f8      	ldr	r0, [r7, #28]
 8002f72:	f000 ff45 	bl	8003e00 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002f76:	69fb      	ldr	r3, [r7, #28]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f98:	f3ef 8305 	mrs	r3, IPSR
 8002f9c:	617b      	str	r3, [r7, #20]
  return(result);
 8002f9e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d028      	beq.n	8002ff6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <osMessageQueuePut+0x36>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <osMessageQueuePut+0x36>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002fb6:	f06f 0303 	mvn.w	r3, #3
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	e038      	b.n	8003030 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002fc2:	f107 0210 	add.w	r2, r7, #16
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	69b8      	ldr	r0, [r7, #24]
 8002fcc:	f000 fc0c 	bl	80037e8 <xQueueGenericSendFromISR>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d003      	beq.n	8002fde <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002fd6:	f06f 0302 	mvn.w	r3, #2
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	e028      	b.n	8003030 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d025      	beq.n	8003030 <osMessageQueuePut+0xb0>
 8002fe4:	4b15      	ldr	r3, [pc, #84]	; (800303c <osMessageQueuePut+0xbc>)
 8002fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	e01c      	b.n	8003030 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <osMessageQueuePut+0x82>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d103      	bne.n	800300a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003002:	f06f 0303 	mvn.w	r3, #3
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	e012      	b.n	8003030 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800300a:	2300      	movs	r3, #0
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	68b9      	ldr	r1, [r7, #8]
 8003010:	69b8      	ldr	r0, [r7, #24]
 8003012:	f000 faeb 	bl	80035ec <xQueueGenericSend>
 8003016:	4603      	mov	r3, r0
 8003018:	2b01      	cmp	r3, #1
 800301a:	d009      	beq.n	8003030 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003022:	f06f 0301 	mvn.w	r3, #1
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	e002      	b.n	8003030 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800302a:	f06f 0302 	mvn.w	r3, #2
 800302e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003030:	69fb      	ldr	r3, [r7, #28]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	e000ed04 	.word	0xe000ed04

08003040 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003056:	f3ef 8305 	mrs	r3, IPSR
 800305a:	617b      	str	r3, [r7, #20]
  return(result);
 800305c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800305e:	2b00      	cmp	r3, #0
 8003060:	d028      	beq.n	80030b4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <osMessageQueueGet+0x34>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <osMessageQueueGet+0x34>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003074:	f06f 0303 	mvn.w	r3, #3
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	e037      	b.n	80030ec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003080:	f107 0310 	add.w	r3, r7, #16
 8003084:	461a      	mov	r2, r3
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	69b8      	ldr	r0, [r7, #24]
 800308a:	f000 fd29 	bl	8003ae0 <xQueueReceiveFromISR>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d003      	beq.n	800309c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003094:	f06f 0302 	mvn.w	r3, #2
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	e027      	b.n	80030ec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d024      	beq.n	80030ec <osMessageQueueGet+0xac>
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <osMessageQueueGet+0xb8>)
 80030a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	e01b      	b.n	80030ec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <osMessageQueueGet+0x80>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80030c0:	f06f 0303 	mvn.w	r3, #3
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	e011      	b.n	80030ec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	69b8      	ldr	r0, [r7, #24]
 80030ce:	f000 fc27 	bl	8003920 <xQueueReceive>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d009      	beq.n	80030ec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80030de:	f06f 0301 	mvn.w	r3, #1
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	e002      	b.n	80030ec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80030e6:	f06f 0302 	mvn.w	r3, #2
 80030ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80030ec:	69fb      	ldr	r3, [r7, #28]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <vApplicationGetIdleTaskMemory+0x2c>)
 800310c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4a06      	ldr	r2, [pc, #24]	; (800312c <vApplicationGetIdleTaskMemory+0x30>)
 8003112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	601a      	str	r2, [r3, #0]
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000140 	.word	0x20000140
 800312c:	200001fc 	.word	0x200001fc

08003130 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a07      	ldr	r2, [pc, #28]	; (800315c <vApplicationGetTimerTaskMemory+0x2c>)
 8003140:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4a06      	ldr	r2, [pc, #24]	; (8003160 <vApplicationGetTimerTaskMemory+0x30>)
 8003146:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800314e:	601a      	str	r2, [r3, #0]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	200003fc 	.word	0x200003fc
 8003160:	200004b8 	.word	0x200004b8

08003164 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003184:	bf00      	nop
 8003186:	e7fe      	b.n	8003186 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003188:	2320      	movs	r3, #32
 800318a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b20      	cmp	r3, #32
 8003190:	d00a      	beq.n	80031a8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	60fb      	str	r3, [r7, #12]
}
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f822 	bl	8003206 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2201      	movs	r2, #1
 80031c6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80031c8:	697b      	ldr	r3, [r7, #20]
	}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80031d8:	2020      	movs	r0, #32
 80031da:	f002 fd35 	bl	8005c48 <pvPortMalloc>
 80031de:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 f808 	bl	8003206 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80031fc:	687b      	ldr	r3, [r7, #4]
	}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f103 0208 	add.w	r2, r3, #8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f04f 32ff 	mov.w	r2, #4294967295
 800321e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f103 0208 	add.w	r2, r3, #8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f103 0208 	add.w	r2, r3, #8
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	601a      	str	r2, [r3, #0]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d103      	bne.n	80032c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e00c      	b.n	80032e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3308      	adds	r3, #8
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	e002      	b.n	80032d6 <vListInsert+0x2e>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d2f6      	bcs.n	80032d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	601a      	str	r2, [r3, #0]
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6892      	ldr	r2, [r2, #8]
 8003330:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6852      	ldr	r2, [r2, #4]
 800333a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	d103      	bne.n	800334e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	1e5a      	subs	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <xQueueGenericReset+0x2a>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60bb      	str	r3, [r7, #8]
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800339a:	f002 fb33 	bl	8005a04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	441a      	add	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	3b01      	subs	r3, #1
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	441a      	add	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	22ff      	movs	r2, #255	; 0xff
 80033de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	22ff      	movs	r2, #255	; 0xff
 80033e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d114      	bne.n	800341a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01a      	beq.n	800342e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3310      	adds	r3, #16
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 f9e3 	bl	80047c8 <xTaskRemoveFromEventList>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <xQueueGenericReset+0xcc>)
 800340a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	e009      	b.n	800342e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3310      	adds	r3, #16
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fef1 	bl	8003206 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3324      	adds	r3, #36	; 0x24
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff feec 	bl	8003206 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800342e:	f002 fb19 	bl	8005a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003432:	2301      	movs	r3, #1
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	e000ed04 	.word	0xe000ed04

08003440 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	; 0x38
 8003444:	af02      	add	r7, sp, #8
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003466:	bf00      	nop
 8003468:	e7fe      	b.n	8003468 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <xQueueGenericCreateStatic+0x52>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <xQueueGenericCreateStatic+0x56>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <xQueueGenericCreateStatic+0x58>
 8003496:	2300      	movs	r3, #0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	623b      	str	r3, [r7, #32]
}
 80034ae:	bf00      	nop
 80034b0:	e7fe      	b.n	80034b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <xQueueGenericCreateStatic+0x7e>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <xQueueGenericCreateStatic+0x82>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <xQueueGenericCreateStatic+0x84>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	61fb      	str	r3, [r7, #28]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034de:	2350      	movs	r3, #80	; 0x50
 80034e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b50      	cmp	r3, #80	; 0x50
 80034e6:	d00a      	beq.n	80034fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	61bb      	str	r3, [r7, #24]
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80034fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00d      	beq.n	8003526 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003512:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	4613      	mov	r3, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f83f 	bl	80035a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003528:	4618      	mov	r0, r3
 800352a:	3730      	adds	r7, #48	; 0x30
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	613b      	str	r3, [r7, #16]
}
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	3350      	adds	r3, #80	; 0x50
 8003568:	4618      	mov	r0, r3
 800356a:	f002 fb6d 	bl	8005c48 <pvPortMalloc>
 800356e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d011      	beq.n	800359a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3350      	adds	r3, #80	; 0x50
 800357e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003588:	79fa      	ldrb	r2, [r7, #7]
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f805 	bl	80035a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800359a:	69bb      	ldr	r3, [r7, #24]
	}
 800359c:	4618      	mov	r0, r3
 800359e:	3720      	adds	r7, #32
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d103      	bne.n	80035c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e002      	b.n	80035c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035d2:	2101      	movs	r1, #1
 80035d4:	69b8      	ldr	r0, [r7, #24]
 80035d6:	f7ff fecb 	bl	8003370 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08e      	sub	sp, #56	; 0x38
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035fa:	2300      	movs	r3, #0
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xQueueGenericSend+0x32>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <xQueueGenericSend+0x40>
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <xQueueGenericSend+0x44>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <xQueueGenericSend+0x46>
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <xQueueGenericSend+0x60>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d103      	bne.n	800365a <xQueueGenericSend+0x6e>
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <xQueueGenericSend+0x72>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <xQueueGenericSend+0x74>
 800365e:	2300      	movs	r3, #0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <xQueueGenericSend+0x8e>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	623b      	str	r3, [r7, #32]
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800367a:	f001 fa67 	bl	8004b4c <xTaskGetSchedulerState>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <xQueueGenericSend+0x9e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <xQueueGenericSend+0xa2>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <xQueueGenericSend+0xa4>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <xQueueGenericSend+0xbe>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	61fb      	str	r3, [r7, #28]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036aa:	f002 f9ab 	bl	8005a04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <xQueueGenericSend+0xd4>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d129      	bne.n	8003714 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036c6:	f000 fa8b 	bl	8003be0 <prvCopyDataToQueue>
 80036ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	3324      	adds	r3, #36	; 0x24
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 f875 	bl	80047c8 <xTaskRemoveFromEventList>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036e4:	4b3f      	ldr	r3, [pc, #252]	; (80037e4 <xQueueGenericSend+0x1f8>)
 80036e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	e00a      	b.n	800370c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d007      	beq.n	800370c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036fc:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <xQueueGenericSend+0x1f8>)
 80036fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800370c:	f002 f9aa 	bl	8005a64 <vPortExitCritical>
				return pdPASS;
 8003710:	2301      	movs	r3, #1
 8003712:	e063      	b.n	80037dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800371a:	f002 f9a3 	bl	8005a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800371e:	2300      	movs	r3, #0
 8003720:	e05c      	b.n	80037dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003724:	2b00      	cmp	r3, #0
 8003726:	d106      	bne.n	8003736 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4618      	mov	r0, r3
 800372e:	f001 f8af 	bl	8004890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003732:	2301      	movs	r3, #1
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003736:	f002 f995 	bl	8005a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800373a:	f000 fe1b 	bl	8004374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800373e:	f002 f961 	bl	8005a04 <vPortEnterCritical>
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003748:	b25b      	sxtb	r3, r3
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374e:	d103      	bne.n	8003758 <xQueueGenericSend+0x16c>
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800375e:	b25b      	sxtb	r3, r3
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d103      	bne.n	800376e <xQueueGenericSend+0x182>
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800376e:	f002 f979 	bl	8005a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003772:	1d3a      	adds	r2, r7, #4
 8003774:	f107 0314 	add.w	r3, r7, #20
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f001 f89e 	bl	80048bc <xTaskCheckForTimeOut>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d124      	bne.n	80037d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003788:	f000 fb22 	bl	8003dd0 <prvIsQueueFull>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d018      	beq.n	80037c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003794:	3310      	adds	r3, #16
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f000 ffc4 	bl	8004728 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037a2:	f000 faad 	bl	8003d00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037a6:	f000 fdf3 	bl	8004390 <xTaskResumeAll>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f47f af7c 	bne.w	80036aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <xQueueGenericSend+0x1f8>)
 80037b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	e772      	b.n	80036aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037c6:	f000 fa9b 	bl	8003d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037ca:	f000 fde1 	bl	8004390 <xTaskResumeAll>
 80037ce:	e76c      	b.n	80036aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037d2:	f000 fa95 	bl	8003d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037d6:	f000 fddb 	bl	8004390 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3738      	adds	r7, #56	; 0x38
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	e000ed04 	.word	0xe000ed04

080037e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b090      	sub	sp, #64	; 0x40
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d103      	bne.n	8003824 <xQueueGenericSendFromISR+0x3c>
 800381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <xQueueGenericSendFromISR+0x40>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <xQueueGenericSendFromISR+0x42>
 8003828:	2300      	movs	r3, #0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d103      	bne.n	8003852 <xQueueGenericSendFromISR+0x6a>
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <xQueueGenericSendFromISR+0x6e>
 8003852:	2301      	movs	r3, #1
 8003854:	e000      	b.n	8003858 <xQueueGenericSendFromISR+0x70>
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	623b      	str	r3, [r7, #32]
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003872:	f002 f9a9 	bl	8005bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003876:	f3ef 8211 	mrs	r2, BASEPRI
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	61fa      	str	r2, [r7, #28]
 800388c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800388e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <xQueueGenericSendFromISR+0xbc>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d12f      	bne.n	8003904 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038ba:	f000 f991 	bl	8003be0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c6:	d112      	bne.n	80038ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d016      	beq.n	80038fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	3324      	adds	r3, #36	; 0x24
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 ff77 	bl	80047c8 <xTaskRemoveFromEventList>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e007      	b.n	80038fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038f2:	3301      	adds	r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	b25a      	sxtb	r2, r3
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038fe:	2301      	movs	r3, #1
 8003900:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003902:	e001      	b.n	8003908 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003904:	2300      	movs	r3, #0
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003912:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003916:	4618      	mov	r0, r3
 8003918:	3740      	adds	r7, #64	; 0x40
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <xQueueReceive+0x30>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	623b      	str	r3, [r7, #32]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <xQueueReceive+0x3e>
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <xQueueReceive+0x42>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <xQueueReceive+0x44>
 8003962:	2300      	movs	r3, #0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <xQueueReceive+0x5e>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	61fb      	str	r3, [r7, #28]
}
 800397a:	bf00      	nop
 800397c:	e7fe      	b.n	800397c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800397e:	f001 f8e5 	bl	8004b4c <xTaskGetSchedulerState>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <xQueueReceive+0x6e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <xQueueReceive+0x72>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <xQueueReceive+0x74>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueReceive+0x8e>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61bb      	str	r3, [r7, #24]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ae:	f002 f829 	bl	8005a04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01f      	beq.n	80039fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039c2:	f000 f977 	bl	8003cb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	1e5a      	subs	r2, r3, #1
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00f      	beq.n	80039f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	3310      	adds	r3, #16
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fef4 	bl	80047c8 <xTaskRemoveFromEventList>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039e6:	4b3d      	ldr	r3, [pc, #244]	; (8003adc <xQueueReceive+0x1bc>)
 80039e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039f6:	f002 f835 	bl	8005a64 <vPortExitCritical>
				return pdPASS;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e069      	b.n	8003ad2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d103      	bne.n	8003a0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a04:	f002 f82e 	bl	8005a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e062      	b.n	8003ad2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a12:	f107 0310 	add.w	r3, r7, #16
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 ff3a 	bl	8004890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a20:	f002 f820 	bl	8005a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a24:	f000 fca6 	bl	8004374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a28:	f001 ffec 	bl	8005a04 <vPortEnterCritical>
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d103      	bne.n	8003a42 <xQueueReceive+0x122>
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d103      	bne.n	8003a58 <xQueueReceive+0x138>
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a58:	f002 f804 	bl	8005a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a5c:	1d3a      	adds	r2, r7, #4
 8003a5e:	f107 0310 	add.w	r3, r7, #16
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 ff29 	bl	80048bc <xTaskCheckForTimeOut>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d123      	bne.n	8003ab8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a72:	f000 f997 	bl	8003da4 <prvIsQueueEmpty>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d017      	beq.n	8003aac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	3324      	adds	r3, #36	; 0x24
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fe4f 	bl	8004728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8c:	f000 f938 	bl	8003d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a90:	f000 fc7e 	bl	8004390 <xTaskResumeAll>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d189      	bne.n	80039ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <xQueueReceive+0x1bc>)
 8003a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	e780      	b.n	80039ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aae:	f000 f927 	bl	8003d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ab2:	f000 fc6d 	bl	8004390 <xTaskResumeAll>
 8003ab6:	e77a      	b.n	80039ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aba:	f000 f921 	bl	8003d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003abe:	f000 fc67 	bl	8004390 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac4:	f000 f96e 	bl	8003da4 <prvIsQueueEmpty>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f43f af6f 	beq.w	80039ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ad0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3730      	adds	r7, #48	; 0x30
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10a      	bne.n	8003b0c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	623b      	str	r3, [r7, #32]
}
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <xQueueReceiveFromISR+0x3a>
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <xQueueReceiveFromISR+0x3e>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <xQueueReceiveFromISR+0x40>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	61fb      	str	r3, [r7, #28]
}
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b3a:	f002 f845 	bl	8005bc8 <vPortValidateInterruptPriority>
	__asm volatile
 8003b3e:	f3ef 8211 	mrs	r2, BASEPRI
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	61ba      	str	r2, [r7, #24]
 8003b54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003b56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d02f      	beq.n	8003bc6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b74:	f000 f89e 	bl	8003cb4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	1e5a      	subs	r2, r3, #1
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003b80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d112      	bne.n	8003bb0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	3310      	adds	r3, #16
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fe16 	bl	80047c8 <xTaskRemoveFromEventList>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00e      	beq.n	8003bc0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e007      	b.n	8003bc0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	b25a      	sxtb	r2, r3
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc4:	e001      	b.n	8003bca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f383 8811 	msr	BASEPRI, r3
}
 8003bd4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3738      	adds	r7, #56	; 0x38
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10d      	bne.n	8003c1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d14d      	bne.n	8003ca2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 ffbc 	bl	8004b88 <xTaskPriorityDisinherit>
 8003c10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	e043      	b.n	8003ca2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d119      	bne.n	8003c54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6858      	ldr	r0, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	f002 fa22 	bl	8006074 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	441a      	add	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d32b      	bcc.n	8003ca2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	e026      	b.n	8003ca2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68d8      	ldr	r0, [r3, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	f002 fa08 	bl	8006074 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	441a      	add	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d207      	bcs.n	8003c90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	425b      	negs	r3, r3
 8003c8a:	441a      	add	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d105      	bne.n	8003ca2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003caa:	697b      	ldr	r3, [r7, #20]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	441a      	add	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d303      	bcc.n	8003ce8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68d9      	ldr	r1, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6838      	ldr	r0, [r7, #0]
 8003cf4:	f002 f9be 	bl	8006074 <memcpy>
	}
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d08:	f001 fe7c 	bl	8005a04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d14:	e011      	b.n	8003d3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d012      	beq.n	8003d44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3324      	adds	r3, #36	; 0x24
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fd50 	bl	80047c8 <xTaskRemoveFromEventList>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d2e:	f000 fe27 	bl	8004980 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	dce9      	bgt.n	8003d16 <prvUnlockQueue+0x16>
 8003d42:	e000      	b.n	8003d46 <prvUnlockQueue+0x46>
					break;
 8003d44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	22ff      	movs	r2, #255	; 0xff
 8003d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d4e:	f001 fe89 	bl	8005a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d52:	f001 fe57 	bl	8005a04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d5e:	e011      	b.n	8003d84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d012      	beq.n	8003d8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3310      	adds	r3, #16
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fd2b 	bl	80047c8 <xTaskRemoveFromEventList>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d78:	f000 fe02 	bl	8004980 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d7c:	7bbb      	ldrb	r3, [r7, #14]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	dce9      	bgt.n	8003d60 <prvUnlockQueue+0x60>
 8003d8c:	e000      	b.n	8003d90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	22ff      	movs	r2, #255	; 0xff
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d98:	f001 fe64 	bl	8005a64 <vPortExitCritical>
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dac:	f001 fe2a 	bl	8005a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003db8:	2301      	movs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e001      	b.n	8003dc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dc2:	f001 fe4f 	bl	8005a64 <vPortExitCritical>

	return xReturn;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dd8:	f001 fe14 	bl	8005a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d102      	bne.n	8003dee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e001      	b.n	8003df2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003df2:	f001 fe37 	bl	8005a64 <vPortExitCritical>

	return xReturn;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e014      	b.n	8003e3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e10:	4a0f      	ldr	r2, [pc, #60]	; (8003e50 <vQueueAddToRegistry+0x50>)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e1c:	490c      	ldr	r1, [pc, #48]	; (8003e50 <vQueueAddToRegistry+0x50>)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <vQueueAddToRegistry+0x50>)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e32:	e006      	b.n	8003e42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b07      	cmp	r3, #7
 8003e3e:	d9e7      	bls.n	8003e10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	200008b8 	.word	0x200008b8

08003e54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e64:	f001 fdce 	bl	8005a04 <vPortEnterCritical>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d103      	bne.n	8003e7e <vQueueWaitForMessageRestricted+0x2a>
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8a:	d103      	bne.n	8003e94 <vQueueWaitForMessageRestricted+0x40>
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e94:	f001 fde6 	bl	8005a64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d106      	bne.n	8003eae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3324      	adds	r3, #36	; 0x24
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fc61 	bl	8004770 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003eae:	6978      	ldr	r0, [r7, #20]
 8003eb0:	f7ff ff26 	bl	8003d00 <prvUnlockQueue>
	}
 8003eb4:	bf00      	nop
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08e      	sub	sp, #56	; 0x38
 8003ec0:	af04      	add	r7, sp, #16
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	623b      	str	r3, [r7, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <xTaskCreateStatic+0x46>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	61fb      	str	r3, [r7, #28]
}
 8003efe:	bf00      	nop
 8003f00:	e7fe      	b.n	8003f00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f02:	23bc      	movs	r3, #188	; 0xbc
 8003f04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2bbc      	cmp	r3, #188	; 0xbc
 8003f0a:	d00a      	beq.n	8003f22 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	61bb      	str	r3, [r7, #24]
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01e      	beq.n	8003f68 <xTaskCreateStatic+0xac>
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01b      	beq.n	8003f68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f42:	2300      	movs	r3, #0
 8003f44:	9303      	str	r3, [sp, #12]
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	9302      	str	r3, [sp, #8]
 8003f4a:	f107 0314 	add.w	r3, r7, #20
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 f850 	bl	8004000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f62:	f000 f8f3 	bl	800414c <prvAddNewTaskToReadyList>
 8003f66:	e001      	b.n	8003f6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f6c:	697b      	ldr	r3, [r7, #20]
	}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3728      	adds	r7, #40	; 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b08c      	sub	sp, #48	; 0x30
 8003f7a:	af04      	add	r7, sp, #16
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 fe5c 	bl	8005c48 <pvPortMalloc>
 8003f90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f98:	20bc      	movs	r0, #188	; 0xbc
 8003f9a:	f001 fe55 	bl	8005c48 <pvPortMalloc>
 8003f9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
 8003fac:	e005      	b.n	8003fba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f001 ff16 	bl	8005de0 <vPortFree>
 8003fb4:	e001      	b.n	8003fba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d017      	beq.n	8003ff0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9303      	str	r3, [sp, #12]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	9302      	str	r3, [sp, #8]
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f80e 	bl	8004000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fe4:	69f8      	ldr	r0, [r7, #28]
 8003fe6:	f000 f8b1 	bl	800414c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fea:	2301      	movs	r3, #1
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e002      	b.n	8003ff6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	461a      	mov	r2, r3
 8004018:	21a5      	movs	r1, #165	; 0xa5
 800401a:	f002 f839 	bl	8006090 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004028:	3b01      	subs	r3, #1
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f023 0307 	bic.w	r3, r3, #7
 8004036:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	617b      	str	r3, [r7, #20]
}
 8004054:	bf00      	nop
 8004056:	e7fe      	b.n	8004056 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01f      	beq.n	800409e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
 8004062:	e012      	b.n	800408a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	7819      	ldrb	r1, [r3, #0]
 800406c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	3334      	adds	r3, #52	; 0x34
 8004074:	460a      	mov	r2, r1
 8004076:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d006      	beq.n	8004092 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3301      	adds	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b0f      	cmp	r3, #15
 800408e:	d9e9      	bls.n	8004064 <prvInitialiseNewTask+0x64>
 8004090:	e000      	b.n	8004094 <prvInitialiseNewTask+0x94>
			{
				break;
 8004092:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800409c:	e003      	b.n	80040a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	2b37      	cmp	r3, #55	; 0x37
 80040aa:	d901      	bls.n	80040b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040ac:	2337      	movs	r3, #55	; 0x37
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	2200      	movs	r2, #0
 80040c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	3304      	adds	r3, #4
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff f8bd 	bl	8003246 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	3318      	adds	r3, #24
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff f8b8 	bl	8003246 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	3354      	adds	r3, #84	; 0x54
 8004100:	2260      	movs	r2, #96	; 0x60
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f001 ffc3 	bl	8006090 <memset>
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <prvInitialiseNewTask+0x140>)
 800410e:	659a      	str	r2, [r3, #88]	; 0x58
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <prvInitialiseNewTask+0x144>)
 8004114:	65da      	str	r2, [r3, #92]	; 0x5c
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	4a0b      	ldr	r2, [pc, #44]	; (8004148 <prvInitialiseNewTask+0x148>)
 800411a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	69b8      	ldr	r0, [r7, #24]
 8004122:	f001 fb43 	bl	80057ac <pxPortInitialiseStack>
 8004126:	4602      	mov	r2, r0
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004136:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004138:	bf00      	nop
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	08006bd0 	.word	0x08006bd0
 8004144:	08006bf0 	.word	0x08006bf0
 8004148:	08006bb0 	.word	0x08006bb0

0800414c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004154:	f001 fc56 	bl	8005a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004158:	4b2d      	ldr	r3, [pc, #180]	; (8004210 <prvAddNewTaskToReadyList+0xc4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	4a2c      	ldr	r2, [pc, #176]	; (8004210 <prvAddNewTaskToReadyList+0xc4>)
 8004160:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004162:	4b2c      	ldr	r3, [pc, #176]	; (8004214 <prvAddNewTaskToReadyList+0xc8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800416a:	4a2a      	ldr	r2, [pc, #168]	; (8004214 <prvAddNewTaskToReadyList+0xc8>)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004170:	4b27      	ldr	r3, [pc, #156]	; (8004210 <prvAddNewTaskToReadyList+0xc4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d110      	bne.n	800419a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004178:	f000 fc26 	bl	80049c8 <prvInitialiseTaskLists>
 800417c:	e00d      	b.n	800419a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800417e:	4b26      	ldr	r3, [pc, #152]	; (8004218 <prvAddNewTaskToReadyList+0xcc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004186:	4b23      	ldr	r3, [pc, #140]	; (8004214 <prvAddNewTaskToReadyList+0xc8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	429a      	cmp	r2, r3
 8004192:	d802      	bhi.n	800419a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004194:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <prvAddNewTaskToReadyList+0xc8>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <prvAddNewTaskToReadyList+0xd0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	4a1e      	ldr	r2, [pc, #120]	; (800421c <prvAddNewTaskToReadyList+0xd0>)
 80041a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041a4:	4b1d      	ldr	r3, [pc, #116]	; (800421c <prvAddNewTaskToReadyList+0xd0>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <prvAddNewTaskToReadyList+0xd4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d903      	bls.n	80041c0 <prvAddNewTaskToReadyList+0x74>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	4a18      	ldr	r2, [pc, #96]	; (8004220 <prvAddNewTaskToReadyList+0xd4>)
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <prvAddNewTaskToReadyList+0xd8>)
 80041ce:	441a      	add	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f7ff f842 	bl	8003260 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041dc:	f001 fc42 	bl	8005a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041e0:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <prvAddNewTaskToReadyList+0xcc>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <prvAddNewTaskToReadyList+0xc8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d207      	bcs.n	8004206 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <prvAddNewTaskToReadyList+0xdc>)
 80041f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000dcc 	.word	0x20000dcc
 8004214:	200008f8 	.word	0x200008f8
 8004218:	20000dd8 	.word	0x20000dd8
 800421c:	20000de8 	.word	0x20000de8
 8004220:	20000dd4 	.word	0x20000dd4
 8004224:	200008fc 	.word	0x200008fc
 8004228:	e000ed04 	.word	0xe000ed04

0800422c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d017      	beq.n	800426e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800423e:	4b13      	ldr	r3, [pc, #76]	; (800428c <vTaskDelay+0x60>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <vTaskDelay+0x30>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60bb      	str	r3, [r7, #8]
}
 8004258:	bf00      	nop
 800425a:	e7fe      	b.n	800425a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800425c:	f000 f88a 	bl	8004374 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004260:	2100      	movs	r1, #0
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 ff00 	bl	8005068 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004268:	f000 f892 	bl	8004390 <xTaskResumeAll>
 800426c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d107      	bne.n	8004284 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <vTaskDelay+0x64>)
 8004276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000df4 	.word	0x20000df4
 8004290:	e000ed04 	.word	0xe000ed04

08004294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	; 0x28
 8004298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042a2:	463a      	mov	r2, r7
 80042a4:	1d39      	adds	r1, r7, #4
 80042a6:	f107 0308 	add.w	r3, r7, #8
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe ff26 	bl	80030fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042b0:	6839      	ldr	r1, [r7, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	9202      	str	r2, [sp, #8]
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	2300      	movs	r3, #0
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2300      	movs	r3, #0
 80042c0:	460a      	mov	r2, r1
 80042c2:	4924      	ldr	r1, [pc, #144]	; (8004354 <vTaskStartScheduler+0xc0>)
 80042c4:	4824      	ldr	r0, [pc, #144]	; (8004358 <vTaskStartScheduler+0xc4>)
 80042c6:	f7ff fdf9 	bl	8003ebc <xTaskCreateStatic>
 80042ca:	4603      	mov	r3, r0
 80042cc:	4a23      	ldr	r2, [pc, #140]	; (800435c <vTaskStartScheduler+0xc8>)
 80042ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042d0:	4b22      	ldr	r3, [pc, #136]	; (800435c <vTaskStartScheduler+0xc8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042d8:	2301      	movs	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e001      	b.n	80042e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d102      	bne.n	80042ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042e8:	f000 ff12 	bl	8005110 <xTimerCreateTimerTask>
 80042ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d11b      	bne.n	800432c <vTaskStartScheduler+0x98>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	613b      	str	r3, [r7, #16]
}
 8004306:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004308:	4b15      	ldr	r3, [pc, #84]	; (8004360 <vTaskStartScheduler+0xcc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3354      	adds	r3, #84	; 0x54
 800430e:	4a15      	ldr	r2, [pc, #84]	; (8004364 <vTaskStartScheduler+0xd0>)
 8004310:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <vTaskStartScheduler+0xd4>)
 8004314:	f04f 32ff 	mov.w	r2, #4294967295
 8004318:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <vTaskStartScheduler+0xd8>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004320:	4b13      	ldr	r3, [pc, #76]	; (8004370 <vTaskStartScheduler+0xdc>)
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004326:	f001 facb 	bl	80058c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800432a:	e00e      	b.n	800434a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d10a      	bne.n	800434a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	60fb      	str	r3, [r7, #12]
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <vTaskStartScheduler+0xb4>
}
 800434a:	bf00      	nop
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	08006aec 	.word	0x08006aec
 8004358:	08004999 	.word	0x08004999
 800435c:	20000df0 	.word	0x20000df0
 8004360:	200008f8 	.word	0x200008f8
 8004364:	20000010 	.word	0x20000010
 8004368:	20000dec 	.word	0x20000dec
 800436c:	20000dd8 	.word	0x20000dd8
 8004370:	20000dd0 	.word	0x20000dd0

08004374 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004378:	4b04      	ldr	r3, [pc, #16]	; (800438c <vTaskSuspendAll+0x18>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	4a03      	ldr	r2, [pc, #12]	; (800438c <vTaskSuspendAll+0x18>)
 8004380:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	20000df4 	.word	0x20000df4

08004390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800439a:	2300      	movs	r3, #0
 800439c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800439e:	4b42      	ldr	r3, [pc, #264]	; (80044a8 <xTaskResumeAll+0x118>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <xTaskResumeAll+0x2c>
	__asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	603b      	str	r3, [r7, #0]
}
 80043b8:	bf00      	nop
 80043ba:	e7fe      	b.n	80043ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043bc:	f001 fb22 	bl	8005a04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043c0:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <xTaskResumeAll+0x118>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	4a38      	ldr	r2, [pc, #224]	; (80044a8 <xTaskResumeAll+0x118>)
 80043c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ca:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <xTaskResumeAll+0x118>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d162      	bne.n	8004498 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043d2:	4b36      	ldr	r3, [pc, #216]	; (80044ac <xTaskResumeAll+0x11c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d05e      	beq.n	8004498 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043da:	e02f      	b.n	800443c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043dc:	4b34      	ldr	r3, [pc, #208]	; (80044b0 <xTaskResumeAll+0x120>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3318      	adds	r3, #24
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe ff96 	bl	800331a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe ff91 	bl	800331a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	4b2d      	ldr	r3, [pc, #180]	; (80044b4 <xTaskResumeAll+0x124>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d903      	bls.n	800440c <xTaskResumeAll+0x7c>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <xTaskResumeAll+0x124>)
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <xTaskResumeAll+0x128>)
 800441a:	441a      	add	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f7fe ff1c 	bl	8003260 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	4b23      	ldr	r3, [pc, #140]	; (80044bc <xTaskResumeAll+0x12c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004436:	4b22      	ldr	r3, [pc, #136]	; (80044c0 <xTaskResumeAll+0x130>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800443c:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <xTaskResumeAll+0x120>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1cb      	bne.n	80043dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800444a:	f000 fb5f 	bl	8004b0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800444e:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <xTaskResumeAll+0x134>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d010      	beq.n	800447c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800445a:	f000 f847 	bl	80044ec <xTaskIncrementTick>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004464:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <xTaskResumeAll+0x130>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3b01      	subs	r3, #1
 800446e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f1      	bne.n	800445a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <xTaskResumeAll+0x134>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <xTaskResumeAll+0x130>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <xTaskResumeAll+0x138>)
 800448a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004498:	f001 fae4 	bl	8005a64 <vPortExitCritical>

	return xAlreadyYielded;
 800449c:	68bb      	ldr	r3, [r7, #8]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000df4 	.word	0x20000df4
 80044ac:	20000dcc 	.word	0x20000dcc
 80044b0:	20000d8c 	.word	0x20000d8c
 80044b4:	20000dd4 	.word	0x20000dd4
 80044b8:	200008fc 	.word	0x200008fc
 80044bc:	200008f8 	.word	0x200008f8
 80044c0:	20000de0 	.word	0x20000de0
 80044c4:	20000ddc 	.word	0x20000ddc
 80044c8:	e000ed04 	.word	0xe000ed04

080044cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <xTaskGetTickCount+0x1c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044d8:	687b      	ldr	r3, [r7, #4]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20000dd0 	.word	0x20000dd0

080044ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f6:	4b4f      	ldr	r3, [pc, #316]	; (8004634 <xTaskIncrementTick+0x148>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 808f 	bne.w	800461e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004500:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <xTaskIncrementTick+0x14c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004508:	4a4b      	ldr	r2, [pc, #300]	; (8004638 <xTaskIncrementTick+0x14c>)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d120      	bne.n	8004556 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004514:	4b49      	ldr	r3, [pc, #292]	; (800463c <xTaskIncrementTick+0x150>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <xTaskIncrementTick+0x48>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	603b      	str	r3, [r7, #0]
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <xTaskIncrementTick+0x46>
 8004534:	4b41      	ldr	r3, [pc, #260]	; (800463c <xTaskIncrementTick+0x150>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	4b41      	ldr	r3, [pc, #260]	; (8004640 <xTaskIncrementTick+0x154>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a3f      	ldr	r2, [pc, #252]	; (800463c <xTaskIncrementTick+0x150>)
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4a3f      	ldr	r2, [pc, #252]	; (8004640 <xTaskIncrementTick+0x154>)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <xTaskIncrementTick+0x158>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	4a3d      	ldr	r2, [pc, #244]	; (8004644 <xTaskIncrementTick+0x158>)
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	f000 fadb 	bl	8004b0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004556:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <xTaskIncrementTick+0x15c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	429a      	cmp	r2, r3
 800455e:	d349      	bcc.n	80045f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004560:	4b36      	ldr	r3, [pc, #216]	; (800463c <xTaskIncrementTick+0x150>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456a:	4b37      	ldr	r3, [pc, #220]	; (8004648 <xTaskIncrementTick+0x15c>)
 800456c:	f04f 32ff 	mov.w	r2, #4294967295
 8004570:	601a      	str	r2, [r3, #0]
					break;
 8004572:	e03f      	b.n	80045f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004574:	4b31      	ldr	r3, [pc, #196]	; (800463c <xTaskIncrementTick+0x150>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	429a      	cmp	r2, r3
 800458a:	d203      	bcs.n	8004594 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800458c:	4a2e      	ldr	r2, [pc, #184]	; (8004648 <xTaskIncrementTick+0x15c>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004592:	e02f      	b.n	80045f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	3304      	adds	r3, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe febe 	bl	800331a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d004      	beq.n	80045b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3318      	adds	r3, #24
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe feb5 	bl	800331a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <xTaskIncrementTick+0x160>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d903      	bls.n	80045c4 <xTaskIncrementTick+0xd8>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	4a22      	ldr	r2, [pc, #136]	; (800464c <xTaskIncrementTick+0x160>)
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <xTaskIncrementTick+0x164>)
 80045d2:	441a      	add	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f7fe fe40 	bl	8003260 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <xTaskIncrementTick+0x168>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d3b8      	bcc.n	8004560 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045ee:	2301      	movs	r3, #1
 80045f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045f2:	e7b5      	b.n	8004560 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045f4:	4b17      	ldr	r3, [pc, #92]	; (8004654 <xTaskIncrementTick+0x168>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	4915      	ldr	r1, [pc, #84]	; (8004650 <xTaskIncrementTick+0x164>)
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d901      	bls.n	8004610 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004610:	4b11      	ldr	r3, [pc, #68]	; (8004658 <xTaskIncrementTick+0x16c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e004      	b.n	8004628 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <xTaskIncrementTick+0x170>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3301      	adds	r3, #1
 8004624:	4a0d      	ldr	r2, [pc, #52]	; (800465c <xTaskIncrementTick+0x170>)
 8004626:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004628:	697b      	ldr	r3, [r7, #20]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000df4 	.word	0x20000df4
 8004638:	20000dd0 	.word	0x20000dd0
 800463c:	20000d84 	.word	0x20000d84
 8004640:	20000d88 	.word	0x20000d88
 8004644:	20000de4 	.word	0x20000de4
 8004648:	20000dec 	.word	0x20000dec
 800464c:	20000dd4 	.word	0x20000dd4
 8004650:	200008fc 	.word	0x200008fc
 8004654:	200008f8 	.word	0x200008f8
 8004658:	20000de0 	.word	0x20000de0
 800465c:	20000ddc 	.word	0x20000ddc

08004660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004666:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <vTaskSwitchContext+0xb0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800466e:	4b29      	ldr	r3, [pc, #164]	; (8004714 <vTaskSwitchContext+0xb4>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004674:	e046      	b.n	8004704 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004676:	4b27      	ldr	r3, [pc, #156]	; (8004714 <vTaskSwitchContext+0xb4>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800467c:	4b26      	ldr	r3, [pc, #152]	; (8004718 <vTaskSwitchContext+0xb8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	e010      	b.n	80046a6 <vTaskSwitchContext+0x46>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10a      	bne.n	80046a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	607b      	str	r3, [r7, #4]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <vTaskSwitchContext+0x3e>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	491d      	ldr	r1, [pc, #116]	; (800471c <vTaskSwitchContext+0xbc>)
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0e4      	beq.n	8004684 <vTaskSwitchContext+0x24>
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <vTaskSwitchContext+0xbc>)
 80046c6:	4413      	add	r3, r2
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	605a      	str	r2, [r3, #4]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	3308      	adds	r3, #8
 80046dc:	429a      	cmp	r2, r3
 80046de:	d104      	bne.n	80046ea <vTaskSwitchContext+0x8a>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4a0b      	ldr	r2, [pc, #44]	; (8004720 <vTaskSwitchContext+0xc0>)
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4a08      	ldr	r2, [pc, #32]	; (8004718 <vTaskSwitchContext+0xb8>)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <vTaskSwitchContext+0xc0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3354      	adds	r3, #84	; 0x54
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <vTaskSwitchContext+0xc4>)
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	20000df4 	.word	0x20000df4
 8004714:	20000de0 	.word	0x20000de0
 8004718:	20000dd4 	.word	0x20000dd4
 800471c:	200008fc 	.word	0x200008fc
 8004720:	200008f8 	.word	0x200008f8
 8004724:	20000010 	.word	0x20000010

08004728 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	60fb      	str	r3, [r7, #12]
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <vTaskPlaceOnEventList+0x44>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3318      	adds	r3, #24
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fe fda6 	bl	80032a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800475c:	2101      	movs	r1, #1
 800475e:	6838      	ldr	r0, [r7, #0]
 8004760:	f000 fc82 	bl	8005068 <prvAddCurrentTaskToDelayedList>
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	200008f8 	.word	0x200008f8

08004770 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	617b      	str	r3, [r7, #20]
}
 8004794:	bf00      	nop
 8004796:	e7fe      	b.n	8004796 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3318      	adds	r3, #24
 800479e:	4619      	mov	r1, r3
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7fe fd5d 	bl	8003260 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	68b8      	ldr	r0, [r7, #8]
 80047b6:	f000 fc57 	bl	8005068 <prvAddCurrentTaskToDelayedList>
	}
 80047ba:	bf00      	nop
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200008f8 	.word	0x200008f8

080047c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60fb      	str	r3, [r7, #12]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	3318      	adds	r3, #24
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe fd8e 	bl	800331a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fe:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <xTaskRemoveFromEventList+0xb0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d11d      	bne.n	8004842 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3304      	adds	r3, #4
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe fd85 	bl	800331a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	4b19      	ldr	r3, [pc, #100]	; (800487c <xTaskRemoveFromEventList+0xb4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d903      	bls.n	8004824 <xTaskRemoveFromEventList+0x5c>
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	4a16      	ldr	r2, [pc, #88]	; (800487c <xTaskRemoveFromEventList+0xb4>)
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4a13      	ldr	r2, [pc, #76]	; (8004880 <xTaskRemoveFromEventList+0xb8>)
 8004832:	441a      	add	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f7fe fd10 	bl	8003260 <vListInsertEnd>
 8004840:	e005      	b.n	800484e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	3318      	adds	r3, #24
 8004846:	4619      	mov	r1, r3
 8004848:	480e      	ldr	r0, [pc, #56]	; (8004884 <xTaskRemoveFromEventList+0xbc>)
 800484a:	f7fe fd09 	bl	8003260 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <xTaskRemoveFromEventList+0xc0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	429a      	cmp	r2, r3
 800485a:	d905      	bls.n	8004868 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800485c:	2301      	movs	r3, #1
 800485e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <xTaskRemoveFromEventList+0xc4>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e001      	b.n	800486c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800486c:	697b      	ldr	r3, [r7, #20]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000df4 	.word	0x20000df4
 800487c:	20000dd4 	.word	0x20000dd4
 8004880:	200008fc 	.word	0x200008fc
 8004884:	20000d8c 	.word	0x20000d8c
 8004888:	200008f8 	.word	0x200008f8
 800488c:	20000de0 	.word	0x20000de0

08004890 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <vTaskInternalSetTimeOutState+0x24>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <vTaskInternalSetTimeOutState+0x28>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	605a      	str	r2, [r3, #4]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	20000de4 	.word	0x20000de4
 80048b8:	20000dd0 	.word	0x20000dd0

080048bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	613b      	str	r3, [r7, #16]
}
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	60fb      	str	r3, [r7, #12]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048fe:	f001 f881 	bl	8005a04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004902:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <xTaskCheckForTimeOut+0xbc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d102      	bne.n	8004922 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	e023      	b.n	800496a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b15      	ldr	r3, [pc, #84]	; (800497c <xTaskCheckForTimeOut+0xc0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d007      	beq.n	800493e <xTaskCheckForTimeOut+0x82>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	429a      	cmp	r2, r3
 8004936:	d302      	bcc.n	800493e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004938:	2301      	movs	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	e015      	b.n	800496a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	429a      	cmp	r2, r3
 8004946:	d20b      	bcs.n	8004960 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	1ad2      	subs	r2, r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff ff9b 	bl	8004890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e004      	b.n	800496a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004966:	2301      	movs	r3, #1
 8004968:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800496a:	f001 f87b 	bl	8005a64 <vPortExitCritical>

	return xReturn;
 800496e:	69fb      	ldr	r3, [r7, #28]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3720      	adds	r7, #32
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000dd0 	.word	0x20000dd0
 800497c:	20000de4 	.word	0x20000de4

08004980 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004984:	4b03      	ldr	r3, [pc, #12]	; (8004994 <vTaskMissedYield+0x14>)
 8004986:	2201      	movs	r2, #1
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	20000de0 	.word	0x20000de0

08004998 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049a0:	f000 f852 	bl	8004a48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049a4:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <prvIdleTask+0x28>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d9f9      	bls.n	80049a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <prvIdleTask+0x2c>)
 80049ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049bc:	e7f0      	b.n	80049a0 <prvIdleTask+0x8>
 80049be:	bf00      	nop
 80049c0:	200008fc 	.word	0x200008fc
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	e00c      	b.n	80049ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4a12      	ldr	r2, [pc, #72]	; (8004a28 <prvInitialiseTaskLists+0x60>)
 80049e0:	4413      	add	r3, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fc0f 	bl	8003206 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3301      	adds	r3, #1
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b37      	cmp	r3, #55	; 0x37
 80049f2:	d9ef      	bls.n	80049d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049f4:	480d      	ldr	r0, [pc, #52]	; (8004a2c <prvInitialiseTaskLists+0x64>)
 80049f6:	f7fe fc06 	bl	8003206 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049fa:	480d      	ldr	r0, [pc, #52]	; (8004a30 <prvInitialiseTaskLists+0x68>)
 80049fc:	f7fe fc03 	bl	8003206 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a00:	480c      	ldr	r0, [pc, #48]	; (8004a34 <prvInitialiseTaskLists+0x6c>)
 8004a02:	f7fe fc00 	bl	8003206 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a06:	480c      	ldr	r0, [pc, #48]	; (8004a38 <prvInitialiseTaskLists+0x70>)
 8004a08:	f7fe fbfd 	bl	8003206 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a0c:	480b      	ldr	r0, [pc, #44]	; (8004a3c <prvInitialiseTaskLists+0x74>)
 8004a0e:	f7fe fbfa 	bl	8003206 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <prvInitialiseTaskLists+0x78>)
 8004a14:	4a05      	ldr	r2, [pc, #20]	; (8004a2c <prvInitialiseTaskLists+0x64>)
 8004a16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a18:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <prvInitialiseTaskLists+0x7c>)
 8004a1a:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <prvInitialiseTaskLists+0x68>)
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	200008fc 	.word	0x200008fc
 8004a2c:	20000d5c 	.word	0x20000d5c
 8004a30:	20000d70 	.word	0x20000d70
 8004a34:	20000d8c 	.word	0x20000d8c
 8004a38:	20000da0 	.word	0x20000da0
 8004a3c:	20000db8 	.word	0x20000db8
 8004a40:	20000d84 	.word	0x20000d84
 8004a44:	20000d88 	.word	0x20000d88

08004a48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a4e:	e019      	b.n	8004a84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a50:	f000 ffd8 	bl	8005a04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a54:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <prvCheckTasksWaitingTermination+0x50>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe fc5a 	bl	800331a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <prvCheckTasksWaitingTermination+0x54>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <prvCheckTasksWaitingTermination+0x54>)
 8004a6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <prvCheckTasksWaitingTermination+0x58>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <prvCheckTasksWaitingTermination+0x58>)
 8004a78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a7a:	f000 fff3 	bl	8005a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f810 	bl	8004aa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <prvCheckTasksWaitingTermination+0x58>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e1      	bne.n	8004a50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000da0 	.word	0x20000da0
 8004a9c:	20000dcc 	.word	0x20000dcc
 8004aa0:	20000db4 	.word	0x20000db4

08004aa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3354      	adds	r3, #84	; 0x54
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 fb97 	bl	80061e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d108      	bne.n	8004ad2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f001 f98b 	bl	8005de0 <vPortFree>
				vPortFree( pxTCB );
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 f988 	bl	8005de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ad0:	e018      	b.n	8004b04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d103      	bne.n	8004ae4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f001 f97f 	bl	8005de0 <vPortFree>
	}
 8004ae2:	e00f      	b.n	8004b04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d00a      	beq.n	8004b04 <prvDeleteTCB+0x60>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	60fb      	str	r3, [r7, #12]
}
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <prvDeleteTCB+0x5e>
	}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <prvResetNextTaskUnblockTime+0x38>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d104      	bne.n	8004b26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <prvResetNextTaskUnblockTime+0x3c>)
 8004b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b24:	e008      	b.n	8004b38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <prvResetNextTaskUnblockTime+0x38>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <prvResetNextTaskUnblockTime+0x3c>)
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	20000d84 	.word	0x20000d84
 8004b48:	20000dec 	.word	0x20000dec

08004b4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <xTaskGetSchedulerState+0x34>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	607b      	str	r3, [r7, #4]
 8004b5e:	e008      	b.n	8004b72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b60:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <xTaskGetSchedulerState+0x38>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b68:	2302      	movs	r3, #2
 8004b6a:	607b      	str	r3, [r7, #4]
 8004b6c:	e001      	b.n	8004b72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b72:	687b      	ldr	r3, [r7, #4]
	}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	20000dd8 	.word	0x20000dd8
 8004b84:	20000df4 	.word	0x20000df4

08004b88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d056      	beq.n	8004c4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b9e:	4b2e      	ldr	r3, [pc, #184]	; (8004c58 <xTaskPriorityDisinherit+0xd0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d00a      	beq.n	8004bbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60bb      	str	r3, [r7, #8]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be0:	1e5a      	subs	r2, r3, #1
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d02c      	beq.n	8004c4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d128      	bne.n	8004c4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe fb8b 	bl	800331a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <xTaskPriorityDisinherit+0xd4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d903      	bls.n	8004c2c <xTaskPriorityDisinherit+0xa4>
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <xTaskPriorityDisinherit+0xd4>)
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <xTaskPriorityDisinherit+0xd8>)
 8004c3a:	441a      	add	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f7fe fb0c 	bl	8003260 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c4c:	697b      	ldr	r3, [r7, #20]
	}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	200008f8 	.word	0x200008f8
 8004c5c:	20000dd4 	.word	0x20000dd4
 8004c60:	200008fc 	.word	0x200008fc

08004c64 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004c72:	f000 fec7 	bl	8005a04 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004c76:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <xTaskNotifyWait+0xb8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d01c      	beq.n	8004cbe <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004c84:	4b25      	ldr	r3, [pc, #148]	; (8004d1c <xTaskNotifyWait+0xb8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	43d2      	mvns	r2, r2
 8004c90:	400a      	ands	r2, r1
 8004c92:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004c96:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <xTaskNotifyWait+0xb8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	6838      	ldr	r0, [r7, #0]
 8004caa:	f000 f9dd 	bl	8005068 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004cae:	4b1c      	ldr	r3, [pc, #112]	; (8004d20 <xTaskNotifyWait+0xbc>)
 8004cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004cbe:	f000 fed1 	bl	8005a64 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004cc2:	f000 fe9f 	bl	8005a04 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004ccc:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <xTaskNotifyWait+0xb8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004cd8:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <xTaskNotifyWait+0xb8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d002      	beq.n	8004cec <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e00a      	b.n	8004d02 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <xTaskNotifyWait+0xb8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	43d2      	mvns	r2, r2
 8004cf8:	400a      	ands	r2, r1
 8004cfa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <xTaskNotifyWait+0xb8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8004d0c:	f000 feaa 	bl	8005a64 <vPortExitCritical>

		return xReturn;
 8004d10:	697b      	ldr	r3, [r7, #20]
	}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	200008f8 	.word	0x200008f8
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004d34:	2301      	movs	r3, #1
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <xTaskGenericNotify+0x30>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	61bb      	str	r3, [r7, #24]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004d58:	f000 fe54 	bl	8005a04 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004d72:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d82d      	bhi.n	8004dde <xTaskGenericNotify+0xba>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <xTaskGenericNotify+0x64>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004e01 	.word	0x08004e01
 8004d8c:	08004d9d 	.word	0x08004d9d
 8004d90:	08004daf 	.word	0x08004daf
 8004d94:	08004dbf 	.word	0x08004dbf
 8004d98:	08004dc9 	.word	0x08004dc9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004dac:	e02b      	b.n	8004e06 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004dbc:	e023      	b.n	8004e06 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004dc6:	e01e      	b.n	8004e06 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004dc8:	7ffb      	ldrb	r3, [r7, #31]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d004      	beq.n	8004dd8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004dd6:	e016      	b.n	8004e06 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004ddc:	e013      	b.n	8004e06 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d00c      	beq.n	8004e04 <xTaskGenericNotify+0xe0>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	617b      	str	r3, [r7, #20]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <xTaskGenericNotify+0xda>
					break;
 8004e00:	bf00      	nop
 8004e02:	e000      	b.n	8004e06 <xTaskGenericNotify+0xe2>

					break;
 8004e04:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e06:	7ffb      	ldrb	r3, [r7, #31]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d13a      	bne.n	8004e82 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe fa82 	bl	800331a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <xTaskGenericNotify+0x16c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d903      	bls.n	8004e2a <xTaskGenericNotify+0x106>
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <xTaskGenericNotify+0x16c>)
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4a17      	ldr	r2, [pc, #92]	; (8004e94 <xTaskGenericNotify+0x170>)
 8004e38:	441a      	add	r2, r3
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f7fe fa0d 	bl	8003260 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <xTaskGenericNotify+0x140>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	613b      	str	r3, [r7, #16]
}
 8004e60:	bf00      	nop
 8004e62:	e7fe      	b.n	8004e62 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <xTaskGenericNotify+0x174>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d907      	bls.n	8004e82 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004e72:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <xTaskGenericNotify+0x178>)
 8004e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004e82:	f000 fdef 	bl	8005a64 <vPortExitCritical>

		return xReturn;
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3728      	adds	r7, #40	; 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000dd4 	.word	0x20000dd4
 8004e94:	200008fc 	.word	0x200008fc
 8004e98:	200008f8 	.word	0x200008f8
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08e      	sub	sp, #56	; 0x38
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ed0:	f000 fe7a 	bl	8005bc8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004ed8:	f3ef 8211 	mrs	r2, BASEPRI
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	623a      	str	r2, [r7, #32]
 8004eee:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004ef0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d82f      	bhi.n	8004f7c <xTaskGenericNotifyFromISR+0xdc>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <xTaskGenericNotifyFromISR+0x84>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f9f 	.word	0x08004f9f
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f4b 	.word	0x08004f4b
 8004f30:	08004f5b 	.word	0x08004f5b
 8004f34:	08004f65 	.word	0x08004f65
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004f48:	e02c      	b.n	8004fa4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004f58:	e024      	b.n	8004fa4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8004f62:	e01f      	b.n	8004fa4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004f64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d004      	beq.n	8004f76 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004f74:	e016      	b.n	8004fa4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004f7a:	e013      	b.n	8004fa4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d00c      	beq.n	8004fa2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	61bb      	str	r3, [r7, #24]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <xTaskGenericNotifyFromISR+0x104>
					break;
 8004fa2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004fa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d146      	bne.n	800503a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	617b      	str	r3, [r7, #20]
}
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fca:	4b21      	ldr	r3, [pc, #132]	; (8005050 <xTaskGenericNotifyFromISR+0x1b0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d11d      	bne.n	800500e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe f99f 	bl	800331a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe0:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <xTaskGenericNotifyFromISR+0x1b4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d903      	bls.n	8004ff0 <xTaskGenericNotifyFromISR+0x150>
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	4a19      	ldr	r2, [pc, #100]	; (8005054 <xTaskGenericNotifyFromISR+0x1b4>)
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4a16      	ldr	r2, [pc, #88]	; (8005058 <xTaskGenericNotifyFromISR+0x1b8>)
 8004ffe:	441a      	add	r2, r3
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f7fe f92a 	bl	8003260 <vListInsertEnd>
 800500c:	e005      	b.n	800501a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	3318      	adds	r3, #24
 8005012:	4619      	mov	r1, r3
 8005014:	4811      	ldr	r0, [pc, #68]	; (800505c <xTaskGenericNotifyFromISR+0x1bc>)
 8005016:	f7fe f923 	bl	8003260 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <xTaskGenericNotifyFromISR+0x1c0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	429a      	cmp	r2, r3
 8005026:	d908      	bls.n	800503a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800502e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <xTaskGenericNotifyFromISR+0x1c4>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f383 8811 	msr	BASEPRI, r3
}
 8005044:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005048:	4618      	mov	r0, r3
 800504a:	3738      	adds	r7, #56	; 0x38
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20000df4 	.word	0x20000df4
 8005054:	20000dd4 	.word	0x20000dd4
 8005058:	200008fc 	.word	0x200008fc
 800505c:	20000d8c 	.word	0x20000d8c
 8005060:	200008f8 	.word	0x200008f8
 8005064:	20000de0 	.word	0x20000de0

08005068 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005072:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005078:	4b20      	ldr	r3, [pc, #128]	; (80050fc <prvAddCurrentTaskToDelayedList+0x94>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3304      	adds	r3, #4
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe f94b 	bl	800331a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d10a      	bne.n	80050a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005092:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <prvAddCurrentTaskToDelayedList+0x94>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4819      	ldr	r0, [pc, #100]	; (8005100 <prvAddCurrentTaskToDelayedList+0x98>)
 800509c:	f7fe f8e0 	bl	8003260 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050a0:	e026      	b.n	80050f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4413      	add	r3, r2
 80050a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050aa:	4b14      	ldr	r3, [pc, #80]	; (80050fc <prvAddCurrentTaskToDelayedList+0x94>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d209      	bcs.n	80050ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ba:	4b12      	ldr	r3, [pc, #72]	; (8005104 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <prvAddCurrentTaskToDelayedList+0x94>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f7fe f8ee 	bl	80032a8 <vListInsert>
}
 80050cc:	e010      	b.n	80050f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ce:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <prvAddCurrentTaskToDelayedList+0x94>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f7fe f8e4 	bl	80032a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <prvAddCurrentTaskToDelayedList+0xa4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d202      	bcs.n	80050f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050ea:	4a08      	ldr	r2, [pc, #32]	; (800510c <prvAddCurrentTaskToDelayedList+0xa4>)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6013      	str	r3, [r2, #0]
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	20000dd0 	.word	0x20000dd0
 80050fc:	200008f8 	.word	0x200008f8
 8005100:	20000db8 	.word	0x20000db8
 8005104:	20000d88 	.word	0x20000d88
 8005108:	20000d84 	.word	0x20000d84
 800510c:	20000dec 	.word	0x20000dec

08005110 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800511a:	f000 fb07 	bl	800572c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800511e:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <xTimerCreateTimerTask+0x80>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d021      	beq.n	800516a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800512e:	1d3a      	adds	r2, r7, #4
 8005130:	f107 0108 	add.w	r1, r7, #8
 8005134:	f107 030c 	add.w	r3, r7, #12
 8005138:	4618      	mov	r0, r3
 800513a:	f7fd fff9 	bl	8003130 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	9202      	str	r2, [sp, #8]
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	2302      	movs	r3, #2
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2300      	movs	r3, #0
 800514e:	460a      	mov	r2, r1
 8005150:	4910      	ldr	r1, [pc, #64]	; (8005194 <xTimerCreateTimerTask+0x84>)
 8005152:	4811      	ldr	r0, [pc, #68]	; (8005198 <xTimerCreateTimerTask+0x88>)
 8005154:	f7fe feb2 	bl	8003ebc <xTaskCreateStatic>
 8005158:	4603      	mov	r3, r0
 800515a:	4a10      	ldr	r2, [pc, #64]	; (800519c <xTimerCreateTimerTask+0x8c>)
 800515c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800515e:	4b0f      	ldr	r3, [pc, #60]	; (800519c <xTimerCreateTimerTask+0x8c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005166:	2301      	movs	r3, #1
 8005168:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	613b      	str	r3, [r7, #16]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005186:	697b      	ldr	r3, [r7, #20]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000e28 	.word	0x20000e28
 8005194:	08006af4 	.word	0x08006af4
 8005198:	080052d5 	.word	0x080052d5
 800519c:	20000e2c 	.word	0x20000e2c

080051a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10a      	bne.n	80051ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	623b      	str	r3, [r7, #32]
}
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051ce:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <xTimerGenericCommand+0x98>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d02a      	beq.n	800522c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b05      	cmp	r3, #5
 80051e6:	dc18      	bgt.n	800521a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051e8:	f7ff fcb0 	bl	8004b4c <xTaskGetSchedulerState>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d109      	bne.n	8005206 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051f2:	4b11      	ldr	r3, [pc, #68]	; (8005238 <xTimerGenericCommand+0x98>)
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	f107 0110 	add.w	r1, r7, #16
 80051fa:	2300      	movs	r3, #0
 80051fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fe:	f7fe f9f5 	bl	80035ec <xQueueGenericSend>
 8005202:	6278      	str	r0, [r7, #36]	; 0x24
 8005204:	e012      	b.n	800522c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <xTimerGenericCommand+0x98>)
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	f107 0110 	add.w	r1, r7, #16
 800520e:	2300      	movs	r3, #0
 8005210:	2200      	movs	r2, #0
 8005212:	f7fe f9eb 	bl	80035ec <xQueueGenericSend>
 8005216:	6278      	str	r0, [r7, #36]	; 0x24
 8005218:	e008      	b.n	800522c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800521a:	4b07      	ldr	r3, [pc, #28]	; (8005238 <xTimerGenericCommand+0x98>)
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	f107 0110 	add.w	r1, r7, #16
 8005222:	2300      	movs	r3, #0
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	f7fe fadf 	bl	80037e8 <xQueueGenericSendFromISR>
 800522a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800522e:	4618      	mov	r0, r3
 8005230:	3728      	adds	r7, #40	; 0x28
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000e28 	.word	0x20000e28

0800523c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af02      	add	r7, sp, #8
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005246:	4b22      	ldr	r3, [pc, #136]	; (80052d0 <prvProcessExpiredTimer+0x94>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3304      	adds	r3, #4
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe f860 	bl	800331a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d022      	beq.n	80052ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	18d1      	adds	r1, r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	6978      	ldr	r0, [r7, #20]
 8005276:	f000 f8d1 	bl	800541c <prvInsertTimerInActiveList>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01f      	beq.n	80052c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005280:	2300      	movs	r3, #0
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	2300      	movs	r3, #0
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	2100      	movs	r1, #0
 800528a:	6978      	ldr	r0, [r7, #20]
 800528c:	f7ff ff88 	bl	80051a0 <xTimerGenericCommand>
 8005290:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d113      	bne.n	80052c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	60fb      	str	r3, [r7, #12]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052b4:	f023 0301 	bic.w	r3, r3, #1
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	6978      	ldr	r0, [r7, #20]
 80052c6:	4798      	blx	r3
}
 80052c8:	bf00      	nop
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000e20 	.word	0x20000e20

080052d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f857 	bl	8005394 <prvGetNextExpireTime>
 80052e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4619      	mov	r1, r3
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f803 	bl	80052f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052f2:	f000 f8d5 	bl	80054a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052f6:	e7f1      	b.n	80052dc <prvTimerTask+0x8>

080052f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005302:	f7ff f837 	bl	8004374 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005306:	f107 0308 	add.w	r3, r7, #8
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f866 	bl	80053dc <prvSampleTimeNow>
 8005310:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d130      	bne.n	800537a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <prvProcessTimerOrBlockTask+0x3c>
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	429a      	cmp	r2, r3
 8005324:	d806      	bhi.n	8005334 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005326:	f7ff f833 	bl	8004390 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff ff85 	bl	800523c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005332:	e024      	b.n	800537e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d008      	beq.n	800534c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <prvProcessTimerOrBlockTask+0x90>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <prvProcessTimerOrBlockTask+0x50>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <prvProcessTimerOrBlockTask+0x52>
 8005348:	2300      	movs	r3, #0
 800534a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <prvProcessTimerOrBlockTask+0x94>)
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	4619      	mov	r1, r3
 800535a:	f7fe fd7b 	bl	8003e54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800535e:	f7ff f817 	bl	8004390 <xTaskResumeAll>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005368:	4b09      	ldr	r3, [pc, #36]	; (8005390 <prvProcessTimerOrBlockTask+0x98>)
 800536a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	f3bf 8f6f 	isb	sy
}
 8005378:	e001      	b.n	800537e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800537a:	f7ff f809 	bl	8004390 <xTaskResumeAll>
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000e24 	.word	0x20000e24
 800538c:	20000e28 	.word	0x20000e28
 8005390:	e000ed04 	.word	0xe000ed04

08005394 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <prvGetNextExpireTime+0x44>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <prvGetNextExpireTime+0x16>
 80053a6:	2201      	movs	r2, #1
 80053a8:	e000      	b.n	80053ac <prvGetNextExpireTime+0x18>
 80053aa:	2200      	movs	r2, #0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <prvGetNextExpireTime+0x44>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e001      	b.n	80053c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053c8:	68fb      	ldr	r3, [r7, #12]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000e20 	.word	0x20000e20

080053dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053e4:	f7ff f872 	bl	80044cc <xTaskGetTickCount>
 80053e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <prvSampleTimeNow+0x3c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d205      	bcs.n	8005400 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053f4:	f000 f936 	bl	8005664 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e002      	b.n	8005406 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005406:	4a04      	ldr	r2, [pc, #16]	; (8005418 <prvSampleTimeNow+0x3c>)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800540c:	68fb      	ldr	r3, [r7, #12]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000e30 	.word	0x20000e30

0800541c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d812      	bhi.n	8005468 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	1ad2      	subs	r2, r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005450:	2301      	movs	r3, #1
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e01b      	b.n	800548e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005456:	4b10      	ldr	r3, [pc, #64]	; (8005498 <prvInsertTimerInActiveList+0x7c>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	3304      	adds	r3, #4
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f7fd ff21 	bl	80032a8 <vListInsert>
 8005466:	e012      	b.n	800548e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d206      	bcs.n	800547e <prvInsertTimerInActiveList+0x62>
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d302      	bcc.n	800547e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005478:	2301      	movs	r3, #1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	e007      	b.n	800548e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800547e:	4b07      	ldr	r3, [pc, #28]	; (800549c <prvInsertTimerInActiveList+0x80>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f7fd ff0d 	bl	80032a8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800548e:	697b      	ldr	r3, [r7, #20]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000e24 	.word	0x20000e24
 800549c:	20000e20 	.word	0x20000e20

080054a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08e      	sub	sp, #56	; 0x38
 80054a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054a6:	e0ca      	b.n	800563e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	da18      	bge.n	80054e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054ae:	1d3b      	adds	r3, r7, #4
 80054b0:	3304      	adds	r3, #4
 80054b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	61fb      	str	r3, [r7, #28]
}
 80054cc:	bf00      	nop
 80054ce:	e7fe      	b.n	80054ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054d6:	6850      	ldr	r0, [r2, #4]
 80054d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054da:	6892      	ldr	r2, [r2, #8]
 80054dc:	4611      	mov	r1, r2
 80054de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f2c0 80aa 	blt.w	800563c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	3304      	adds	r3, #4
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fd ff0e 	bl	800331a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054fe:	463b      	mov	r3, r7
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff ff6b 	bl	80053dc <prvSampleTimeNow>
 8005506:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b09      	cmp	r3, #9
 800550c:	f200 8097 	bhi.w	800563e <prvProcessReceivedCommands+0x19e>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <prvProcessReceivedCommands+0x78>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	08005541 	.word	0x08005541
 800551c:	08005541 	.word	0x08005541
 8005520:	08005541 	.word	0x08005541
 8005524:	080055b5 	.word	0x080055b5
 8005528:	080055c9 	.word	0x080055c9
 800552c:	08005613 	.word	0x08005613
 8005530:	08005541 	.word	0x08005541
 8005534:	08005541 	.word	0x08005541
 8005538:	080055b5 	.word	0x080055b5
 800553c:	080055c9 	.word	0x080055c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	b2da      	uxtb	r2, r3
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	18d1      	adds	r1, r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005560:	f7ff ff5c 	bl	800541c <prvInsertTimerInActiveList>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d069      	beq.n	800563e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005570:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d05e      	beq.n	800563e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	441a      	add	r2, r3
 8005588:	2300      	movs	r3, #0
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	2300      	movs	r3, #0
 800558e:	2100      	movs	r1, #0
 8005590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005592:	f7ff fe05 	bl	80051a0 <xTimerGenericCommand>
 8005596:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d14f      	bne.n	800563e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	61bb      	str	r3, [r7, #24]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ba:	f023 0301 	bic.w	r3, r3, #1
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055c6:	e03a      	b.n	800563e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ce:	f043 0301 	orr.w	r3, r3, #1
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	617b      	str	r3, [r7, #20]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	18d1      	adds	r1, r2, r3
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800560c:	f7ff ff06 	bl	800541c <prvInsertTimerInActiveList>
					break;
 8005610:	e015      	b.n	800563e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005622:	f000 fbdd 	bl	8005de0 <vPortFree>
 8005626:	e00a      	b.n	800563e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	b2da      	uxtb	r2, r3
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800563a:	e000      	b.n	800563e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800563c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <prvProcessReceivedCommands+0x1c0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	1d39      	adds	r1, r7, #4
 8005644:	2200      	movs	r2, #0
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe f96a 	bl	8003920 <xQueueReceive>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	f47f af2a 	bne.w	80054a8 <prvProcessReceivedCommands+0x8>
	}
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	3730      	adds	r7, #48	; 0x30
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000e28 	.word	0x20000e28

08005664 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800566a:	e048      	b.n	80056fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800566c:	4b2d      	ldr	r3, [pc, #180]	; (8005724 <prvSwitchTimerLists+0xc0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005676:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <prvSwitchTimerLists+0xc0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3304      	adds	r3, #4
 8005684:	4618      	mov	r0, r3
 8005686:	f7fd fe48 	bl	800331a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d02e      	beq.n	80056fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4413      	add	r3, r2
 80056a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d90e      	bls.n	80056d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056be:	4b19      	ldr	r3, [pc, #100]	; (8005724 <prvSwitchTimerLists+0xc0>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4619      	mov	r1, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	f7fd fded 	bl	80032a8 <vListInsert>
 80056ce:	e016      	b.n	80056fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056d0:	2300      	movs	r3, #0
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	2100      	movs	r1, #0
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff fd60 	bl	80051a0 <xTimerGenericCommand>
 80056e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	603b      	str	r3, [r7, #0]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <prvSwitchTimerLists+0xc0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1b1      	bne.n	800566c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <prvSwitchTimerLists+0xc0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <prvSwitchTimerLists+0xc4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a04      	ldr	r2, [pc, #16]	; (8005724 <prvSwitchTimerLists+0xc0>)
 8005714:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005716:	4a04      	ldr	r2, [pc, #16]	; (8005728 <prvSwitchTimerLists+0xc4>)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	6013      	str	r3, [r2, #0]
}
 800571c:	bf00      	nop
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20000e20 	.word	0x20000e20
 8005728:	20000e24 	.word	0x20000e24

0800572c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005732:	f000 f967 	bl	8005a04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <prvCheckForValidListAndQueue+0x60>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d120      	bne.n	8005780 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800573e:	4814      	ldr	r0, [pc, #80]	; (8005790 <prvCheckForValidListAndQueue+0x64>)
 8005740:	f7fd fd61 	bl	8003206 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005744:	4813      	ldr	r0, [pc, #76]	; (8005794 <prvCheckForValidListAndQueue+0x68>)
 8005746:	f7fd fd5e 	bl	8003206 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800574a:	4b13      	ldr	r3, [pc, #76]	; (8005798 <prvCheckForValidListAndQueue+0x6c>)
 800574c:	4a10      	ldr	r2, [pc, #64]	; (8005790 <prvCheckForValidListAndQueue+0x64>)
 800574e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005750:	4b12      	ldr	r3, [pc, #72]	; (800579c <prvCheckForValidListAndQueue+0x70>)
 8005752:	4a10      	ldr	r2, [pc, #64]	; (8005794 <prvCheckForValidListAndQueue+0x68>)
 8005754:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005756:	2300      	movs	r3, #0
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <prvCheckForValidListAndQueue+0x74>)
 800575c:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <prvCheckForValidListAndQueue+0x78>)
 800575e:	2110      	movs	r1, #16
 8005760:	200a      	movs	r0, #10
 8005762:	f7fd fe6d 	bl	8003440 <xQueueGenericCreateStatic>
 8005766:	4603      	mov	r3, r0
 8005768:	4a08      	ldr	r2, [pc, #32]	; (800578c <prvCheckForValidListAndQueue+0x60>)
 800576a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <prvCheckForValidListAndQueue+0x60>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <prvCheckForValidListAndQueue+0x60>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	490b      	ldr	r1, [pc, #44]	; (80057a8 <prvCheckForValidListAndQueue+0x7c>)
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe fb40 	bl	8003e00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005780:	f000 f970 	bl	8005a64 <vPortExitCritical>
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000e28 	.word	0x20000e28
 8005790:	20000df8 	.word	0x20000df8
 8005794:	20000e0c 	.word	0x20000e0c
 8005798:	20000e20 	.word	0x20000e20
 800579c:	20000e24 	.word	0x20000e24
 80057a0:	20000ed4 	.word	0x20000ed4
 80057a4:	20000e34 	.word	0x20000e34
 80057a8:	08006afc 	.word	0x08006afc

080057ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3b04      	subs	r3, #4
 80057bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b04      	subs	r3, #4
 80057ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f023 0201 	bic.w	r2, r3, #1
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	3b04      	subs	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057dc:	4a0c      	ldr	r2, [pc, #48]	; (8005810 <pxPortInitialiseStack+0x64>)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b14      	subs	r3, #20
 80057e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3b04      	subs	r3, #4
 80057f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f06f 0202 	mvn.w	r2, #2
 80057fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3b20      	subs	r3, #32
 8005800:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005802:	68fb      	ldr	r3, [r7, #12]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	08005815 	.word	0x08005815

08005814 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800581e:	4b12      	ldr	r3, [pc, #72]	; (8005868 <prvTaskExitError+0x54>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d00a      	beq.n	800583e <prvTaskExitError+0x2a>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	60fb      	str	r3, [r7, #12]
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <prvTaskExitError+0x28>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60bb      	str	r3, [r7, #8]
}
 8005850:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005852:	bf00      	nop
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0fc      	beq.n	8005854 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	2000000c 	.word	0x2000000c
 800586c:	00000000 	.word	0x00000000

08005870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <pxCurrentTCBConst2>)
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	6808      	ldr	r0, [r1, #0]
 8005876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f380 8809 	msr	PSP, r0
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8811 	msr	BASEPRI, r0
 800588a:	4770      	bx	lr
 800588c:	f3af 8000 	nop.w

08005890 <pxCurrentTCBConst2>:
 8005890:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop

08005898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005898:	4808      	ldr	r0, [pc, #32]	; (80058bc <prvPortStartFirstTask+0x24>)
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	6800      	ldr	r0, [r0, #0]
 800589e:	f380 8808 	msr	MSP, r0
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8814 	msr	CONTROL, r0
 80058aa:	b662      	cpsie	i
 80058ac:	b661      	cpsie	f
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	df00      	svc	0
 80058b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ba:	bf00      	nop
 80058bc:	e000ed08 	.word	0xe000ed08

080058c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058c6:	4b46      	ldr	r3, [pc, #280]	; (80059e0 <xPortStartScheduler+0x120>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a46      	ldr	r2, [pc, #280]	; (80059e4 <xPortStartScheduler+0x124>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10a      	bne.n	80058e6 <xPortStartScheduler+0x26>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	613b      	str	r3, [r7, #16]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058e6:	4b3e      	ldr	r3, [pc, #248]	; (80059e0 <xPortStartScheduler+0x120>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3f      	ldr	r2, [pc, #252]	; (80059e8 <xPortStartScheduler+0x128>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d10a      	bne.n	8005906 <xPortStartScheduler+0x46>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	60fb      	str	r3, [r7, #12]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005906:	4b39      	ldr	r3, [pc, #228]	; (80059ec <xPortStartScheduler+0x12c>)
 8005908:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	22ff      	movs	r2, #255	; 0xff
 8005916:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005928:	b2da      	uxtb	r2, r3
 800592a:	4b31      	ldr	r3, [pc, #196]	; (80059f0 <xPortStartScheduler+0x130>)
 800592c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800592e:	4b31      	ldr	r3, [pc, #196]	; (80059f4 <xPortStartScheduler+0x134>)
 8005930:	2207      	movs	r2, #7
 8005932:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005934:	e009      	b.n	800594a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005936:	4b2f      	ldr	r3, [pc, #188]	; (80059f4 <xPortStartScheduler+0x134>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3b01      	subs	r3, #1
 800593c:	4a2d      	ldr	r2, [pc, #180]	; (80059f4 <xPortStartScheduler+0x134>)
 800593e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	b2db      	uxtb	r3, r3
 8005948:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005952:	2b80      	cmp	r3, #128	; 0x80
 8005954:	d0ef      	beq.n	8005936 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005956:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <xPortStartScheduler+0x134>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f1c3 0307 	rsb	r3, r3, #7
 800595e:	2b04      	cmp	r3, #4
 8005960:	d00a      	beq.n	8005978 <xPortStartScheduler+0xb8>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	60bb      	str	r3, [r7, #8]
}
 8005974:	bf00      	nop
 8005976:	e7fe      	b.n	8005976 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005978:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <xPortStartScheduler+0x134>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	021b      	lsls	r3, r3, #8
 800597e:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <xPortStartScheduler+0x134>)
 8005980:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005982:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <xPortStartScheduler+0x134>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800598a:	4a1a      	ldr	r2, [pc, #104]	; (80059f4 <xPortStartScheduler+0x134>)
 800598c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	b2da      	uxtb	r2, r3
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005996:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <xPortStartScheduler+0x138>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a17      	ldr	r2, [pc, #92]	; (80059f8 <xPortStartScheduler+0x138>)
 800599c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059a2:	4b15      	ldr	r3, [pc, #84]	; (80059f8 <xPortStartScheduler+0x138>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a14      	ldr	r2, [pc, #80]	; (80059f8 <xPortStartScheduler+0x138>)
 80059a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059ae:	f000 f8dd 	bl	8005b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <xPortStartScheduler+0x13c>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059b8:	f000 f8fc 	bl	8005bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059bc:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <xPortStartScheduler+0x140>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a0f      	ldr	r2, [pc, #60]	; (8005a00 <xPortStartScheduler+0x140>)
 80059c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059c8:	f7ff ff66 	bl	8005898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059cc:	f7fe fe48 	bl	8004660 <vTaskSwitchContext>
	prvTaskExitError();
 80059d0:	f7ff ff20 	bl	8005814 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	e000ed00 	.word	0xe000ed00
 80059e4:	410fc271 	.word	0x410fc271
 80059e8:	410fc270 	.word	0x410fc270
 80059ec:	e000e400 	.word	0xe000e400
 80059f0:	20000f24 	.word	0x20000f24
 80059f4:	20000f28 	.word	0x20000f28
 80059f8:	e000ed20 	.word	0xe000ed20
 80059fc:	2000000c 	.word	0x2000000c
 8005a00:	e000ef34 	.word	0xe000ef34

08005a04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	607b      	str	r3, [r7, #4]
}
 8005a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <vPortEnterCritical+0x58>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <vPortEnterCritical+0x58>)
 8005a26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <vPortEnterCritical+0x58>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10f      	bne.n	8005a50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <vPortEnterCritical+0x5c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	603b      	str	r3, [r7, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	e7fe      	b.n	8005a4e <vPortEnterCritical+0x4a>
	}
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	2000000c 	.word	0x2000000c
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a6a:	4b12      	ldr	r3, [pc, #72]	; (8005ab4 <vPortExitCritical+0x50>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <vPortExitCritical+0x24>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	607b      	str	r3, [r7, #4]
}
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <vPortExitCritical+0x50>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <vPortExitCritical+0x50>)
 8005a90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a92:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <vPortExitCritical+0x50>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d105      	bne.n	8005aa6 <vPortExitCritical+0x42>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	f383 8811 	msr	BASEPRI, r3
}
 8005aa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	2000000c 	.word	0x2000000c
	...

08005ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ac0:	f3ef 8009 	mrs	r0, PSP
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <pxCurrentTCBConst>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	f01e 0f10 	tst.w	lr, #16
 8005ad0:	bf08      	it	eq
 8005ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	6010      	str	r0, [r2, #0]
 8005adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ae4:	f380 8811 	msr	BASEPRI, r0
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f7fe fdb6 	bl	8004660 <vTaskSwitchContext>
 8005af4:	f04f 0000 	mov.w	r0, #0
 8005af8:	f380 8811 	msr	BASEPRI, r0
 8005afc:	bc09      	pop	{r0, r3}
 8005afe:	6819      	ldr	r1, [r3, #0]
 8005b00:	6808      	ldr	r0, [r1, #0]
 8005b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b06:	f01e 0f10 	tst.w	lr, #16
 8005b0a:	bf08      	it	eq
 8005b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b10:	f380 8809 	msr	PSP, r0
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	f3af 8000 	nop.w

08005b20 <pxCurrentTCBConst>:
 8005b20:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
}
 8005b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b42:	f7fe fcd3 	bl	80044ec <xTaskIncrementTick>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <xPortSysTickHandler+0x40>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	2300      	movs	r3, #0
 8005b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f383 8811 	msr	BASEPRI, r3
}
 8005b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b76:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <vPortSetupTimerInterrupt+0x38>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <vPortSetupTimerInterrupt+0x3c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <vPortSetupTimerInterrupt+0x40>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	4a09      	ldr	r2, [pc, #36]	; (8005bb0 <vPortSetupTimerInterrupt+0x44>)
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b8e:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000e010 	.word	0xe000e010
 8005ba4:	e000e018 	.word	0xe000e018
 8005ba8:	20000000 	.word	0x20000000
 8005bac:	10624dd3 	.word	0x10624dd3
 8005bb0:	e000e014 	.word	0xe000e014

08005bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bc4 <vPortEnableVFP+0x10>
 8005bb8:	6801      	ldr	r1, [r0, #0]
 8005bba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bbe:	6001      	str	r1, [r0, #0]
 8005bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bc2:	bf00      	nop
 8005bc4:	e000ed88 	.word	0xe000ed88

08005bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bce:	f3ef 8305 	mrs	r3, IPSR
 8005bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d914      	bls.n	8005c04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bda:	4a17      	ldr	r2, [pc, #92]	; (8005c38 <vPortValidateInterruptPriority+0x70>)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005be4:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <vPortValidateInterruptPriority+0x74>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	7afa      	ldrb	r2, [r7, #11]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d20a      	bcs.n	8005c04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	607b      	str	r3, [r7, #4]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c04:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <vPortValidateInterruptPriority+0x78>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c0c:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <vPortValidateInterruptPriority+0x7c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d90a      	bls.n	8005c2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	603b      	str	r3, [r7, #0]
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <vPortValidateInterruptPriority+0x60>
	}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	e000e3f0 	.word	0xe000e3f0
 8005c3c:	20000f24 	.word	0x20000f24
 8005c40:	e000ed0c 	.word	0xe000ed0c
 8005c44:	20000f28 	.word	0x20000f28

08005c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c54:	f7fe fb8e 	bl	8004374 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c58:	4b5b      	ldr	r3, [pc, #364]	; (8005dc8 <pvPortMalloc+0x180>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c60:	f000 f920 	bl	8005ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c64:	4b59      	ldr	r3, [pc, #356]	; (8005dcc <pvPortMalloc+0x184>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 8093 	bne.w	8005d98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01d      	beq.n	8005cb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c78:	2208      	movs	r2, #8
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d014      	beq.n	8005cb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f023 0307 	bic.w	r3, r3, #7
 8005c90:	3308      	adds	r3, #8
 8005c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <pvPortMalloc+0x6c>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	617b      	str	r3, [r7, #20]
}
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d06e      	beq.n	8005d98 <pvPortMalloc+0x150>
 8005cba:	4b45      	ldr	r3, [pc, #276]	; (8005dd0 <pvPortMalloc+0x188>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d869      	bhi.n	8005d98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cc4:	4b43      	ldr	r3, [pc, #268]	; (8005dd4 <pvPortMalloc+0x18c>)
 8005cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cc8:	4b42      	ldr	r3, [pc, #264]	; (8005dd4 <pvPortMalloc+0x18c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cce:	e004      	b.n	8005cda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d903      	bls.n	8005cec <pvPortMalloc+0xa4>
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f1      	bne.n	8005cd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cec:	4b36      	ldr	r3, [pc, #216]	; (8005dc8 <pvPortMalloc+0x180>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d050      	beq.n	8005d98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	4413      	add	r3, r2
 8005cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	2308      	movs	r3, #8
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d91f      	bls.n	8005d58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <pvPortMalloc+0xf8>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	613b      	str	r3, [r7, #16]
}
 8005d3c:	bf00      	nop
 8005d3e:	e7fe      	b.n	8005d3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	1ad2      	subs	r2, r2, r3
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d52:	69b8      	ldr	r0, [r7, #24]
 8005d54:	f000 f908 	bl	8005f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d58:	4b1d      	ldr	r3, [pc, #116]	; (8005dd0 <pvPortMalloc+0x188>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <pvPortMalloc+0x188>)
 8005d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d66:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <pvPortMalloc+0x188>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <pvPortMalloc+0x190>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d203      	bcs.n	8005d7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d72:	4b17      	ldr	r3, [pc, #92]	; (8005dd0 <pvPortMalloc+0x188>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <pvPortMalloc+0x190>)
 8005d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <pvPortMalloc+0x184>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d8e:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <pvPortMalloc+0x194>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3301      	adds	r3, #1
 8005d94:	4a11      	ldr	r2, [pc, #68]	; (8005ddc <pvPortMalloc+0x194>)
 8005d96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d98:	f7fe fafa 	bl	8004390 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <pvPortMalloc+0x174>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	60fb      	str	r3, [r7, #12]
}
 8005db8:	bf00      	nop
 8005dba:	e7fe      	b.n	8005dba <pvPortMalloc+0x172>
	return pvReturn;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3728      	adds	r7, #40	; 0x28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20004b34 	.word	0x20004b34
 8005dcc:	20004b48 	.word	0x20004b48
 8005dd0:	20004b38 	.word	0x20004b38
 8005dd4:	20004b2c 	.word	0x20004b2c
 8005dd8:	20004b3c 	.word	0x20004b3c
 8005ddc:	20004b40 	.word	0x20004b40

08005de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d04d      	beq.n	8005e8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005df2:	2308      	movs	r3, #8
 8005df4:	425b      	negs	r3, r3
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4413      	add	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <vPortFree+0xb8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <vPortFree+0x44>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	60fb      	str	r3, [r7, #12]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <vPortFree+0x62>
	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	60bb      	str	r3, [r7, #8]
}
 8005e3e:	bf00      	nop
 8005e40:	e7fe      	b.n	8005e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <vPortFree+0xb8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01e      	beq.n	8005e8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d11a      	bne.n	8005e8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <vPortFree+0xb8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	43db      	mvns	r3, r3
 8005e62:	401a      	ands	r2, r3
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e68:	f7fe fa84 	bl	8004374 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <vPortFree+0xbc>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4413      	add	r3, r2
 8005e76:	4a09      	ldr	r2, [pc, #36]	; (8005e9c <vPortFree+0xbc>)
 8005e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e7a:	6938      	ldr	r0, [r7, #16]
 8005e7c:	f000 f874 	bl	8005f68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <vPortFree+0xc0>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3301      	adds	r3, #1
 8005e86:	4a06      	ldr	r2, [pc, #24]	; (8005ea0 <vPortFree+0xc0>)
 8005e88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e8a:	f7fe fa81 	bl	8004390 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e8e:	bf00      	nop
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20004b48 	.word	0x20004b48
 8005e9c:	20004b38 	.word	0x20004b38
 8005ea0:	20004b44 	.word	0x20004b44

08005ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005eb0:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <prvHeapInit+0xac>)
 8005eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00c      	beq.n	8005ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3307      	adds	r3, #7
 8005ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0307 	bic.w	r3, r3, #7
 8005eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <prvHeapInit+0xac>)
 8005ed4:	4413      	add	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005edc:	4a1d      	ldr	r2, [pc, #116]	; (8005f54 <prvHeapInit+0xb0>)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ee2:	4b1c      	ldr	r3, [pc, #112]	; (8005f54 <prvHeapInit+0xb0>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	4413      	add	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1a9b      	subs	r3, r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0307 	bic.w	r3, r3, #7
 8005efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a15      	ldr	r2, [pc, #84]	; (8005f58 <prvHeapInit+0xb4>)
 8005f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f06:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <prvHeapInit+0xb4>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <prvHeapInit+0xb4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f24:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <prvHeapInit+0xb4>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <prvHeapInit+0xb8>)
 8005f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <prvHeapInit+0xbc>)
 8005f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <prvHeapInit+0xc0>)
 8005f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f42:	601a      	str	r2, [r3, #0]
}
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20000f2c 	.word	0x20000f2c
 8005f54:	20004b2c 	.word	0x20004b2c
 8005f58:	20004b34 	.word	0x20004b34
 8005f5c:	20004b3c 	.word	0x20004b3c
 8005f60:	20004b38 	.word	0x20004b38
 8005f64:	20004b48 	.word	0x20004b48

08005f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f70:	4b28      	ldr	r3, [pc, #160]	; (8006014 <prvInsertBlockIntoFreeList+0xac>)
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	e002      	b.n	8005f7c <prvInsertBlockIntoFreeList+0x14>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d8f7      	bhi.n	8005f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	4413      	add	r3, r2
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d108      	bne.n	8005faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	441a      	add	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	441a      	add	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d118      	bne.n	8005ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b15      	ldr	r3, [pc, #84]	; (8006018 <prvInsertBlockIntoFreeList+0xb0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d00d      	beq.n	8005fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	e008      	b.n	8005ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e003      	b.n	8005ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d002      	beq.n	8006006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20004b2c 	.word	0x20004b2c
 8006018:	20004b34 	.word	0x20004b34

0800601c <__errno>:
 800601c:	4b01      	ldr	r3, [pc, #4]	; (8006024 <__errno+0x8>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20000010 	.word	0x20000010

08006028 <__libc_init_array>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	4d0d      	ldr	r5, [pc, #52]	; (8006060 <__libc_init_array+0x38>)
 800602c:	4c0d      	ldr	r4, [pc, #52]	; (8006064 <__libc_init_array+0x3c>)
 800602e:	1b64      	subs	r4, r4, r5
 8006030:	10a4      	asrs	r4, r4, #2
 8006032:	2600      	movs	r6, #0
 8006034:	42a6      	cmp	r6, r4
 8006036:	d109      	bne.n	800604c <__libc_init_array+0x24>
 8006038:	4d0b      	ldr	r5, [pc, #44]	; (8006068 <__libc_init_array+0x40>)
 800603a:	4c0c      	ldr	r4, [pc, #48]	; (800606c <__libc_init_array+0x44>)
 800603c:	f000 fd18 	bl	8006a70 <_init>
 8006040:	1b64      	subs	r4, r4, r5
 8006042:	10a4      	asrs	r4, r4, #2
 8006044:	2600      	movs	r6, #0
 8006046:	42a6      	cmp	r6, r4
 8006048:	d105      	bne.n	8006056 <__libc_init_array+0x2e>
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006050:	4798      	blx	r3
 8006052:	3601      	adds	r6, #1
 8006054:	e7ee      	b.n	8006034 <__libc_init_array+0xc>
 8006056:	f855 3b04 	ldr.w	r3, [r5], #4
 800605a:	4798      	blx	r3
 800605c:	3601      	adds	r6, #1
 800605e:	e7f2      	b.n	8006046 <__libc_init_array+0x1e>
 8006060:	08006c4c 	.word	0x08006c4c
 8006064:	08006c4c 	.word	0x08006c4c
 8006068:	08006c4c 	.word	0x08006c4c
 800606c:	08006c50 	.word	0x08006c50

08006070 <__retarget_lock_acquire_recursive>:
 8006070:	4770      	bx	lr

08006072 <__retarget_lock_release_recursive>:
 8006072:	4770      	bx	lr

08006074 <memcpy>:
 8006074:	440a      	add	r2, r1
 8006076:	4291      	cmp	r1, r2
 8006078:	f100 33ff 	add.w	r3, r0, #4294967295
 800607c:	d100      	bne.n	8006080 <memcpy+0xc>
 800607e:	4770      	bx	lr
 8006080:	b510      	push	{r4, lr}
 8006082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800608a:	4291      	cmp	r1, r2
 800608c:	d1f9      	bne.n	8006082 <memcpy+0xe>
 800608e:	bd10      	pop	{r4, pc}

08006090 <memset>:
 8006090:	4402      	add	r2, r0
 8006092:	4603      	mov	r3, r0
 8006094:	4293      	cmp	r3, r2
 8006096:	d100      	bne.n	800609a <memset+0xa>
 8006098:	4770      	bx	lr
 800609a:	f803 1b01 	strb.w	r1, [r3], #1
 800609e:	e7f9      	b.n	8006094 <memset+0x4>

080060a0 <sbrk_aligned>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	4e0e      	ldr	r6, [pc, #56]	; (80060dc <sbrk_aligned+0x3c>)
 80060a4:	460c      	mov	r4, r1
 80060a6:	6831      	ldr	r1, [r6, #0]
 80060a8:	4605      	mov	r5, r0
 80060aa:	b911      	cbnz	r1, 80060b2 <sbrk_aligned+0x12>
 80060ac:	f000 f8f6 	bl	800629c <_sbrk_r>
 80060b0:	6030      	str	r0, [r6, #0]
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 f8f1 	bl	800629c <_sbrk_r>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	d00a      	beq.n	80060d4 <sbrk_aligned+0x34>
 80060be:	1cc4      	adds	r4, r0, #3
 80060c0:	f024 0403 	bic.w	r4, r4, #3
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	d007      	beq.n	80060d8 <sbrk_aligned+0x38>
 80060c8:	1a21      	subs	r1, r4, r0
 80060ca:	4628      	mov	r0, r5
 80060cc:	f000 f8e6 	bl	800629c <_sbrk_r>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d101      	bne.n	80060d8 <sbrk_aligned+0x38>
 80060d4:	f04f 34ff 	mov.w	r4, #4294967295
 80060d8:	4620      	mov	r0, r4
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	20004b54 	.word	0x20004b54

080060e0 <_malloc_r>:
 80060e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e4:	1ccd      	adds	r5, r1, #3
 80060e6:	f025 0503 	bic.w	r5, r5, #3
 80060ea:	3508      	adds	r5, #8
 80060ec:	2d0c      	cmp	r5, #12
 80060ee:	bf38      	it	cc
 80060f0:	250c      	movcc	r5, #12
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	4607      	mov	r7, r0
 80060f6:	db01      	blt.n	80060fc <_malloc_r+0x1c>
 80060f8:	42a9      	cmp	r1, r5
 80060fa:	d905      	bls.n	8006108 <_malloc_r+0x28>
 80060fc:	230c      	movs	r3, #12
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	2600      	movs	r6, #0
 8006102:	4630      	mov	r0, r6
 8006104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006108:	4e2e      	ldr	r6, [pc, #184]	; (80061c4 <_malloc_r+0xe4>)
 800610a:	f000 f917 	bl	800633c <__malloc_lock>
 800610e:	6833      	ldr	r3, [r6, #0]
 8006110:	461c      	mov	r4, r3
 8006112:	bb34      	cbnz	r4, 8006162 <_malloc_r+0x82>
 8006114:	4629      	mov	r1, r5
 8006116:	4638      	mov	r0, r7
 8006118:	f7ff ffc2 	bl	80060a0 <sbrk_aligned>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	4604      	mov	r4, r0
 8006120:	d14d      	bne.n	80061be <_malloc_r+0xde>
 8006122:	6834      	ldr	r4, [r6, #0]
 8006124:	4626      	mov	r6, r4
 8006126:	2e00      	cmp	r6, #0
 8006128:	d140      	bne.n	80061ac <_malloc_r+0xcc>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	4631      	mov	r1, r6
 800612e:	4638      	mov	r0, r7
 8006130:	eb04 0803 	add.w	r8, r4, r3
 8006134:	f000 f8b2 	bl	800629c <_sbrk_r>
 8006138:	4580      	cmp	r8, r0
 800613a:	d13a      	bne.n	80061b2 <_malloc_r+0xd2>
 800613c:	6821      	ldr	r1, [r4, #0]
 800613e:	3503      	adds	r5, #3
 8006140:	1a6d      	subs	r5, r5, r1
 8006142:	f025 0503 	bic.w	r5, r5, #3
 8006146:	3508      	adds	r5, #8
 8006148:	2d0c      	cmp	r5, #12
 800614a:	bf38      	it	cc
 800614c:	250c      	movcc	r5, #12
 800614e:	4629      	mov	r1, r5
 8006150:	4638      	mov	r0, r7
 8006152:	f7ff ffa5 	bl	80060a0 <sbrk_aligned>
 8006156:	3001      	adds	r0, #1
 8006158:	d02b      	beq.n	80061b2 <_malloc_r+0xd2>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	442b      	add	r3, r5
 800615e:	6023      	str	r3, [r4, #0]
 8006160:	e00e      	b.n	8006180 <_malloc_r+0xa0>
 8006162:	6822      	ldr	r2, [r4, #0]
 8006164:	1b52      	subs	r2, r2, r5
 8006166:	d41e      	bmi.n	80061a6 <_malloc_r+0xc6>
 8006168:	2a0b      	cmp	r2, #11
 800616a:	d916      	bls.n	800619a <_malloc_r+0xba>
 800616c:	1961      	adds	r1, r4, r5
 800616e:	42a3      	cmp	r3, r4
 8006170:	6025      	str	r5, [r4, #0]
 8006172:	bf18      	it	ne
 8006174:	6059      	strne	r1, [r3, #4]
 8006176:	6863      	ldr	r3, [r4, #4]
 8006178:	bf08      	it	eq
 800617a:	6031      	streq	r1, [r6, #0]
 800617c:	5162      	str	r2, [r4, r5]
 800617e:	604b      	str	r3, [r1, #4]
 8006180:	4638      	mov	r0, r7
 8006182:	f104 060b 	add.w	r6, r4, #11
 8006186:	f000 f8df 	bl	8006348 <__malloc_unlock>
 800618a:	f026 0607 	bic.w	r6, r6, #7
 800618e:	1d23      	adds	r3, r4, #4
 8006190:	1af2      	subs	r2, r6, r3
 8006192:	d0b6      	beq.n	8006102 <_malloc_r+0x22>
 8006194:	1b9b      	subs	r3, r3, r6
 8006196:	50a3      	str	r3, [r4, r2]
 8006198:	e7b3      	b.n	8006102 <_malloc_r+0x22>
 800619a:	6862      	ldr	r2, [r4, #4]
 800619c:	42a3      	cmp	r3, r4
 800619e:	bf0c      	ite	eq
 80061a0:	6032      	streq	r2, [r6, #0]
 80061a2:	605a      	strne	r2, [r3, #4]
 80061a4:	e7ec      	b.n	8006180 <_malloc_r+0xa0>
 80061a6:	4623      	mov	r3, r4
 80061a8:	6864      	ldr	r4, [r4, #4]
 80061aa:	e7b2      	b.n	8006112 <_malloc_r+0x32>
 80061ac:	4634      	mov	r4, r6
 80061ae:	6876      	ldr	r6, [r6, #4]
 80061b0:	e7b9      	b.n	8006126 <_malloc_r+0x46>
 80061b2:	230c      	movs	r3, #12
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	4638      	mov	r0, r7
 80061b8:	f000 f8c6 	bl	8006348 <__malloc_unlock>
 80061bc:	e7a1      	b.n	8006102 <_malloc_r+0x22>
 80061be:	6025      	str	r5, [r4, #0]
 80061c0:	e7de      	b.n	8006180 <_malloc_r+0xa0>
 80061c2:	bf00      	nop
 80061c4:	20004b50 	.word	0x20004b50

080061c8 <cleanup_glue>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	460c      	mov	r4, r1
 80061cc:	6809      	ldr	r1, [r1, #0]
 80061ce:	4605      	mov	r5, r0
 80061d0:	b109      	cbz	r1, 80061d6 <cleanup_glue+0xe>
 80061d2:	f7ff fff9 	bl	80061c8 <cleanup_glue>
 80061d6:	4621      	mov	r1, r4
 80061d8:	4628      	mov	r0, r5
 80061da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061de:	f000 b8b9 	b.w	8006354 <_free_r>
	...

080061e4 <_reclaim_reent>:
 80061e4:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <_reclaim_reent+0xb4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4283      	cmp	r3, r0
 80061ea:	b570      	push	{r4, r5, r6, lr}
 80061ec:	4604      	mov	r4, r0
 80061ee:	d051      	beq.n	8006294 <_reclaim_reent+0xb0>
 80061f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80061f2:	b143      	cbz	r3, 8006206 <_reclaim_reent+0x22>
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d14a      	bne.n	8006290 <_reclaim_reent+0xac>
 80061fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061fc:	6819      	ldr	r1, [r3, #0]
 80061fe:	b111      	cbz	r1, 8006206 <_reclaim_reent+0x22>
 8006200:	4620      	mov	r0, r4
 8006202:	f000 f8a7 	bl	8006354 <_free_r>
 8006206:	6961      	ldr	r1, [r4, #20]
 8006208:	b111      	cbz	r1, 8006210 <_reclaim_reent+0x2c>
 800620a:	4620      	mov	r0, r4
 800620c:	f000 f8a2 	bl	8006354 <_free_r>
 8006210:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006212:	b111      	cbz	r1, 800621a <_reclaim_reent+0x36>
 8006214:	4620      	mov	r0, r4
 8006216:	f000 f89d 	bl	8006354 <_free_r>
 800621a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800621c:	b111      	cbz	r1, 8006224 <_reclaim_reent+0x40>
 800621e:	4620      	mov	r0, r4
 8006220:	f000 f898 	bl	8006354 <_free_r>
 8006224:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006226:	b111      	cbz	r1, 800622e <_reclaim_reent+0x4a>
 8006228:	4620      	mov	r0, r4
 800622a:	f000 f893 	bl	8006354 <_free_r>
 800622e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006230:	b111      	cbz	r1, 8006238 <_reclaim_reent+0x54>
 8006232:	4620      	mov	r0, r4
 8006234:	f000 f88e 	bl	8006354 <_free_r>
 8006238:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800623a:	b111      	cbz	r1, 8006242 <_reclaim_reent+0x5e>
 800623c:	4620      	mov	r0, r4
 800623e:	f000 f889 	bl	8006354 <_free_r>
 8006242:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006244:	b111      	cbz	r1, 800624c <_reclaim_reent+0x68>
 8006246:	4620      	mov	r0, r4
 8006248:	f000 f884 	bl	8006354 <_free_r>
 800624c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800624e:	b111      	cbz	r1, 8006256 <_reclaim_reent+0x72>
 8006250:	4620      	mov	r0, r4
 8006252:	f000 f87f 	bl	8006354 <_free_r>
 8006256:	69a3      	ldr	r3, [r4, #24]
 8006258:	b1e3      	cbz	r3, 8006294 <_reclaim_reent+0xb0>
 800625a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800625c:	4620      	mov	r0, r4
 800625e:	4798      	blx	r3
 8006260:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006262:	b1b9      	cbz	r1, 8006294 <_reclaim_reent+0xb0>
 8006264:	4620      	mov	r0, r4
 8006266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800626a:	f7ff bfad 	b.w	80061c8 <cleanup_glue>
 800626e:	5949      	ldr	r1, [r1, r5]
 8006270:	b941      	cbnz	r1, 8006284 <_reclaim_reent+0xa0>
 8006272:	3504      	adds	r5, #4
 8006274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006276:	2d80      	cmp	r5, #128	; 0x80
 8006278:	68d9      	ldr	r1, [r3, #12]
 800627a:	d1f8      	bne.n	800626e <_reclaim_reent+0x8a>
 800627c:	4620      	mov	r0, r4
 800627e:	f000 f869 	bl	8006354 <_free_r>
 8006282:	e7ba      	b.n	80061fa <_reclaim_reent+0x16>
 8006284:	680e      	ldr	r6, [r1, #0]
 8006286:	4620      	mov	r0, r4
 8006288:	f000 f864 	bl	8006354 <_free_r>
 800628c:	4631      	mov	r1, r6
 800628e:	e7ef      	b.n	8006270 <_reclaim_reent+0x8c>
 8006290:	2500      	movs	r5, #0
 8006292:	e7ef      	b.n	8006274 <_reclaim_reent+0x90>
 8006294:	bd70      	pop	{r4, r5, r6, pc}
 8006296:	bf00      	nop
 8006298:	20000010 	.word	0x20000010

0800629c <_sbrk_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d06      	ldr	r5, [pc, #24]	; (80062b8 <_sbrk_r+0x1c>)
 80062a0:	2300      	movs	r3, #0
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	f7fa fd56 	bl	8000d58 <_sbrk>
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d102      	bne.n	80062b6 <_sbrk_r+0x1a>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b103      	cbz	r3, 80062b6 <_sbrk_r+0x1a>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	20004b58 	.word	0x20004b58

080062bc <sniprintf>:
 80062bc:	b40c      	push	{r2, r3}
 80062be:	b530      	push	{r4, r5, lr}
 80062c0:	4b17      	ldr	r3, [pc, #92]	; (8006320 <sniprintf+0x64>)
 80062c2:	1e0c      	subs	r4, r1, #0
 80062c4:	681d      	ldr	r5, [r3, #0]
 80062c6:	b09d      	sub	sp, #116	; 0x74
 80062c8:	da08      	bge.n	80062dc <sniprintf+0x20>
 80062ca:	238b      	movs	r3, #139	; 0x8b
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	f04f 30ff 	mov.w	r0, #4294967295
 80062d2:	b01d      	add	sp, #116	; 0x74
 80062d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062d8:	b002      	add	sp, #8
 80062da:	4770      	bx	lr
 80062dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80062e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062e4:	bf14      	ite	ne
 80062e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80062ea:	4623      	moveq	r3, r4
 80062ec:	9304      	str	r3, [sp, #16]
 80062ee:	9307      	str	r3, [sp, #28]
 80062f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062f4:	9002      	str	r0, [sp, #8]
 80062f6:	9006      	str	r0, [sp, #24]
 80062f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80062fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062fe:	ab21      	add	r3, sp, #132	; 0x84
 8006300:	a902      	add	r1, sp, #8
 8006302:	4628      	mov	r0, r5
 8006304:	9301      	str	r3, [sp, #4]
 8006306:	f000 f8cd 	bl	80064a4 <_svfiprintf_r>
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	bfbc      	itt	lt
 800630e:	238b      	movlt	r3, #139	; 0x8b
 8006310:	602b      	strlt	r3, [r5, #0]
 8006312:	2c00      	cmp	r4, #0
 8006314:	d0dd      	beq.n	80062d2 <sniprintf+0x16>
 8006316:	9b02      	ldr	r3, [sp, #8]
 8006318:	2200      	movs	r2, #0
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	e7d9      	b.n	80062d2 <sniprintf+0x16>
 800631e:	bf00      	nop
 8006320:	20000010 	.word	0x20000010

08006324 <strnlen>:
 8006324:	b510      	push	{r4, lr}
 8006326:	4602      	mov	r2, r0
 8006328:	4401      	add	r1, r0
 800632a:	428a      	cmp	r2, r1
 800632c:	4613      	mov	r3, r2
 800632e:	d003      	beq.n	8006338 <strnlen+0x14>
 8006330:	781c      	ldrb	r4, [r3, #0]
 8006332:	3201      	adds	r2, #1
 8006334:	2c00      	cmp	r4, #0
 8006336:	d1f8      	bne.n	800632a <strnlen+0x6>
 8006338:	1a18      	subs	r0, r3, r0
 800633a:	bd10      	pop	{r4, pc}

0800633c <__malloc_lock>:
 800633c:	4801      	ldr	r0, [pc, #4]	; (8006344 <__malloc_lock+0x8>)
 800633e:	f7ff be97 	b.w	8006070 <__retarget_lock_acquire_recursive>
 8006342:	bf00      	nop
 8006344:	20004b4c 	.word	0x20004b4c

08006348 <__malloc_unlock>:
 8006348:	4801      	ldr	r0, [pc, #4]	; (8006350 <__malloc_unlock+0x8>)
 800634a:	f7ff be92 	b.w	8006072 <__retarget_lock_release_recursive>
 800634e:	bf00      	nop
 8006350:	20004b4c 	.word	0x20004b4c

08006354 <_free_r>:
 8006354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006356:	2900      	cmp	r1, #0
 8006358:	d044      	beq.n	80063e4 <_free_r+0x90>
 800635a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800635e:	9001      	str	r0, [sp, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f1a1 0404 	sub.w	r4, r1, #4
 8006366:	bfb8      	it	lt
 8006368:	18e4      	addlt	r4, r4, r3
 800636a:	f7ff ffe7 	bl	800633c <__malloc_lock>
 800636e:	4a1e      	ldr	r2, [pc, #120]	; (80063e8 <_free_r+0x94>)
 8006370:	9801      	ldr	r0, [sp, #4]
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	b933      	cbnz	r3, 8006384 <_free_r+0x30>
 8006376:	6063      	str	r3, [r4, #4]
 8006378:	6014      	str	r4, [r2, #0]
 800637a:	b003      	add	sp, #12
 800637c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006380:	f7ff bfe2 	b.w	8006348 <__malloc_unlock>
 8006384:	42a3      	cmp	r3, r4
 8006386:	d908      	bls.n	800639a <_free_r+0x46>
 8006388:	6825      	ldr	r5, [r4, #0]
 800638a:	1961      	adds	r1, r4, r5
 800638c:	428b      	cmp	r3, r1
 800638e:	bf01      	itttt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	1949      	addeq	r1, r1, r5
 8006396:	6021      	streq	r1, [r4, #0]
 8006398:	e7ed      	b.n	8006376 <_free_r+0x22>
 800639a:	461a      	mov	r2, r3
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	b10b      	cbz	r3, 80063a4 <_free_r+0x50>
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	d9fa      	bls.n	800639a <_free_r+0x46>
 80063a4:	6811      	ldr	r1, [r2, #0]
 80063a6:	1855      	adds	r5, r2, r1
 80063a8:	42a5      	cmp	r5, r4
 80063aa:	d10b      	bne.n	80063c4 <_free_r+0x70>
 80063ac:	6824      	ldr	r4, [r4, #0]
 80063ae:	4421      	add	r1, r4
 80063b0:	1854      	adds	r4, r2, r1
 80063b2:	42a3      	cmp	r3, r4
 80063b4:	6011      	str	r1, [r2, #0]
 80063b6:	d1e0      	bne.n	800637a <_free_r+0x26>
 80063b8:	681c      	ldr	r4, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	6053      	str	r3, [r2, #4]
 80063be:	4421      	add	r1, r4
 80063c0:	6011      	str	r1, [r2, #0]
 80063c2:	e7da      	b.n	800637a <_free_r+0x26>
 80063c4:	d902      	bls.n	80063cc <_free_r+0x78>
 80063c6:	230c      	movs	r3, #12
 80063c8:	6003      	str	r3, [r0, #0]
 80063ca:	e7d6      	b.n	800637a <_free_r+0x26>
 80063cc:	6825      	ldr	r5, [r4, #0]
 80063ce:	1961      	adds	r1, r4, r5
 80063d0:	428b      	cmp	r3, r1
 80063d2:	bf04      	itt	eq
 80063d4:	6819      	ldreq	r1, [r3, #0]
 80063d6:	685b      	ldreq	r3, [r3, #4]
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	bf04      	itt	eq
 80063dc:	1949      	addeq	r1, r1, r5
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	6054      	str	r4, [r2, #4]
 80063e2:	e7ca      	b.n	800637a <_free_r+0x26>
 80063e4:	b003      	add	sp, #12
 80063e6:	bd30      	pop	{r4, r5, pc}
 80063e8:	20004b50 	.word	0x20004b50

080063ec <__ssputs_r>:
 80063ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f0:	688e      	ldr	r6, [r1, #8]
 80063f2:	429e      	cmp	r6, r3
 80063f4:	4682      	mov	sl, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	4690      	mov	r8, r2
 80063fa:	461f      	mov	r7, r3
 80063fc:	d838      	bhi.n	8006470 <__ssputs_r+0x84>
 80063fe:	898a      	ldrh	r2, [r1, #12]
 8006400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006404:	d032      	beq.n	800646c <__ssputs_r+0x80>
 8006406:	6825      	ldr	r5, [r4, #0]
 8006408:	6909      	ldr	r1, [r1, #16]
 800640a:	eba5 0901 	sub.w	r9, r5, r1
 800640e:	6965      	ldr	r5, [r4, #20]
 8006410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006418:	3301      	adds	r3, #1
 800641a:	444b      	add	r3, r9
 800641c:	106d      	asrs	r5, r5, #1
 800641e:	429d      	cmp	r5, r3
 8006420:	bf38      	it	cc
 8006422:	461d      	movcc	r5, r3
 8006424:	0553      	lsls	r3, r2, #21
 8006426:	d531      	bpl.n	800648c <__ssputs_r+0xa0>
 8006428:	4629      	mov	r1, r5
 800642a:	f7ff fe59 	bl	80060e0 <_malloc_r>
 800642e:	4606      	mov	r6, r0
 8006430:	b950      	cbnz	r0, 8006448 <__ssputs_r+0x5c>
 8006432:	230c      	movs	r3, #12
 8006434:	f8ca 3000 	str.w	r3, [sl]
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800643e:	81a3      	strh	r3, [r4, #12]
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006448:	6921      	ldr	r1, [r4, #16]
 800644a:	464a      	mov	r2, r9
 800644c:	f7ff fe12 	bl	8006074 <memcpy>
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645a:	81a3      	strh	r3, [r4, #12]
 800645c:	6126      	str	r6, [r4, #16]
 800645e:	6165      	str	r5, [r4, #20]
 8006460:	444e      	add	r6, r9
 8006462:	eba5 0509 	sub.w	r5, r5, r9
 8006466:	6026      	str	r6, [r4, #0]
 8006468:	60a5      	str	r5, [r4, #8]
 800646a:	463e      	mov	r6, r7
 800646c:	42be      	cmp	r6, r7
 800646e:	d900      	bls.n	8006472 <__ssputs_r+0x86>
 8006470:	463e      	mov	r6, r7
 8006472:	6820      	ldr	r0, [r4, #0]
 8006474:	4632      	mov	r2, r6
 8006476:	4641      	mov	r1, r8
 8006478:	f000 faa8 	bl	80069cc <memmove>
 800647c:	68a3      	ldr	r3, [r4, #8]
 800647e:	1b9b      	subs	r3, r3, r6
 8006480:	60a3      	str	r3, [r4, #8]
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	4433      	add	r3, r6
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	2000      	movs	r0, #0
 800648a:	e7db      	b.n	8006444 <__ssputs_r+0x58>
 800648c:	462a      	mov	r2, r5
 800648e:	f000 fab7 	bl	8006a00 <_realloc_r>
 8006492:	4606      	mov	r6, r0
 8006494:	2800      	cmp	r0, #0
 8006496:	d1e1      	bne.n	800645c <__ssputs_r+0x70>
 8006498:	6921      	ldr	r1, [r4, #16]
 800649a:	4650      	mov	r0, sl
 800649c:	f7ff ff5a 	bl	8006354 <_free_r>
 80064a0:	e7c7      	b.n	8006432 <__ssputs_r+0x46>
	...

080064a4 <_svfiprintf_r>:
 80064a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	4698      	mov	r8, r3
 80064aa:	898b      	ldrh	r3, [r1, #12]
 80064ac:	061b      	lsls	r3, r3, #24
 80064ae:	b09d      	sub	sp, #116	; 0x74
 80064b0:	4607      	mov	r7, r0
 80064b2:	460d      	mov	r5, r1
 80064b4:	4614      	mov	r4, r2
 80064b6:	d50e      	bpl.n	80064d6 <_svfiprintf_r+0x32>
 80064b8:	690b      	ldr	r3, [r1, #16]
 80064ba:	b963      	cbnz	r3, 80064d6 <_svfiprintf_r+0x32>
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	f7ff fe0f 	bl	80060e0 <_malloc_r>
 80064c2:	6028      	str	r0, [r5, #0]
 80064c4:	6128      	str	r0, [r5, #16]
 80064c6:	b920      	cbnz	r0, 80064d2 <_svfiprintf_r+0x2e>
 80064c8:	230c      	movs	r3, #12
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	e0d1      	b.n	8006676 <_svfiprintf_r+0x1d2>
 80064d2:	2340      	movs	r3, #64	; 0x40
 80064d4:	616b      	str	r3, [r5, #20]
 80064d6:	2300      	movs	r3, #0
 80064d8:	9309      	str	r3, [sp, #36]	; 0x24
 80064da:	2320      	movs	r3, #32
 80064dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064e4:	2330      	movs	r3, #48	; 0x30
 80064e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006690 <_svfiprintf_r+0x1ec>
 80064ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ee:	f04f 0901 	mov.w	r9, #1
 80064f2:	4623      	mov	r3, r4
 80064f4:	469a      	mov	sl, r3
 80064f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064fa:	b10a      	cbz	r2, 8006500 <_svfiprintf_r+0x5c>
 80064fc:	2a25      	cmp	r2, #37	; 0x25
 80064fe:	d1f9      	bne.n	80064f4 <_svfiprintf_r+0x50>
 8006500:	ebba 0b04 	subs.w	fp, sl, r4
 8006504:	d00b      	beq.n	800651e <_svfiprintf_r+0x7a>
 8006506:	465b      	mov	r3, fp
 8006508:	4622      	mov	r2, r4
 800650a:	4629      	mov	r1, r5
 800650c:	4638      	mov	r0, r7
 800650e:	f7ff ff6d 	bl	80063ec <__ssputs_r>
 8006512:	3001      	adds	r0, #1
 8006514:	f000 80aa 	beq.w	800666c <_svfiprintf_r+0x1c8>
 8006518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800651a:	445a      	add	r2, fp
 800651c:	9209      	str	r2, [sp, #36]	; 0x24
 800651e:	f89a 3000 	ldrb.w	r3, [sl]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80a2 	beq.w	800666c <_svfiprintf_r+0x1c8>
 8006528:	2300      	movs	r3, #0
 800652a:	f04f 32ff 	mov.w	r2, #4294967295
 800652e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006532:	f10a 0a01 	add.w	sl, sl, #1
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	9307      	str	r3, [sp, #28]
 800653a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800653e:	931a      	str	r3, [sp, #104]	; 0x68
 8006540:	4654      	mov	r4, sl
 8006542:	2205      	movs	r2, #5
 8006544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006548:	4851      	ldr	r0, [pc, #324]	; (8006690 <_svfiprintf_r+0x1ec>)
 800654a:	f7f9 fe49 	bl	80001e0 <memchr>
 800654e:	9a04      	ldr	r2, [sp, #16]
 8006550:	b9d8      	cbnz	r0, 800658a <_svfiprintf_r+0xe6>
 8006552:	06d0      	lsls	r0, r2, #27
 8006554:	bf44      	itt	mi
 8006556:	2320      	movmi	r3, #32
 8006558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800655c:	0711      	lsls	r1, r2, #28
 800655e:	bf44      	itt	mi
 8006560:	232b      	movmi	r3, #43	; 0x2b
 8006562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006566:	f89a 3000 	ldrb.w	r3, [sl]
 800656a:	2b2a      	cmp	r3, #42	; 0x2a
 800656c:	d015      	beq.n	800659a <_svfiprintf_r+0xf6>
 800656e:	9a07      	ldr	r2, [sp, #28]
 8006570:	4654      	mov	r4, sl
 8006572:	2000      	movs	r0, #0
 8006574:	f04f 0c0a 	mov.w	ip, #10
 8006578:	4621      	mov	r1, r4
 800657a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800657e:	3b30      	subs	r3, #48	; 0x30
 8006580:	2b09      	cmp	r3, #9
 8006582:	d94e      	bls.n	8006622 <_svfiprintf_r+0x17e>
 8006584:	b1b0      	cbz	r0, 80065b4 <_svfiprintf_r+0x110>
 8006586:	9207      	str	r2, [sp, #28]
 8006588:	e014      	b.n	80065b4 <_svfiprintf_r+0x110>
 800658a:	eba0 0308 	sub.w	r3, r0, r8
 800658e:	fa09 f303 	lsl.w	r3, r9, r3
 8006592:	4313      	orrs	r3, r2
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	46a2      	mov	sl, r4
 8006598:	e7d2      	b.n	8006540 <_svfiprintf_r+0x9c>
 800659a:	9b03      	ldr	r3, [sp, #12]
 800659c:	1d19      	adds	r1, r3, #4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	9103      	str	r1, [sp, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bfbb      	ittet	lt
 80065a6:	425b      	neglt	r3, r3
 80065a8:	f042 0202 	orrlt.w	r2, r2, #2
 80065ac:	9307      	strge	r3, [sp, #28]
 80065ae:	9307      	strlt	r3, [sp, #28]
 80065b0:	bfb8      	it	lt
 80065b2:	9204      	strlt	r2, [sp, #16]
 80065b4:	7823      	ldrb	r3, [r4, #0]
 80065b6:	2b2e      	cmp	r3, #46	; 0x2e
 80065b8:	d10c      	bne.n	80065d4 <_svfiprintf_r+0x130>
 80065ba:	7863      	ldrb	r3, [r4, #1]
 80065bc:	2b2a      	cmp	r3, #42	; 0x2a
 80065be:	d135      	bne.n	800662c <_svfiprintf_r+0x188>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	1d1a      	adds	r2, r3, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	9203      	str	r2, [sp, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bfb8      	it	lt
 80065cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80065d0:	3402      	adds	r4, #2
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066a0 <_svfiprintf_r+0x1fc>
 80065d8:	7821      	ldrb	r1, [r4, #0]
 80065da:	2203      	movs	r2, #3
 80065dc:	4650      	mov	r0, sl
 80065de:	f7f9 fdff 	bl	80001e0 <memchr>
 80065e2:	b140      	cbz	r0, 80065f6 <_svfiprintf_r+0x152>
 80065e4:	2340      	movs	r3, #64	; 0x40
 80065e6:	eba0 000a 	sub.w	r0, r0, sl
 80065ea:	fa03 f000 	lsl.w	r0, r3, r0
 80065ee:	9b04      	ldr	r3, [sp, #16]
 80065f0:	4303      	orrs	r3, r0
 80065f2:	3401      	adds	r4, #1
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065fa:	4826      	ldr	r0, [pc, #152]	; (8006694 <_svfiprintf_r+0x1f0>)
 80065fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006600:	2206      	movs	r2, #6
 8006602:	f7f9 fded 	bl	80001e0 <memchr>
 8006606:	2800      	cmp	r0, #0
 8006608:	d038      	beq.n	800667c <_svfiprintf_r+0x1d8>
 800660a:	4b23      	ldr	r3, [pc, #140]	; (8006698 <_svfiprintf_r+0x1f4>)
 800660c:	bb1b      	cbnz	r3, 8006656 <_svfiprintf_r+0x1b2>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	3307      	adds	r3, #7
 8006612:	f023 0307 	bic.w	r3, r3, #7
 8006616:	3308      	adds	r3, #8
 8006618:	9303      	str	r3, [sp, #12]
 800661a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661c:	4433      	add	r3, r6
 800661e:	9309      	str	r3, [sp, #36]	; 0x24
 8006620:	e767      	b.n	80064f2 <_svfiprintf_r+0x4e>
 8006622:	fb0c 3202 	mla	r2, ip, r2, r3
 8006626:	460c      	mov	r4, r1
 8006628:	2001      	movs	r0, #1
 800662a:	e7a5      	b.n	8006578 <_svfiprintf_r+0xd4>
 800662c:	2300      	movs	r3, #0
 800662e:	3401      	adds	r4, #1
 8006630:	9305      	str	r3, [sp, #20]
 8006632:	4619      	mov	r1, r3
 8006634:	f04f 0c0a 	mov.w	ip, #10
 8006638:	4620      	mov	r0, r4
 800663a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800663e:	3a30      	subs	r2, #48	; 0x30
 8006640:	2a09      	cmp	r2, #9
 8006642:	d903      	bls.n	800664c <_svfiprintf_r+0x1a8>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0c5      	beq.n	80065d4 <_svfiprintf_r+0x130>
 8006648:	9105      	str	r1, [sp, #20]
 800664a:	e7c3      	b.n	80065d4 <_svfiprintf_r+0x130>
 800664c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006650:	4604      	mov	r4, r0
 8006652:	2301      	movs	r3, #1
 8006654:	e7f0      	b.n	8006638 <_svfiprintf_r+0x194>
 8006656:	ab03      	add	r3, sp, #12
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	462a      	mov	r2, r5
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <_svfiprintf_r+0x1f8>)
 800665e:	a904      	add	r1, sp, #16
 8006660:	4638      	mov	r0, r7
 8006662:	f3af 8000 	nop.w
 8006666:	1c42      	adds	r2, r0, #1
 8006668:	4606      	mov	r6, r0
 800666a:	d1d6      	bne.n	800661a <_svfiprintf_r+0x176>
 800666c:	89ab      	ldrh	r3, [r5, #12]
 800666e:	065b      	lsls	r3, r3, #25
 8006670:	f53f af2c 	bmi.w	80064cc <_svfiprintf_r+0x28>
 8006674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006676:	b01d      	add	sp, #116	; 0x74
 8006678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667c:	ab03      	add	r3, sp, #12
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	462a      	mov	r2, r5
 8006682:	4b06      	ldr	r3, [pc, #24]	; (800669c <_svfiprintf_r+0x1f8>)
 8006684:	a904      	add	r1, sp, #16
 8006686:	4638      	mov	r0, r7
 8006688:	f000 f87a 	bl	8006780 <_printf_i>
 800668c:	e7eb      	b.n	8006666 <_svfiprintf_r+0x1c2>
 800668e:	bf00      	nop
 8006690:	08006c10 	.word	0x08006c10
 8006694:	08006c1a 	.word	0x08006c1a
 8006698:	00000000 	.word	0x00000000
 800669c:	080063ed 	.word	0x080063ed
 80066a0:	08006c16 	.word	0x08006c16

080066a4 <_printf_common>:
 80066a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a8:	4616      	mov	r6, r2
 80066aa:	4699      	mov	r9, r3
 80066ac:	688a      	ldr	r2, [r1, #8]
 80066ae:	690b      	ldr	r3, [r1, #16]
 80066b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066b4:	4293      	cmp	r3, r2
 80066b6:	bfb8      	it	lt
 80066b8:	4613      	movlt	r3, r2
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c0:	4607      	mov	r7, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	b10a      	cbz	r2, 80066ca <_printf_common+0x26>
 80066c6:	3301      	adds	r3, #1
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	0699      	lsls	r1, r3, #26
 80066ce:	bf42      	ittt	mi
 80066d0:	6833      	ldrmi	r3, [r6, #0]
 80066d2:	3302      	addmi	r3, #2
 80066d4:	6033      	strmi	r3, [r6, #0]
 80066d6:	6825      	ldr	r5, [r4, #0]
 80066d8:	f015 0506 	ands.w	r5, r5, #6
 80066dc:	d106      	bne.n	80066ec <_printf_common+0x48>
 80066de:	f104 0a19 	add.w	sl, r4, #25
 80066e2:	68e3      	ldr	r3, [r4, #12]
 80066e4:	6832      	ldr	r2, [r6, #0]
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	dc26      	bgt.n	800673a <_printf_common+0x96>
 80066ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f0:	1e13      	subs	r3, r2, #0
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	bf18      	it	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	0692      	lsls	r2, r2, #26
 80066fa:	d42b      	bmi.n	8006754 <_printf_common+0xb0>
 80066fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006700:	4649      	mov	r1, r9
 8006702:	4638      	mov	r0, r7
 8006704:	47c0      	blx	r8
 8006706:	3001      	adds	r0, #1
 8006708:	d01e      	beq.n	8006748 <_printf_common+0xa4>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	68e5      	ldr	r5, [r4, #12]
 800670e:	6832      	ldr	r2, [r6, #0]
 8006710:	f003 0306 	and.w	r3, r3, #6
 8006714:	2b04      	cmp	r3, #4
 8006716:	bf08      	it	eq
 8006718:	1aad      	subeq	r5, r5, r2
 800671a:	68a3      	ldr	r3, [r4, #8]
 800671c:	6922      	ldr	r2, [r4, #16]
 800671e:	bf0c      	ite	eq
 8006720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006724:	2500      	movne	r5, #0
 8006726:	4293      	cmp	r3, r2
 8006728:	bfc4      	itt	gt
 800672a:	1a9b      	subgt	r3, r3, r2
 800672c:	18ed      	addgt	r5, r5, r3
 800672e:	2600      	movs	r6, #0
 8006730:	341a      	adds	r4, #26
 8006732:	42b5      	cmp	r5, r6
 8006734:	d11a      	bne.n	800676c <_printf_common+0xc8>
 8006736:	2000      	movs	r0, #0
 8006738:	e008      	b.n	800674c <_printf_common+0xa8>
 800673a:	2301      	movs	r3, #1
 800673c:	4652      	mov	r2, sl
 800673e:	4649      	mov	r1, r9
 8006740:	4638      	mov	r0, r7
 8006742:	47c0      	blx	r8
 8006744:	3001      	adds	r0, #1
 8006746:	d103      	bne.n	8006750 <_printf_common+0xac>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006750:	3501      	adds	r5, #1
 8006752:	e7c6      	b.n	80066e2 <_printf_common+0x3e>
 8006754:	18e1      	adds	r1, r4, r3
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	2030      	movs	r0, #48	; 0x30
 800675a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800675e:	4422      	add	r2, r4
 8006760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006768:	3302      	adds	r3, #2
 800676a:	e7c7      	b.n	80066fc <_printf_common+0x58>
 800676c:	2301      	movs	r3, #1
 800676e:	4622      	mov	r2, r4
 8006770:	4649      	mov	r1, r9
 8006772:	4638      	mov	r0, r7
 8006774:	47c0      	blx	r8
 8006776:	3001      	adds	r0, #1
 8006778:	d0e6      	beq.n	8006748 <_printf_common+0xa4>
 800677a:	3601      	adds	r6, #1
 800677c:	e7d9      	b.n	8006732 <_printf_common+0x8e>
	...

08006780 <_printf_i>:
 8006780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	7e0f      	ldrb	r7, [r1, #24]
 8006786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006788:	2f78      	cmp	r7, #120	; 0x78
 800678a:	4691      	mov	r9, r2
 800678c:	4680      	mov	r8, r0
 800678e:	460c      	mov	r4, r1
 8006790:	469a      	mov	sl, r3
 8006792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006796:	d807      	bhi.n	80067a8 <_printf_i+0x28>
 8006798:	2f62      	cmp	r7, #98	; 0x62
 800679a:	d80a      	bhi.n	80067b2 <_printf_i+0x32>
 800679c:	2f00      	cmp	r7, #0
 800679e:	f000 80d8 	beq.w	8006952 <_printf_i+0x1d2>
 80067a2:	2f58      	cmp	r7, #88	; 0x58
 80067a4:	f000 80a3 	beq.w	80068ee <_printf_i+0x16e>
 80067a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b0:	e03a      	b.n	8006828 <_printf_i+0xa8>
 80067b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067b6:	2b15      	cmp	r3, #21
 80067b8:	d8f6      	bhi.n	80067a8 <_printf_i+0x28>
 80067ba:	a101      	add	r1, pc, #4	; (adr r1, 80067c0 <_printf_i+0x40>)
 80067bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c0:	08006819 	.word	0x08006819
 80067c4:	0800682d 	.word	0x0800682d
 80067c8:	080067a9 	.word	0x080067a9
 80067cc:	080067a9 	.word	0x080067a9
 80067d0:	080067a9 	.word	0x080067a9
 80067d4:	080067a9 	.word	0x080067a9
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	080067a9 	.word	0x080067a9
 80067e0:	080067a9 	.word	0x080067a9
 80067e4:	080067a9 	.word	0x080067a9
 80067e8:	080067a9 	.word	0x080067a9
 80067ec:	08006939 	.word	0x08006939
 80067f0:	0800685d 	.word	0x0800685d
 80067f4:	0800691b 	.word	0x0800691b
 80067f8:	080067a9 	.word	0x080067a9
 80067fc:	080067a9 	.word	0x080067a9
 8006800:	0800695b 	.word	0x0800695b
 8006804:	080067a9 	.word	0x080067a9
 8006808:	0800685d 	.word	0x0800685d
 800680c:	080067a9 	.word	0x080067a9
 8006810:	080067a9 	.word	0x080067a9
 8006814:	08006923 	.word	0x08006923
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	602a      	str	r2, [r5, #0]
 8006820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006828:	2301      	movs	r3, #1
 800682a:	e0a3      	b.n	8006974 <_printf_i+0x1f4>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	6829      	ldr	r1, [r5, #0]
 8006830:	0606      	lsls	r6, r0, #24
 8006832:	f101 0304 	add.w	r3, r1, #4
 8006836:	d50a      	bpl.n	800684e <_printf_i+0xce>
 8006838:	680e      	ldr	r6, [r1, #0]
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	2e00      	cmp	r6, #0
 800683e:	da03      	bge.n	8006848 <_printf_i+0xc8>
 8006840:	232d      	movs	r3, #45	; 0x2d
 8006842:	4276      	negs	r6, r6
 8006844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006848:	485e      	ldr	r0, [pc, #376]	; (80069c4 <_printf_i+0x244>)
 800684a:	230a      	movs	r3, #10
 800684c:	e019      	b.n	8006882 <_printf_i+0x102>
 800684e:	680e      	ldr	r6, [r1, #0]
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006856:	bf18      	it	ne
 8006858:	b236      	sxthne	r6, r6
 800685a:	e7ef      	b.n	800683c <_printf_i+0xbc>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	1d19      	adds	r1, r3, #4
 8006862:	6029      	str	r1, [r5, #0]
 8006864:	0601      	lsls	r1, r0, #24
 8006866:	d501      	bpl.n	800686c <_printf_i+0xec>
 8006868:	681e      	ldr	r6, [r3, #0]
 800686a:	e002      	b.n	8006872 <_printf_i+0xf2>
 800686c:	0646      	lsls	r6, r0, #25
 800686e:	d5fb      	bpl.n	8006868 <_printf_i+0xe8>
 8006870:	881e      	ldrh	r6, [r3, #0]
 8006872:	4854      	ldr	r0, [pc, #336]	; (80069c4 <_printf_i+0x244>)
 8006874:	2f6f      	cmp	r7, #111	; 0x6f
 8006876:	bf0c      	ite	eq
 8006878:	2308      	moveq	r3, #8
 800687a:	230a      	movne	r3, #10
 800687c:	2100      	movs	r1, #0
 800687e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006882:	6865      	ldr	r5, [r4, #4]
 8006884:	60a5      	str	r5, [r4, #8]
 8006886:	2d00      	cmp	r5, #0
 8006888:	bfa2      	ittt	ge
 800688a:	6821      	ldrge	r1, [r4, #0]
 800688c:	f021 0104 	bicge.w	r1, r1, #4
 8006890:	6021      	strge	r1, [r4, #0]
 8006892:	b90e      	cbnz	r6, 8006898 <_printf_i+0x118>
 8006894:	2d00      	cmp	r5, #0
 8006896:	d04d      	beq.n	8006934 <_printf_i+0x1b4>
 8006898:	4615      	mov	r5, r2
 800689a:	fbb6 f1f3 	udiv	r1, r6, r3
 800689e:	fb03 6711 	mls	r7, r3, r1, r6
 80068a2:	5dc7      	ldrb	r7, [r0, r7]
 80068a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068a8:	4637      	mov	r7, r6
 80068aa:	42bb      	cmp	r3, r7
 80068ac:	460e      	mov	r6, r1
 80068ae:	d9f4      	bls.n	800689a <_printf_i+0x11a>
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d10b      	bne.n	80068cc <_printf_i+0x14c>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07de      	lsls	r6, r3, #31
 80068b8:	d508      	bpl.n	80068cc <_printf_i+0x14c>
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	6861      	ldr	r1, [r4, #4]
 80068be:	4299      	cmp	r1, r3
 80068c0:	bfde      	ittt	le
 80068c2:	2330      	movle	r3, #48	; 0x30
 80068c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068cc:	1b52      	subs	r2, r2, r5
 80068ce:	6122      	str	r2, [r4, #16]
 80068d0:	f8cd a000 	str.w	sl, [sp]
 80068d4:	464b      	mov	r3, r9
 80068d6:	aa03      	add	r2, sp, #12
 80068d8:	4621      	mov	r1, r4
 80068da:	4640      	mov	r0, r8
 80068dc:	f7ff fee2 	bl	80066a4 <_printf_common>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d14c      	bne.n	800697e <_printf_i+0x1fe>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	b004      	add	sp, #16
 80068ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ee:	4835      	ldr	r0, [pc, #212]	; (80069c4 <_printf_i+0x244>)
 80068f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068f4:	6829      	ldr	r1, [r5, #0]
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80068fc:	6029      	str	r1, [r5, #0]
 80068fe:	061d      	lsls	r5, r3, #24
 8006900:	d514      	bpl.n	800692c <_printf_i+0x1ac>
 8006902:	07df      	lsls	r7, r3, #31
 8006904:	bf44      	itt	mi
 8006906:	f043 0320 	orrmi.w	r3, r3, #32
 800690a:	6023      	strmi	r3, [r4, #0]
 800690c:	b91e      	cbnz	r6, 8006916 <_printf_i+0x196>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	f023 0320 	bic.w	r3, r3, #32
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	2310      	movs	r3, #16
 8006918:	e7b0      	b.n	800687c <_printf_i+0xfc>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f043 0320 	orr.w	r3, r3, #32
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	2378      	movs	r3, #120	; 0x78
 8006924:	4828      	ldr	r0, [pc, #160]	; (80069c8 <_printf_i+0x248>)
 8006926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800692a:	e7e3      	b.n	80068f4 <_printf_i+0x174>
 800692c:	0659      	lsls	r1, r3, #25
 800692e:	bf48      	it	mi
 8006930:	b2b6      	uxthmi	r6, r6
 8006932:	e7e6      	b.n	8006902 <_printf_i+0x182>
 8006934:	4615      	mov	r5, r2
 8006936:	e7bb      	b.n	80068b0 <_printf_i+0x130>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	6826      	ldr	r6, [r4, #0]
 800693c:	6961      	ldr	r1, [r4, #20]
 800693e:	1d18      	adds	r0, r3, #4
 8006940:	6028      	str	r0, [r5, #0]
 8006942:	0635      	lsls	r5, r6, #24
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	d501      	bpl.n	800694c <_printf_i+0x1cc>
 8006948:	6019      	str	r1, [r3, #0]
 800694a:	e002      	b.n	8006952 <_printf_i+0x1d2>
 800694c:	0670      	lsls	r0, r6, #25
 800694e:	d5fb      	bpl.n	8006948 <_printf_i+0x1c8>
 8006950:	8019      	strh	r1, [r3, #0]
 8006952:	2300      	movs	r3, #0
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	4615      	mov	r5, r2
 8006958:	e7ba      	b.n	80068d0 <_printf_i+0x150>
 800695a:	682b      	ldr	r3, [r5, #0]
 800695c:	1d1a      	adds	r2, r3, #4
 800695e:	602a      	str	r2, [r5, #0]
 8006960:	681d      	ldr	r5, [r3, #0]
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	2100      	movs	r1, #0
 8006966:	4628      	mov	r0, r5
 8006968:	f7f9 fc3a 	bl	80001e0 <memchr>
 800696c:	b108      	cbz	r0, 8006972 <_printf_i+0x1f2>
 800696e:	1b40      	subs	r0, r0, r5
 8006970:	6060      	str	r0, [r4, #4]
 8006972:	6863      	ldr	r3, [r4, #4]
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	2300      	movs	r3, #0
 8006978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697c:	e7a8      	b.n	80068d0 <_printf_i+0x150>
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	462a      	mov	r2, r5
 8006982:	4649      	mov	r1, r9
 8006984:	4640      	mov	r0, r8
 8006986:	47d0      	blx	sl
 8006988:	3001      	adds	r0, #1
 800698a:	d0ab      	beq.n	80068e4 <_printf_i+0x164>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	079b      	lsls	r3, r3, #30
 8006990:	d413      	bmi.n	80069ba <_printf_i+0x23a>
 8006992:	68e0      	ldr	r0, [r4, #12]
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	4298      	cmp	r0, r3
 8006998:	bfb8      	it	lt
 800699a:	4618      	movlt	r0, r3
 800699c:	e7a4      	b.n	80068e8 <_printf_i+0x168>
 800699e:	2301      	movs	r3, #1
 80069a0:	4632      	mov	r2, r6
 80069a2:	4649      	mov	r1, r9
 80069a4:	4640      	mov	r0, r8
 80069a6:	47d0      	blx	sl
 80069a8:	3001      	adds	r0, #1
 80069aa:	d09b      	beq.n	80068e4 <_printf_i+0x164>
 80069ac:	3501      	adds	r5, #1
 80069ae:	68e3      	ldr	r3, [r4, #12]
 80069b0:	9903      	ldr	r1, [sp, #12]
 80069b2:	1a5b      	subs	r3, r3, r1
 80069b4:	42ab      	cmp	r3, r5
 80069b6:	dcf2      	bgt.n	800699e <_printf_i+0x21e>
 80069b8:	e7eb      	b.n	8006992 <_printf_i+0x212>
 80069ba:	2500      	movs	r5, #0
 80069bc:	f104 0619 	add.w	r6, r4, #25
 80069c0:	e7f5      	b.n	80069ae <_printf_i+0x22e>
 80069c2:	bf00      	nop
 80069c4:	08006c21 	.word	0x08006c21
 80069c8:	08006c32 	.word	0x08006c32

080069cc <memmove>:
 80069cc:	4288      	cmp	r0, r1
 80069ce:	b510      	push	{r4, lr}
 80069d0:	eb01 0402 	add.w	r4, r1, r2
 80069d4:	d902      	bls.n	80069dc <memmove+0x10>
 80069d6:	4284      	cmp	r4, r0
 80069d8:	4623      	mov	r3, r4
 80069da:	d807      	bhi.n	80069ec <memmove+0x20>
 80069dc:	1e43      	subs	r3, r0, #1
 80069de:	42a1      	cmp	r1, r4
 80069e0:	d008      	beq.n	80069f4 <memmove+0x28>
 80069e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ea:	e7f8      	b.n	80069de <memmove+0x12>
 80069ec:	4402      	add	r2, r0
 80069ee:	4601      	mov	r1, r0
 80069f0:	428a      	cmp	r2, r1
 80069f2:	d100      	bne.n	80069f6 <memmove+0x2a>
 80069f4:	bd10      	pop	{r4, pc}
 80069f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069fe:	e7f7      	b.n	80069f0 <memmove+0x24>

08006a00 <_realloc_r>:
 8006a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a04:	4680      	mov	r8, r0
 8006a06:	4614      	mov	r4, r2
 8006a08:	460e      	mov	r6, r1
 8006a0a:	b921      	cbnz	r1, 8006a16 <_realloc_r+0x16>
 8006a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a10:	4611      	mov	r1, r2
 8006a12:	f7ff bb65 	b.w	80060e0 <_malloc_r>
 8006a16:	b92a      	cbnz	r2, 8006a24 <_realloc_r+0x24>
 8006a18:	f7ff fc9c 	bl	8006354 <_free_r>
 8006a1c:	4625      	mov	r5, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	f000 f81b 	bl	8006a5e <_malloc_usable_size_r>
 8006a28:	4284      	cmp	r4, r0
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	d802      	bhi.n	8006a34 <_realloc_r+0x34>
 8006a2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a32:	d812      	bhi.n	8006a5a <_realloc_r+0x5a>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4640      	mov	r0, r8
 8006a38:	f7ff fb52 	bl	80060e0 <_malloc_r>
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d0ed      	beq.n	8006a1e <_realloc_r+0x1e>
 8006a42:	42bc      	cmp	r4, r7
 8006a44:	4622      	mov	r2, r4
 8006a46:	4631      	mov	r1, r6
 8006a48:	bf28      	it	cs
 8006a4a:	463a      	movcs	r2, r7
 8006a4c:	f7ff fb12 	bl	8006074 <memcpy>
 8006a50:	4631      	mov	r1, r6
 8006a52:	4640      	mov	r0, r8
 8006a54:	f7ff fc7e 	bl	8006354 <_free_r>
 8006a58:	e7e1      	b.n	8006a1e <_realloc_r+0x1e>
 8006a5a:	4635      	mov	r5, r6
 8006a5c:	e7df      	b.n	8006a1e <_realloc_r+0x1e>

08006a5e <_malloc_usable_size_r>:
 8006a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a62:	1f18      	subs	r0, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bfbc      	itt	lt
 8006a68:	580b      	ldrlt	r3, [r1, r0]
 8006a6a:	18c0      	addlt	r0, r0, r3
 8006a6c:	4770      	bx	lr
	...

08006a70 <_init>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr

08006a7c <_fini>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	bf00      	nop
 8006a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a82:	bc08      	pop	{r3}
 8006a84:	469e      	mov	lr, r3
 8006a86:	4770      	bx	lr
