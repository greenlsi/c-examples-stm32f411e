
MEMS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de0  08004de0  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004de8  08004de8  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dec  08004dec  00014dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08004df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200000ec  08004edc  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08004edc  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf33  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002331  00000000  00000000  0002c04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002efa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001707e  00000000  00000000  0002fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7f6  00000000  00000000  00046b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbaa  00000000  00000000  00055324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2ece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f4  00000000  00000000  000e2f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ec 	.word	0x200000ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cf8 	.word	0x08004cf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f0 	.word	0x200000f0
 80001dc:	08004cf8 	.word	0x08004cf8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800058e:	2300      	movs	r3, #0
 8000590:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000592:	f003 fa85 	bl	8003aa0 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	461a      	mov	r2, r3
 800059e:	2120      	movs	r1, #32
 80005a0:	2032      	movs	r0, #50	; 0x32
 80005a2:	f003 fad5 	bl	8003b50 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80005a6:	2300      	movs	r3, #0
 80005a8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	461a      	mov	r2, r3
 80005ae:	2123      	movs	r1, #35	; 0x23
 80005b0:	2032      	movs	r0, #50	; 0x32
 80005b2:	f003 facd 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80005d6:	f003 fa63 	bl	8003aa0 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80005da:	210f      	movs	r1, #15
 80005dc:	2032      	movs	r0, #50	; 0x32
 80005de:	f003 faca 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80005e6:	79fb      	ldrb	r3, [r7, #7]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80005f6:	2124      	movs	r1, #36	; 0x24
 80005f8:	2032      	movs	r0, #50	; 0x32
 80005fa:	f003 fabc 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000608:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	461a      	mov	r2, r3
 800060e:	2124      	movs	r1, #36	; 0x24
 8000610:	2032      	movs	r0, #50	; 0x32
 8000612:	f003 fa9d 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b084      	sub	sp, #16
 8000622:	af00      	add	r7, sp, #0
 8000624:	4603      	mov	r3, r0
 8000626:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000628:	2121      	movs	r1, #33	; 0x21
 800062a:	2032      	movs	r0, #50	; 0x32
 800062c:	f003 faa3 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000630:	4603      	mov	r3, r0
 8000632:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	f003 030c 	and.w	r3, r3, #12
 800063a:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 800063c:	7bfa      	ldrb	r2, [r7, #15]
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4313      	orrs	r3, r2
 8000642:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	461a      	mov	r2, r3
 8000648:	2121      	movs	r1, #33	; 0x21
 800064a:	2032      	movs	r0, #50	; 0x32
 800064c:	f003 fa80 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 8000650:	bf00      	nop
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000662:	2121      	movs	r1, #33	; 0x21
 8000664:	2032      	movs	r0, #50	; 0x32
 8000666:	f003 fa86 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 800066a:	4603      	mov	r3, r0
 800066c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	f023 0308 	bic.w	r3, r3, #8
 8000674:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000676:	7bfa      	ldrb	r2, [r7, #15]
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4313      	orrs	r3, r2
 800067c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	461a      	mov	r2, r3
 8000682:	2121      	movs	r1, #33	; 0x21
 8000684:	2032      	movs	r0, #50	; 0x32
 8000686:	f003 fa63 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b088      	sub	sp, #32
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800069a:	2300      	movs	r3, #0
 800069c:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80006a2:	2301      	movs	r3, #1
 80006a4:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80006a6:	2123      	movs	r1, #35	; 0x23
 80006a8:	2032      	movs	r0, #50	; 0x32
 80006aa:	f003 fa64 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80006ae:	4603      	mov	r3, r0
 80006b0:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80006b2:	2124      	movs	r1, #36	; 0x24
 80006b4:	2032      	movs	r0, #50	; 0x32
 80006b6:	f003 fa5e 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80006ba:	4603      	mov	r3, r0
 80006bc:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 80006be:	2128      	movs	r1, #40	; 0x28
 80006c0:	2032      	movs	r0, #50	; 0x32
 80006c2:	f003 fa58 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 80006cc:	2129      	movs	r1, #41	; 0x29
 80006ce:	2032      	movs	r0, #50	; 0x32
 80006d0:	f003 fa51 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 80006da:	212a      	movs	r1, #42	; 0x2a
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f003 fa4a 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80006e8:	212b      	movs	r1, #43	; 0x2b
 80006ea:	2032      	movs	r0, #50	; 0x32
 80006ec:	f003 fa43 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 80006f6:	212c      	movs	r1, #44	; 0x2c
 80006f8:	2032      	movs	r0, #50	; 0x32
 80006fa:	f003 fa3c 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80006fe:	4603      	mov	r3, r0
 8000700:	b25b      	sxtb	r3, r3
 8000702:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000704:	212d      	movs	r1, #45	; 0x2d
 8000706:	2032      	movs	r0, #50	; 0x32
 8000708:	f003 fa35 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 800070c:	4603      	mov	r3, r0
 800070e:	b25b      	sxtb	r3, r3
 8000710:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8000712:	7d3b      	ldrb	r3, [r7, #20]
 8000714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000718:	2b00      	cmp	r3, #0
 800071a:	d123      	bne.n	8000764 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 800071c:	2300      	movs	r3, #0
 800071e:	77fb      	strb	r3, [r7, #31]
 8000720:	e01c      	b.n	800075c <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000722:	7ffb      	ldrb	r3, [r7, #31]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	3301      	adds	r3, #1
 8000728:	3320      	adds	r3, #32
 800072a:	443b      	add	r3, r7
 800072c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000730:	b29b      	uxth	r3, r3
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b29a      	uxth	r2, r3
 8000736:	7ffb      	ldrb	r3, [r7, #31]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	3320      	adds	r3, #32
 800073c:	443b      	add	r3, r7
 800073e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000742:	b29b      	uxth	r3, r3
 8000744:	4413      	add	r3, r2
 8000746:	b29a      	uxth	r2, r3
 8000748:	7ffb      	ldrb	r3, [r7, #31]
 800074a:	b212      	sxth	r2, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	3320      	adds	r3, #32
 8000750:	443b      	add	r3, r7
 8000752:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000756:	7ffb      	ldrb	r3, [r7, #31]
 8000758:	3301      	adds	r3, #1
 800075a:	77fb      	strb	r3, [r7, #31]
 800075c:	7ffb      	ldrb	r3, [r7, #31]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d9df      	bls.n	8000722 <LSM303AGR_AccReadXYZ+0x90>
 8000762:	e022      	b.n	80007aa <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	77fb      	strb	r3, [r7, #31]
 8000768:	e01c      	b.n	80007a4 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800076a:	7ffb      	ldrb	r3, [r7, #31]
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	3320      	adds	r3, #32
 8000770:	443b      	add	r3, r7
 8000772:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000776:	b29b      	uxth	r3, r3
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	b29a      	uxth	r2, r3
 800077c:	7ffb      	ldrb	r3, [r7, #31]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	3301      	adds	r3, #1
 8000782:	3320      	adds	r3, #32
 8000784:	443b      	add	r3, r7
 8000786:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800078a:	b29b      	uxth	r3, r3
 800078c:	4413      	add	r3, r2
 800078e:	b29a      	uxth	r2, r3
 8000790:	7ffb      	ldrb	r3, [r7, #31]
 8000792:	b212      	sxth	r2, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	3320      	adds	r3, #32
 8000798:	443b      	add	r3, r7
 800079a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800079e:	7ffb      	ldrb	r3, [r7, #31]
 80007a0:	3301      	adds	r3, #1
 80007a2:	77fb      	strb	r3, [r7, #31]
 80007a4:	7ffb      	ldrb	r3, [r7, #31]
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d9df      	bls.n	800076a <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80007aa:	7d3b      	ldrb	r3, [r7, #20]
 80007ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80007b0:	2b30      	cmp	r3, #48	; 0x30
 80007b2:	d013      	beq.n	80007dc <LSM303AGR_AccReadXYZ+0x14a>
 80007b4:	2b30      	cmp	r3, #48	; 0x30
 80007b6:	dc14      	bgt.n	80007e2 <LSM303AGR_AccReadXYZ+0x150>
 80007b8:	2b20      	cmp	r3, #32
 80007ba:	d00c      	beq.n	80007d6 <LSM303AGR_AccReadXYZ+0x144>
 80007bc:	2b20      	cmp	r3, #32
 80007be:	dc10      	bgt.n	80007e2 <LSM303AGR_AccReadXYZ+0x150>
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <LSM303AGR_AccReadXYZ+0x138>
 80007c4:	2b10      	cmp	r3, #16
 80007c6:	d003      	beq.n	80007d0 <LSM303AGR_AccReadXYZ+0x13e>
 80007c8:	e00b      	b.n	80007e2 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80007ca:	2301      	movs	r3, #1
 80007cc:	77bb      	strb	r3, [r7, #30]
    break;
 80007ce:	e008      	b.n	80007e2 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 80007d0:	2302      	movs	r3, #2
 80007d2:	77bb      	strb	r3, [r7, #30]
    break;
 80007d4:	e005      	b.n	80007e2 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 80007d6:	2304      	movs	r3, #4
 80007d8:	77bb      	strb	r3, [r7, #30]
    break;
 80007da:	e002      	b.n	80007e2 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80007dc:	230c      	movs	r3, #12
 80007de:	77bb      	strb	r3, [r7, #30]
    break;
 80007e0:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	77fb      	strb	r3, [r7, #31]
 80007e6:	e014      	b.n	8000812 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80007e8:	7ffb      	ldrb	r3, [r7, #31]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	3320      	adds	r3, #32
 80007ee:	443b      	add	r3, r7
 80007f0:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	7fbb      	ldrb	r3, [r7, #30]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	fb12 f303 	smulbb	r3, r2, r3
 80007fe:	b299      	uxth	r1, r3
 8000800:	7ffb      	ldrb	r3, [r7, #31]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4413      	add	r3, r2
 8000808:	b20a      	sxth	r2, r1
 800080a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800080c:	7ffb      	ldrb	r3, [r7, #31]
 800080e:	3301      	adds	r3, #1
 8000810:	77fb      	strb	r3, [r7, #31]
 8000812:	7ffb      	ldrb	r3, [r7, #31]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d9e7      	bls.n	80007e8 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3720      	adds	r7, #32
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b084      	sub	sp, #16
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000830:	2121      	movs	r1, #33	; 0x21
 8000832:	2032      	movs	r0, #50	; 0x32
 8000834:	f003 f99f 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000838:	4603      	mov	r3, r0
 800083a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	f023 0304 	bic.w	r3, r3, #4
 8000842:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000844:	7bfa      	ldrb	r2, [r7, #15]
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	4313      	orrs	r3, r2
 800084a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	461a      	mov	r2, r3
 8000850:	2121      	movs	r1, #33	; 0x21
 8000852:	2032      	movs	r0, #50	; 0x32
 8000854:	f003 f97c 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800086a:	2300      	movs	r3, #0
 800086c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800086e:	2122      	movs	r1, #34	; 0x22
 8000870:	2032      	movs	r0, #50	; 0x32
 8000872:	f003 f980 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000876:	4603      	mov	r3, r0
 8000878:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800087a:	7bfa      	ldrb	r2, [r7, #15]
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4313      	orrs	r3, r2
 8000880:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	461a      	mov	r2, r3
 8000886:	2122      	movs	r1, #34	; 0x22
 8000888:	2032      	movs	r0, #50	; 0x32
 800088a:	f003 f961 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8000896:	b580      	push	{r7, lr}
 8000898:	b084      	sub	sp, #16
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80008a4:	2138      	movs	r1, #56	; 0x38
 80008a6:	2032      	movs	r0, #50	; 0x32
 80008a8:	f003 f965 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80008ac:	4603      	mov	r3, r0
 80008ae:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80008b0:	7bfa      	ldrb	r2, [r7, #15]
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	461a      	mov	r2, r3
 80008bc:	2138      	movs	r1, #56	; 0x38
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f003 f946 	bl	8003b50 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80008c4:	230a      	movs	r3, #10
 80008c6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	461a      	mov	r2, r3
 80008cc:	213a      	movs	r1, #58	; 0x3a
 80008ce:	2032      	movs	r0, #50	; 0x32
 80008d0:	f003 f93e 	bl	8003b50 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80008d4:	2305      	movs	r3, #5
 80008d6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	461a      	mov	r2, r3
 80008dc:	213b      	movs	r1, #59	; 0x3b
 80008de:	2032      	movs	r0, #50	; 0x32
 80008e0:	f003 f936 	bl	8003b50 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	461a      	mov	r2, r3
 80008e8:	213c      	movs	r1, #60	; 0x3c
 80008ea:	2032      	movs	r0, #50	; 0x32
 80008ec:	f003 f930 	bl	8003b50 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80008f0:	2332      	movs	r3, #50	; 0x32
 80008f2:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	461a      	mov	r2, r3
 80008f8:	213d      	movs	r1, #61	; 0x3d
 80008fa:	2032      	movs	r0, #50	; 0x32
 80008fc:	f003 f928 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 8000900:	bf00      	nop
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800090c:	f003 f8f0 	bl	8003af0 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8000910:	2080      	movs	r0, #128	; 0x80
 8000912:	f7ff ffa5 	bl	8000860 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8000916:	2004      	movs	r0, #4
 8000918:	f7ff ff83 	bl	8000822 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800091c:	2010      	movs	r0, #16
 800091e:	f7ff ffba 	bl	8000896 <LSM303AGR_AccClickITEnable>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}

08000926 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8000926:	b580      	push	{r7, lr}
 8000928:	b084      	sub	sp, #16
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000934:	f003 f8b4 	bl	8003aa0 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	461a      	mov	r2, r3
 8000940:	2120      	movs	r1, #32
 8000942:	2032      	movs	r0, #50	; 0x32
 8000944:	f003 f904 	bl	8003b50 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	461a      	mov	r2, r3
 8000950:	2123      	movs	r1, #35	; 0x23
 8000952:	2032      	movs	r0, #50	; 0x32
 8000954:	f003 f8fc 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000974:	2300      	movs	r3, #0
 8000976:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000978:	f003 f892 	bl	8003aa0 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800097c:	210f      	movs	r1, #15
 800097e:	2032      	movs	r0, #50	; 0x32
 8000980:	f003 f8f9 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000988:	79fb      	ldrb	r3, [r7, #7]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000998:	2124      	movs	r1, #36	; 0x24
 800099a:	2032      	movs	r0, #50	; 0x32
 800099c:	f003 f8eb 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009aa:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	461a      	mov	r2, r3
 80009b0:	2124      	movs	r1, #36	; 0x24
 80009b2:	2032      	movs	r0, #50	; 0x32
 80009b4:	f003 f8cc 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80009ca:	2121      	movs	r1, #33	; 0x21
 80009cc:	2032      	movs	r0, #50	; 0x32
 80009ce:	f003 f8d2 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 80009d2:	4603      	mov	r3, r0
 80009d4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	f003 030c 	and.w	r3, r3, #12
 80009dc:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	461a      	mov	r2, r3
 80009ea:	2121      	movs	r1, #33	; 0x21
 80009ec:	2032      	movs	r0, #50	; 0x32
 80009ee:	f003 f8af 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b084      	sub	sp, #16
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000a04:	2121      	movs	r1, #33	; 0x21
 8000a06:	2032      	movs	r0, #50	; 0x32
 8000a08:	f003 f8b5 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	f023 0308 	bic.w	r3, r3, #8
 8000a16:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000a18:	7bfa      	ldrb	r2, [r7, #15]
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	461a      	mov	r2, r3
 8000a24:	2121      	movs	r1, #33	; 0x21
 8000a26:	2032      	movs	r0, #50	; 0x32
 8000a28:	f003 f892 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000a44:	2301      	movs	r3, #1
 8000a46:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000a48:	2123      	movs	r1, #35	; 0x23
 8000a4a:	2032      	movs	r0, #50	; 0x32
 8000a4c:	f003 f893 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000a50:	4603      	mov	r3, r0
 8000a52:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000a54:	2124      	movs	r1, #36	; 0x24
 8000a56:	2032      	movs	r0, #50	; 0x32
 8000a58:	f003 f88d 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000a60:	2128      	movs	r1, #40	; 0x28
 8000a62:	2032      	movs	r0, #50	; 0x32
 8000a64:	f003 f887 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000a6e:	2129      	movs	r1, #41	; 0x29
 8000a70:	2032      	movs	r0, #50	; 0x32
 8000a72:	f003 f880 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000a76:	4603      	mov	r3, r0
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000a7c:	212a      	movs	r1, #42	; 0x2a
 8000a7e:	2032      	movs	r0, #50	; 0x32
 8000a80:	f003 f879 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b25b      	sxtb	r3, r3
 8000a88:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000a8a:	212b      	movs	r1, #43	; 0x2b
 8000a8c:	2032      	movs	r0, #50	; 0x32
 8000a8e:	f003 f872 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000a98:	212c      	movs	r1, #44	; 0x2c
 8000a9a:	2032      	movs	r0, #50	; 0x32
 8000a9c:	f003 f86b 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000aa6:	212d      	movs	r1, #45	; 0x2d
 8000aa8:	2032      	movs	r0, #50	; 0x32
 8000aaa:	f003 f864 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000ab4:	7d3b      	ldrb	r3, [r7, #20]
 8000ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d123      	bne.n	8000b06 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	77fb      	strb	r3, [r7, #31]
 8000ac2:	e01c      	b.n	8000afe <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000ac4:	7ffb      	ldrb	r3, [r7, #31]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	3301      	adds	r3, #1
 8000aca:	3320      	adds	r3, #32
 8000acc:	443b      	add	r3, r7
 8000ace:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	3320      	adds	r3, #32
 8000ade:	443b      	add	r3, r7
 8000ae0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	7ffb      	ldrb	r3, [r7, #31]
 8000aec:	b212      	sxth	r2, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	3320      	adds	r3, #32
 8000af2:	443b      	add	r3, r7
 8000af4:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000af8:	7ffb      	ldrb	r3, [r7, #31]
 8000afa:	3301      	adds	r3, #1
 8000afc:	77fb      	strb	r3, [r7, #31]
 8000afe:	7ffb      	ldrb	r3, [r7, #31]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d9df      	bls.n	8000ac4 <LSM303DLHC_AccReadXYZ+0x90>
 8000b04:	e022      	b.n	8000b4c <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	77fb      	strb	r3, [r7, #31]
 8000b0a:	e01c      	b.n	8000b46 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000b0c:	7ffb      	ldrb	r3, [r7, #31]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	3320      	adds	r3, #32
 8000b12:	443b      	add	r3, r7
 8000b14:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	7ffb      	ldrb	r3, [r7, #31]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	3301      	adds	r3, #1
 8000b24:	3320      	adds	r3, #32
 8000b26:	443b      	add	r3, r7
 8000b28:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	7ffb      	ldrb	r3, [r7, #31]
 8000b34:	b212      	sxth	r2, r2
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	3320      	adds	r3, #32
 8000b3a:	443b      	add	r3, r7
 8000b3c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000b40:	7ffb      	ldrb	r3, [r7, #31]
 8000b42:	3301      	adds	r3, #1
 8000b44:	77fb      	strb	r3, [r7, #31]
 8000b46:	7ffb      	ldrb	r3, [r7, #31]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d9df      	bls.n	8000b0c <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000b4c:	7d3b      	ldrb	r3, [r7, #20]
 8000b4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000b52:	2b30      	cmp	r3, #48	; 0x30
 8000b54:	d013      	beq.n	8000b7e <LSM303DLHC_AccReadXYZ+0x14a>
 8000b56:	2b30      	cmp	r3, #48	; 0x30
 8000b58:	dc14      	bgt.n	8000b84 <LSM303DLHC_AccReadXYZ+0x150>
 8000b5a:	2b20      	cmp	r3, #32
 8000b5c:	d00c      	beq.n	8000b78 <LSM303DLHC_AccReadXYZ+0x144>
 8000b5e:	2b20      	cmp	r3, #32
 8000b60:	dc10      	bgt.n	8000b84 <LSM303DLHC_AccReadXYZ+0x150>
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <LSM303DLHC_AccReadXYZ+0x138>
 8000b66:	2b10      	cmp	r3, #16
 8000b68:	d003      	beq.n	8000b72 <LSM303DLHC_AccReadXYZ+0x13e>
 8000b6a:	e00b      	b.n	8000b84 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	77bb      	strb	r3, [r7, #30]
    break;
 8000b70:	e008      	b.n	8000b84 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8000b72:	2302      	movs	r3, #2
 8000b74:	77bb      	strb	r3, [r7, #30]
    break;
 8000b76:	e005      	b.n	8000b84 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	77bb      	strb	r3, [r7, #30]
    break;
 8000b7c:	e002      	b.n	8000b84 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	77bb      	strb	r3, [r7, #30]
    break;
 8000b82:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	77fb      	strb	r3, [r7, #31]
 8000b88:	e014      	b.n	8000bb4 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000b8a:	7ffb      	ldrb	r3, [r7, #31]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	3320      	adds	r3, #32
 8000b90:	443b      	add	r3, r7
 8000b92:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	7fbb      	ldrb	r3, [r7, #30]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	fb12 f303 	smulbb	r3, r2, r3
 8000ba0:	b299      	uxth	r1, r3
 8000ba2:	7ffb      	ldrb	r3, [r7, #31]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b20a      	sxth	r2, r1
 8000bac:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000bae:	7ffb      	ldrb	r3, [r7, #31]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	77fb      	strb	r3, [r7, #31]
 8000bb4:	7ffb      	ldrb	r3, [r7, #31]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d9e7      	bls.n	8000b8a <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000bd2:	2121      	movs	r1, #33	; 0x21
 8000bd4:	2032      	movs	r0, #50	; 0x32
 8000bd6:	f002 ffce 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	f023 0304 	bic.w	r3, r3, #4
 8000be4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8000be6:	7bfa      	ldrb	r2, [r7, #15]
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2121      	movs	r1, #33	; 0x21
 8000bf4:	2032      	movs	r0, #50	; 0x32
 8000bf6:	f002 ffab 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8000c10:	2122      	movs	r1, #34	; 0x22
 8000c12:	2032      	movs	r0, #50	; 0x32
 8000c14:	f002 ffaf 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	461a      	mov	r2, r3
 8000c28:	2122      	movs	r1, #34	; 0x22
 8000c2a:	2032      	movs	r0, #50	; 0x32
 8000c2c:	f002 ff90 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8000c46:	2138      	movs	r1, #56	; 0x38
 8000c48:	2032      	movs	r0, #50	; 0x32
 8000c4a:	f002 ff94 	bl	8003b76 <COMPASSACCELERO_IO_Read>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8000c52:	7bfa      	ldrb	r2, [r7, #15]
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	2138      	movs	r1, #56	; 0x38
 8000c60:	2032      	movs	r0, #50	; 0x32
 8000c62:	f002 ff75 	bl	8003b50 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8000c66:	230a      	movs	r3, #10
 8000c68:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	213a      	movs	r1, #58	; 0x3a
 8000c70:	2032      	movs	r0, #50	; 0x32
 8000c72:	f002 ff6d 	bl	8003b50 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8000c76:	2305      	movs	r3, #5
 8000c78:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	213b      	movs	r1, #59	; 0x3b
 8000c80:	2032      	movs	r0, #50	; 0x32
 8000c82:	f002 ff65 	bl	8003b50 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	213c      	movs	r1, #60	; 0x3c
 8000c8c:	2032      	movs	r0, #50	; 0x32
 8000c8e:	f002 ff5f 	bl	8003b50 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8000c92:	2332      	movs	r3, #50	; 0x32
 8000c94:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	213d      	movs	r1, #61	; 0x3d
 8000c9c:	2032      	movs	r0, #50	; 0x32
 8000c9e:	f002 ff57 	bl	8003b50 <COMPASSACCELERO_IO_Write>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8000cae:	f002 ff1f 	bl	8003af0 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8000cb2:	2080      	movs	r0, #128	; 0x80
 8000cb4:	f7ff ffa5 	bl	8000c02 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f7ff ff83 	bl	8000bc4 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8000cbe:	2010      	movs	r0, #16
 8000cc0:	f7ff ffba 	bl	8000c38 <LSM303DLHC_AccClickITEnable>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	4b91      	ldr	r3, [pc, #580]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a90      	ldr	r2, [pc, #576]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b8e      	ldr	r3, [pc, #568]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	4b8a      	ldr	r3, [pc, #552]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a89      	ldr	r2, [pc, #548]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b87      	ldr	r3, [pc, #540]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b83      	ldr	r3, [pc, #524]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a82      	ldr	r2, [pc, #520]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b80      	ldr	r3, [pc, #512]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b7c      	ldr	r3, [pc, #496]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a7b      	ldr	r2, [pc, #492]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b79      	ldr	r3, [pc, #484]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b75      	ldr	r3, [pc, #468]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a74      	ldr	r2, [pc, #464]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b72      	ldr	r3, [pc, #456]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b6e      	ldr	r3, [pc, #440]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a6d      	ldr	r2, [pc, #436]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b6b      	ldr	r3, [pc, #428]	; (8000f28 <MX_GPIO_Init+0x260>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2108      	movs	r1, #8
 8000d8a:	4868      	ldr	r0, [pc, #416]	; (8000f2c <MX_GPIO_Init+0x264>)
 8000d8c:	f000 ffce 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2101      	movs	r1, #1
 8000d94:	4866      	ldr	r0, [pc, #408]	; (8000f30 <MX_GPIO_Init+0x268>)
 8000d96:	f000 ffc9 	bl	8001d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000da0:	4864      	ldr	r0, [pc, #400]	; (8000f34 <MX_GPIO_Init+0x26c>)
 8000da2:	f000 ffc3 	bl	8001d2c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000da6:	2304      	movs	r3, #4
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	485c      	ldr	r0, [pc, #368]	; (8000f2c <MX_GPIO_Init+0x264>)
 8000dba:	f000 fd4f 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4855      	ldr	r0, [pc, #340]	; (8000f2c <MX_GPIO_Init+0x264>)
 8000dd6:	f000 fd41 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000dda:	2332      	movs	r3, #50	; 0x32
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dde:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	484f      	ldr	r0, [pc, #316]	; (8000f2c <MX_GPIO_Init+0x264>)
 8000df0:	f000 fd34 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4849      	ldr	r0, [pc, #292]	; (8000f30 <MX_GPIO_Init+0x268>)
 8000e0c:	f000 fd26 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e10:	2308      	movs	r3, #8
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e20:	2305      	movs	r3, #5
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4841      	ldr	r0, [pc, #260]	; (8000f30 <MX_GPIO_Init+0x268>)
 8000e2c:	f000 fd16 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e34:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	483c      	ldr	r0, [pc, #240]	; (8000f38 <MX_GPIO_Init+0x270>)
 8000e46:	f000 fd09 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4834      	ldr	r0, [pc, #208]	; (8000f38 <MX_GPIO_Init+0x270>)
 8000e66:	f000 fcf9 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	482d      	ldr	r0, [pc, #180]	; (8000f3c <MX_GPIO_Init+0x274>)
 8000e88:	f000 fce8 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e8c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e90:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4823      	ldr	r0, [pc, #140]	; (8000f34 <MX_GPIO_Init+0x26c>)
 8000ea6:	f000 fcd9 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000eaa:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ebc:	2306      	movs	r3, #6
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481a      	ldr	r0, [pc, #104]	; (8000f30 <MX_GPIO_Init+0x268>)
 8000ec8:	f000 fcc8 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4815      	ldr	r0, [pc, #84]	; (8000f38 <MX_GPIO_Init+0x270>)
 8000ee2:	f000 fcbb 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ee6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ef8:	230a      	movs	r3, #10
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_GPIO_Init+0x270>)
 8000f04:	f000 fcaa 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f08:	2320      	movs	r3, #32
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_GPIO_Init+0x26c>)
 8000f1c:	f000 fc9e 	bl	800185c <HAL_GPIO_Init>

}
 8000f20:	bf00      	nop
 8000f22:	3730      	adds	r7, #48	; 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400

08000f40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f46:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <MX_I2C1_Init+0x54>)
 8000f48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_I2C1_Init+0x58>)
 8000f4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f7e:	f000 feef 	bl	8001d60 <HAL_I2C_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f88:	f000 f92e 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000108 	.word	0x20000108
 8000f94:	40005400 	.word	0x40005400
 8000f98:	000186a0 	.word	0x000186a0

08000f9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_I2C_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12c      	bne.n	8001018 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8000fda:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fec:	2304      	movs	r3, #4
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480c      	ldr	r0, [pc, #48]	; (8001028 <HAL_I2C_MspInit+0x8c>)
 8000ff8:	f000 fc30 	bl	800185c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8001006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800100a:	6413      	str	r3, [r2, #64]	; 0x40
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_I2C_MspInit+0x88>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40005400 	.word	0x40005400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_I2C_MspDeInit+0x38>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10e      	bne.n	800105c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_I2C_MspDeInit+0x3c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a09      	ldr	r2, [pc, #36]	; (8001068 <HAL_I2C_MspDeInit+0x3c>)
 8001044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SCL_GPIO_Port, SCL_Pin);
 800104a:	2140      	movs	r1, #64	; 0x40
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <HAL_I2C_MspDeInit+0x40>)
 800104e:	f000 fd89 	bl	8001b64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SDA_GPIO_Port, SDA_Pin);
 8001052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_I2C_MspDeInit+0x40>)
 8001058:	f000 fd84 	bl	8001b64 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40005400 	.word	0x40005400
 8001068:	40023800 	.word	0x40023800
 800106c:	40020400 	.word	0x40020400

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f000 fa6d 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f84d 	bl	8001118 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LED_Init(LED3);
 800107e:	2001      	movs	r0, #1
 8001080:	f002 fb7a 	bl	8003778 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8001084:	2000      	movs	r0, #0
 8001086:	f002 fb77 	bl	8003778 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 800108a:	2002      	movs	r0, #2
 800108c:	f002 fb74 	bl	8003778 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8001090:	2003      	movs	r0, #3
 8001092:	f002 fb71 	bl	8003778 <BSP_LED_Init>
  BSP_ACCELERO_Init();
 8001096:	f002 fd81 	bl	8003b9c <BSP_ACCELERO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109a:	f7ff fe15 	bl	8000cc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800109e:	f7ff ff4f 	bl	8000f40 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010a2:	f000 f8a7 	bl	80011f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int16_t xyz[3]={0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	809a      	strh	r2, [r3, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_ACCELERO_GetXYZ(xyz);
 80010ae:	463b      	mov	r3, r7
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fe35 	bl	8003d20 <BSP_ACCELERO_GetXYZ>
	  printf("Received: %d, %d, %d", xyz[0],xyz[1],xyz[2]);
 80010b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010ba:	4619      	mov	r1, r3
 80010bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010c0:	461a      	mov	r2, r3
 80010c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <main+0xa4>)
 80010c8:	f002 fe88 	bl	8003ddc <iprintf>

	  BSP_LED_Off(LED3); //Orange OFF
 80010cc:	2001      	movs	r0, #1
 80010ce:	f002 fbe5 	bl	800389c <BSP_LED_Off>
	  BSP_LED_Off(LED4); //Green OFF
 80010d2:	2000      	movs	r0, #0
 80010d4:	f002 fbe2 	bl	800389c <BSP_LED_Off>
	  BSP_LED_Off(LED5); //Red OFF
 80010d8:	2002      	movs	r0, #2
 80010da:	f002 fbdf 	bl	800389c <BSP_LED_Off>
	  BSP_LED_Off(LED6); //Blue OFF
 80010de:	2003      	movs	r0, #3
 80010e0:	f002 fbdc 	bl	800389c <BSP_LED_Off>
	  // when x+ --> Red ON
      // when x- --> Green ON
      // when y+ --> Orange ON
      // when y- --> Blue ON

	  if (xyz[1]>0.0) {
 80010e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	dd03      	ble.n	80010f4 <main+0x84>
		  BSP_LED_On(LED3); //Orange
 80010ec:	2001      	movs	r0, #1
 80010ee:	f002 fbbb 	bl	8003868 <BSP_LED_On>
 80010f2:	e002      	b.n	80010fa <main+0x8a>
	  }
	  else {
		  BSP_LED_On(LED6); //Blue
 80010f4:	2003      	movs	r0, #3
 80010f6:	f002 fbb7 	bl	8003868 <BSP_LED_On>
	  }
	  if (xyz[0]>0.0) {
 80010fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dd03      	ble.n	800110a <main+0x9a>
		  BSP_LED_On(LED5); //Red
 8001102:	2002      	movs	r0, #2
 8001104:	f002 fbb0 	bl	8003868 <BSP_LED_On>
 8001108:	e7d1      	b.n	80010ae <main+0x3e>
	  }
	  else {
		  BSP_LED_On(LED4); //Green
 800110a:	2000      	movs	r0, #0
 800110c:	f002 fbac 	bl	8003868 <BSP_LED_On>
  {
 8001110:	e7cd      	b.n	80010ae <main+0x3e>
 8001112:	bf00      	nop
 8001114:	08004d10 	.word	0x08004d10

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	; 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	2230      	movs	r2, #48	; 0x30
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f002 fe50 	bl	8003dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <SystemClock_Config+0xc8>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <SystemClock_Config+0xc8>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <SystemClock_Config+0xc8>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <SystemClock_Config+0xcc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <SystemClock_Config+0xcc>)
 8001162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <SystemClock_Config+0xcc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117e:	2302      	movs	r3, #2
 8001180:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001188:	2304      	movs	r3, #4
 800118a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800118c:	23c0      	movs	r3, #192	; 0xc0
 800118e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001190:	2304      	movs	r3, #4
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001194:	2308      	movs	r3, #8
 8001196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001198:	f107 0320 	add.w	r3, r7, #32
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fddd 	bl	8002d5c <HAL_RCC_OscConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011a8:	f000 f81e 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ac:	230f      	movs	r3, #15
 80011ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b0:	2302      	movs	r3, #2
 80011b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	2103      	movs	r1, #3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 f83f 	bl	800324c <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011d4:	f000 f808 	bl	80011e8 <Error_Handler>
  }
}
 80011d8:	bf00      	nop
 80011da:	3750      	adds	r7, #80	; 0x50
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40007000 	.word	0x40007000

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_SPI1_Init+0x64>)
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <MX_SPI1_Init+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_SPI1_Init+0x64>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_SPI1_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_SPI1_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_SPI1_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_SPI1_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_SPI1_Init+0x64>)
 8001240:	220a      	movs	r2, #10
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_SPI1_Init+0x64>)
 8001246:	f002 fa0d 	bl	8003664 <HAL_SPI_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001250:	f7ff ffca 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2000015c 	.word	0x2000015c
 800125c:	40013000 	.word	0x40013000

08001260 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_SPI_MspInit+0x84>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12b      	bne.n	80012da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 800128c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_SPI_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012ba:	23e0      	movs	r3, #224	; 0xe0
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ca:	2305      	movs	r3, #5
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_SPI_MspInit+0x8c>)
 80012d6:	f000 fac1 	bl	800185c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40013000 	.word	0x40013000
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800132e:	2007      	movs	r0, #7
 8001330:	f000 fa52 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138c:	f000 f934 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e00a      	b.n	80013bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013a6:	f3af 8000 	nop.w
 80013aa:	4601      	mov	r1, r0
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf0      	blt.n	80013a6 <_read+0x12>
	}

return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e009      	b.n	80013f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf1      	blt.n	80013e0 <_write+0x12>
	}
	return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_close>:

int _close(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
	return -1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142e:	605a      	str	r2, [r3, #4]
	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_isatty>:

int _isatty(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	return 1;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
	return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f002 fc6a 	bl	8003d78 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20020000 	.word	0x20020000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	200001b4 	.word	0x200001b4
 80014d8:	20000228 	.word	0x20000228

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001506:	490e      	ldr	r1, [pc, #56]	; (8001540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800151c:	4c0b      	ldr	r4, [pc, #44]	; (800154c <LoopFillZerobss+0x26>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800152a:	f7ff ffd7 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800152e:	f002 fc29 	bl	8003d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff fd9d 	bl	8001070 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001544:	08004df0 	.word	0x08004df0
  ldr r2, =_sbss
 8001548:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 800154c:	20000224 	.word	0x20000224

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <HAL_Init+0x40>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_Init+0x40>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_Init+0x40>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f92b 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff feb2 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023c00 	.word	0x40023c00

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f943 	bl	8001842 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f000 f90b 	bl	80017ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000068 	.word	0x20000068
 80015f0:	20000070 	.word	0x20000070
 80015f4:	2000006c 	.word	0x2000006c

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000070 	.word	0x20000070
 800161c:	200001b8 	.word	0x200001b8

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	200001b8 	.word	0x200001b8

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db0b      	blt.n	80016c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	4907      	ldr	r1, [pc, #28]	; (80016d4 <__NVIC_EnableIRQ+0x38>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	2001      	movs	r0, #1
 80016be:	fa00 f202 	lsl.w	r2, r0, r2
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	; (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	; (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a4:	d301      	bcc.n	80017aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00f      	b.n	80017ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <SysTick_Config+0x40>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b2:	210f      	movs	r1, #15
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f7ff ff8e 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SysTick_Config+0x40>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x40>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff29 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff3e 	bl	8001680 <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff8e 	bl	800172c <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5d 	bl	80016d8 <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff31 	bl	800169c <__NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffa2 	bl	8001794 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	e159      	b.n	8001b2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001878:	2201      	movs	r2, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	429a      	cmp	r2, r3
 8001892:	f040 8148 	bne.w	8001b26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d005      	beq.n	80018ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d130      	bne.n	8001910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 0201 	and.w	r2, r3, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b03      	cmp	r3, #3
 800191a:	d017      	beq.n	800194c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d123      	bne.n	80019a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0203 	and.w	r2, r3, #3
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80a2 	beq.w	8001b26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b57      	ldr	r3, [pc, #348]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a56      	ldr	r2, [pc, #344]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b54      	ldr	r3, [pc, #336]	; (8001b44 <HAL_GPIO_Init+0x2e8>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fe:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_GPIO_Init+0x2ec>)
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a49      	ldr	r2, [pc, #292]	; (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d019      	beq.n	8001a5e <HAL_GPIO_Init+0x202>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a48      	ldr	r2, [pc, #288]	; (8001b50 <HAL_GPIO_Init+0x2f4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d013      	beq.n	8001a5a <HAL_GPIO_Init+0x1fe>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <HAL_GPIO_Init+0x2f8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d00d      	beq.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a46      	ldr	r2, [pc, #280]	; (8001b58 <HAL_GPIO_Init+0x2fc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d007      	beq.n	8001a52 <HAL_GPIO_Init+0x1f6>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a45      	ldr	r2, [pc, #276]	; (8001b5c <HAL_GPIO_Init+0x300>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d101      	bne.n	8001a4e <HAL_GPIO_Init+0x1f2>
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	e008      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a52:	2303      	movs	r3, #3
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x204>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f002 0203 	and.w	r2, r2, #3
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_GPIO_Init+0x2ec>)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aa2:	4a2f      	ldr	r2, [pc, #188]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ad2:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af6:	4a1a      	ldr	r2, [pc, #104]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_GPIO_Init+0x304>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	f67f aea2 	bls.w	8001878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40013800 	.word	0x40013800
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40013c00 	.word	0x40013c00

08001b64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e0bb      	b.n	8001cf8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	f040 80ab 	bne.w	8001cf2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001b9c:	4a5c      	ldr	r2, [pc, #368]	; (8001d10 <HAL_GPIO_DeInit+0x1ac>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a54      	ldr	r2, [pc, #336]	; (8001d14 <HAL_GPIO_DeInit+0x1b0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_DeInit+0x96>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a53      	ldr	r2, [pc, #332]	; (8001d18 <HAL_GPIO_DeInit+0x1b4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_DeInit+0x92>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a52      	ldr	r2, [pc, #328]	; (8001d1c <HAL_GPIO_DeInit+0x1b8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_DeInit+0x8e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a51      	ldr	r2, [pc, #324]	; (8001d20 <HAL_GPIO_DeInit+0x1bc>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_DeInit+0x8a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a50      	ldr	r2, [pc, #320]	; (8001d24 <HAL_GPIO_DeInit+0x1c0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_DeInit+0x86>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_DeInit+0x98>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_DeInit+0x98>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_DeInit+0x98>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_DeInit+0x98>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_DeInit+0x98>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d132      	bne.n	8001c72 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c0c:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <HAL_GPIO_DeInit+0x1c4>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4944      	ldr	r1, [pc, #272]	; (8001d28 <HAL_GPIO_DeInit+0x1c4>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c1a:	4b43      	ldr	r3, [pc, #268]	; (8001d28 <HAL_GPIO_DeInit+0x1c4>)
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4941      	ldr	r1, [pc, #260]	; (8001d28 <HAL_GPIO_DeInit+0x1c4>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001c28:	4b3f      	ldr	r3, [pc, #252]	; (8001d28 <HAL_GPIO_DeInit+0x1c4>)
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	493d      	ldr	r1, [pc, #244]	; (8001d28 <HAL_GPIO_DeInit+0x1c4>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c36:	4b3c      	ldr	r3, [pc, #240]	; (8001d28 <HAL_GPIO_DeInit+0x1c4>)
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	493a      	ldr	r1, [pc, #232]	; (8001d28 <HAL_GPIO_DeInit+0x1c4>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001c54:	4a2e      	ldr	r2, [pc, #184]	; (8001d10 <HAL_GPIO_DeInit+0x1ac>)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	43da      	mvns	r2, r3
 8001c64:	482a      	ldr	r0, [pc, #168]	; (8001d10 <HAL_GPIO_DeInit+0x1ac>)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	401a      	ands	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	08d2      	lsrs	r2, r2, #3
 8001ca8:	4019      	ands	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2103      	movs	r1, #3
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	2103      	movs	r1, #3
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	401a      	ands	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f af40 	bls.w	8001b80 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40013c00 	.word	0x40013c00

08001d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d3c:	787b      	ldrb	r3, [r7, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d48:	e003      	b.n	8001d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	041a      	lsls	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	619a      	str	r2, [r3, #24]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e12b      	b.n	8001fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff f908 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	; 0x24
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dc4:	f001 fc3a 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8001dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a81      	ldr	r2, [pc, #516]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d807      	bhi.n	8001de4 <HAL_I2C_Init+0x84>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a80      	ldr	r2, [pc, #512]	; (8001fd8 <HAL_I2C_Init+0x278>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bf94      	ite	ls
 8001ddc:	2301      	movls	r3, #1
 8001dde:	2300      	movhi	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e006      	b.n	8001df2 <HAL_I2C_Init+0x92>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a7d      	ldr	r2, [pc, #500]	; (8001fdc <HAL_I2C_Init+0x27c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0e7      	b.n	8001fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a78      	ldr	r2, [pc, #480]	; (8001fe0 <HAL_I2C_Init+0x280>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9b      	lsrs	r3, r3, #18
 8001e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a6a      	ldr	r2, [pc, #424]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d802      	bhi.n	8001e34 <HAL_I2C_Init+0xd4>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3301      	adds	r3, #1
 8001e32:	e009      	b.n	8001e48 <HAL_I2C_Init+0xe8>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	4a69      	ldr	r2, [pc, #420]	; (8001fe4 <HAL_I2C_Init+0x284>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	099b      	lsrs	r3, r3, #6
 8001e46:	3301      	adds	r3, #1
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	495c      	ldr	r1, [pc, #368]	; (8001fd4 <HAL_I2C_Init+0x274>)
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d819      	bhi.n	8001e9c <HAL_I2C_Init+0x13c>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e59      	subs	r1, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e76:	1c59      	adds	r1, r3, #1
 8001e78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e7c:	400b      	ands	r3, r1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_I2C_Init+0x138>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1e59      	subs	r1, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e96:	e051      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e04f      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <HAL_I2C_Init+0x168>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e012      	b.n	8001eee <HAL_I2C_Init+0x18e>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	0099      	lsls	r1, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_Init+0x196>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e022      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10e      	bne.n	8001f1c <HAL_I2C_Init+0x1bc>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e58      	subs	r0, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	440b      	add	r3, r1
 8001f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f1a:	e00f      	b.n	8001f3c <HAL_I2C_Init+0x1dc>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	6809      	ldr	r1, [r1, #0]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6911      	ldr	r1, [r2, #16]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68d2      	ldr	r2, [r2, #12]
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	000186a0 	.word	0x000186a0
 8001fd8:	001e847f 	.word	0x001e847f
 8001fdc:	003d08ff 	.word	0x003d08ff
 8001fe0:	431bde83 	.word	0x431bde83
 8001fe4:	10624dd3 	.word	0x10624dd3

08001fe8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e021      	b.n	800203e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2224      	movs	r2, #36	; 0x24
 8001ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff f80a 	bl	800102c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	461a      	mov	r2, r3
 8002056:	4603      	mov	r3, r0
 8002058:	817b      	strh	r3, [r7, #10]
 800205a:	460b      	mov	r3, r1
 800205c:	813b      	strh	r3, [r7, #8]
 800205e:	4613      	mov	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002062:	f7ff fadd 	bl	8001620 <HAL_GetTick>
 8002066:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b20      	cmp	r3, #32
 8002072:	f040 80d9 	bne.w	8002228 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2319      	movs	r3, #25
 800207c:	2201      	movs	r2, #1
 800207e:	496d      	ldr	r1, [pc, #436]	; (8002234 <HAL_I2C_Mem_Write+0x1ec>)
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fc8d 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
 800208e:	e0cc      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_I2C_Mem_Write+0x56>
 800209a:	2302      	movs	r3, #2
 800209c:	e0c5      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d007      	beq.n	80020c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2221      	movs	r2, #33	; 0x21
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a3a      	ldr	r2, [r7, #32]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <HAL_I2C_Mem_Write+0x1f0>)
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002106:	88f8      	ldrh	r0, [r7, #6]
 8002108:	893a      	ldrh	r2, [r7, #8]
 800210a:	8979      	ldrh	r1, [r7, #10]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	4603      	mov	r3, r0
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fac4 	bl	80026a4 <I2C_RequestMemoryWrite>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d052      	beq.n	80021c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e081      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fd0e 	bl	8002b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	2b04      	cmp	r3, #4
 800213c:	d107      	bne.n	800214e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06b      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b04      	cmp	r3, #4
 800218e:	d11b      	bne.n	80021c8 <HAL_I2C_Mem_Write+0x180>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	d017      	beq.n	80021c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1aa      	bne.n	8002126 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fcfa 	bl	8002bce <I2C_WaitOnBTFFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00d      	beq.n	80021fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d107      	bne.n	80021f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e016      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	00100002 	.word	0x00100002
 8002238:	ffff0000 	.word	0xffff0000

0800223c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	; 0x30
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	817b      	strh	r3, [r7, #10]
 800224e:	460b      	mov	r3, r1
 8002250:	813b      	strh	r3, [r7, #8]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002256:	f7ff f9e3 	bl	8001620 <HAL_GetTick>
 800225a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b20      	cmp	r3, #32
 8002266:	f040 8208 	bne.w	800267a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2319      	movs	r3, #25
 8002270:	2201      	movs	r2, #1
 8002272:	497b      	ldr	r1, [pc, #492]	; (8002460 <HAL_I2C_Mem_Read+0x224>)
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fb93 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
 8002282:	e1fb      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_I2C_Mem_Read+0x56>
 800228e:	2302      	movs	r3, #2
 8002290:	e1f4      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d007      	beq.n	80022b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2222      	movs	r2, #34	; 0x22
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a5b      	ldr	r2, [pc, #364]	; (8002464 <HAL_I2C_Mem_Read+0x228>)
 80022f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022fa:	88f8      	ldrh	r0, [r7, #6]
 80022fc:	893a      	ldrh	r2, [r7, #8]
 80022fe:	8979      	ldrh	r1, [r7, #10]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	4603      	mov	r3, r0
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fa60 	bl	80027d0 <I2C_RequestMemoryRead>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e1b0      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	2b00      	cmp	r3, #0
 8002320:	d113      	bne.n	800234a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	623b      	str	r3, [r7, #32]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	623b      	str	r3, [r7, #32]
 8002336:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e184      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	2b01      	cmp	r3, #1
 8002350:	d11b      	bne.n	800238a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002360:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e164      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238e:	2b02      	cmp	r3, #2
 8002390:	d11b      	bne.n	80023ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	e144      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023e0:	e138      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	f200 80f1 	bhi.w	80025ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d123      	bne.n	800243c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fc29 	bl	8002c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e139      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a
 800243a:	e10b      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	2b02      	cmp	r3, #2
 8002442:	d14e      	bne.n	80024e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	2200      	movs	r2, #0
 800244c:	4906      	ldr	r1, [pc, #24]	; (8002468 <HAL_I2C_Mem_Read+0x22c>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 faa6 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e10e      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
 800245e:	bf00      	nop
 8002460:	00100002 	.word	0x00100002
 8002464:	ffff0000 	.word	0xffff0000
 8002468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024e0:	e0b8      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e8:	2200      	movs	r2, #0
 80024ea:	4966      	ldr	r1, [pc, #408]	; (8002684 <HAL_I2C_Mem_Read+0x448>)
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fa57 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0bf      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	2200      	movs	r2, #0
 8002546:	494f      	ldr	r1, [pc, #316]	; (8002684 <HAL_I2C_Mem_Read+0x448>)
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fa29 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e091      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025cc:	e042      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fb3c 	bl	8002c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e04c      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b04      	cmp	r3, #4
 8002620:	d118      	bne.n	8002654 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f aec2 	bne.w	80023e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800267a:	2302      	movs	r3, #2
  }
}
 800267c:	4618      	mov	r0, r3
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	00010004 	.word	0x00010004

08002688 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002696:	b2db      	uxtb	r3, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	817b      	strh	r3, [r7, #10]
 80026b6:	460b      	mov	r3, r1
 80026b8:	813b      	strh	r3, [r7, #8]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f960 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00d      	beq.n	8002702 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f4:	d103      	bne.n	80026fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e05f      	b.n	80027c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002710:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	492d      	ldr	r1, [pc, #180]	; (80027cc <I2C_RequestMemoryWrite+0x128>)
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f998 	bl	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e04c      	b.n	80027c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	6a39      	ldr	r1, [r7, #32]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fa02 	bl	8002b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00d      	beq.n	800276a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b04      	cmp	r3, #4
 8002754:	d107      	bne.n	8002766 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002764:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e02b      	b.n	80027c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002770:	893b      	ldrh	r3, [r7, #8]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	611a      	str	r2, [r3, #16]
 800277a:	e021      	b.n	80027c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800277c:	893b      	ldrh	r3, [r7, #8]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	b29b      	uxth	r3, r3
 8002782:	b2da      	uxtb	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	6a39      	ldr	r1, [r7, #32]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f9dc 	bl	8002b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d107      	bne.n	80027b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e005      	b.n	80027c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027b6:	893b      	ldrh	r3, [r7, #8]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	00010002 	.word	0x00010002

080027d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	4608      	mov	r0, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	4603      	mov	r3, r0
 80027e0:	817b      	strh	r3, [r7, #10]
 80027e2:	460b      	mov	r3, r1
 80027e4:	813b      	strh	r3, [r7, #8]
 80027e6:	4613      	mov	r3, r2
 80027e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002808:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	2200      	movs	r2, #0
 8002812:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f8c2 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002830:	d103      	bne.n	800283a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0aa      	b.n	8002994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800284c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	6a3a      	ldr	r2, [r7, #32]
 8002852:	4952      	ldr	r1, [pc, #328]	; (800299c <I2C_RequestMemoryRead+0x1cc>)
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f8fa 	bl	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e097      	b.n	8002994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800287a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287c:	6a39      	ldr	r1, [r7, #32]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f964 	bl	8002b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00d      	beq.n	80028a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b04      	cmp	r3, #4
 8002890:	d107      	bne.n	80028a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e076      	b.n	8002994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028ac:	893b      	ldrh	r3, [r7, #8]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	611a      	str	r2, [r3, #16]
 80028b6:	e021      	b.n	80028fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028b8:	893b      	ldrh	r3, [r7, #8]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	b29b      	uxth	r3, r3
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c8:	6a39      	ldr	r1, [r7, #32]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f93e 	bl	8002b4c <I2C_WaitOnTXEFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d107      	bne.n	80028ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e050      	b.n	8002994 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028f2:	893b      	ldrh	r3, [r7, #8]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fe:	6a39      	ldr	r1, [r7, #32]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f923 	bl	8002b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	2b04      	cmp	r3, #4
 8002912:	d107      	bne.n	8002924 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e035      	b.n	8002994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002936:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	2200      	movs	r2, #0
 8002940:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f82b 	bl	80029a0 <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00d      	beq.n	800296c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295e:	d103      	bne.n	8002968 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e013      	b.n	8002994 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800296c:	897b      	ldrh	r3, [r7, #10]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	6a3a      	ldr	r2, [r7, #32]
 8002980:	4906      	ldr	r1, [pc, #24]	; (800299c <I2C_RequestMemoryRead+0x1cc>)
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f863 	bl	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	00010002 	.word	0x00010002

080029a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b0:	e025      	b.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d021      	beq.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7fe fe31 	bl	8001620 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d116      	bne.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e023      	b.n	8002a46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10d      	bne.n	8002a24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	e00c      	b.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d0b6      	beq.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a5c:	e051      	b.n	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6c:	d123      	bne.n	8002ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f043 0204 	orr.w	r2, r3, #4
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e046      	b.n	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d021      	beq.n	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7fe fdaf 	bl	8001620 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d116      	bne.n	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e020      	b.n	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d10c      	bne.n	8002b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	2300      	moveq	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	e00b      	b.n	8002b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d18d      	bne.n	8002a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b58:	e02d      	b.n	8002bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f8ce 	bl	8002cfc <I2C_IsAcknowledgeFailed>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e02d      	b.n	8002bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d021      	beq.n	8002bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7fe fd55 	bl	8001620 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d116      	bne.n	8002bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0220 	orr.w	r2, r3, #32
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e007      	b.n	8002bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d1ca      	bne.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bda:	e02d      	b.n	8002c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f88d 	bl	8002cfc <I2C_IsAcknowledgeFailed>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e02d      	b.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d021      	beq.n	8002c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf4:	f7fe fd14 	bl	8001620 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d116      	bne.n	8002c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e007      	b.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d1ca      	bne.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c5c:	e042      	b.n	8002ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d119      	bne.n	8002ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0210 	mvn.w	r2, #16
 8002c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e029      	b.n	8002cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca0:	f7fe fcbe 	bl	8001620 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d116      	bne.n	8002ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e007      	b.n	8002cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	2b40      	cmp	r3, #64	; 0x40
 8002cf0:	d1b5      	bne.n	8002c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d12:	d11b      	bne.n	8002d4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f043 0204 	orr.w	r2, r3, #4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e267      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d075      	beq.n	8002e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7a:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4b85      	ldr	r3, [pc, #532]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d112      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b82      	ldr	r3, [pc, #520]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	4b7e      	ldr	r3, [pc, #504]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x108>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d157      	bne.n	8002e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e242      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x74>
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a75      	ldr	r2, [pc, #468]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x98>
 8002dda:	4b70      	ldr	r3, [pc, #448]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6f      	ldr	r2, [pc, #444]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b6d      	ldr	r3, [pc, #436]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6c      	ldr	r2, [pc, #432]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002df4:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a68      	ldr	r2, [pc, #416]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a65      	ldr	r2, [pc, #404]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fc04 	bl	8001620 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fc00 	bl	8001620 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e207      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xc0>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fbf0 	bl	8001620 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe fbec 	bl	8001620 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1f3      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b51      	ldr	r3, [pc, #324]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0xe8>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e72:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1c7      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4937      	ldr	r1, [pc, #220]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fba5 	bl	8001620 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe fba1 	bl	8001620 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e1a8      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4925      	ldr	r1, [pc, #148]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fb84 	bl	8001620 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fe fb80 	bl	8001620 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e187      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d036      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_RCC_OscConfig+0x248>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe fb64 	bl	8001620 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe fb60 	bl	8001620 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e167      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x200>
 8002f7a:	e01b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_OscConfig+0x248>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fb4d 	bl	8001620 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	e00e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fb49 	bl	8001620 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d907      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e150      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	42470000 	.word	0x42470000
 8002fa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ea      	bne.n	8002f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8097 	beq.w	80030f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc6:	4b81      	ldr	r3, [pc, #516]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b7d      	ldr	r3, [pc, #500]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a7c      	ldr	r2, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b7a      	ldr	r3, [pc, #488]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b77      	ldr	r3, [pc, #476]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b74      	ldr	r3, [pc, #464]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a73      	ldr	r2, [pc, #460]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7fe fb09 	bl	8001620 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe fb05 	bl	8001620 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e10c      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x2ea>
 8003038:	4b64      	ldr	r3, [pc, #400]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a63      	ldr	r2, [pc, #396]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	e01c      	b.n	8003080 <HAL_RCC_OscConfig+0x324>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b05      	cmp	r3, #5
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x30c>
 800304e:	4b5f      	ldr	r3, [pc, #380]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a5e      	ldr	r2, [pc, #376]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
 800305a:	4b5c      	ldr	r3, [pc, #368]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a5b      	ldr	r2, [pc, #364]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0x324>
 8003068:	4b58      	ldr	r3, [pc, #352]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a57      	ldr	r2, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	4b55      	ldr	r3, [pc, #340]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a54      	ldr	r2, [pc, #336]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 0304 	bic.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe faca 	bl	8001620 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe fac6 	bl	8001620 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0cb      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	4b49      	ldr	r3, [pc, #292]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ee      	beq.n	8003090 <HAL_RCC_OscConfig+0x334>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fe fab4 	bl	8001620 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe fab0 	bl	8001620 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0b5      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d2:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ee      	bne.n	80030bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e4:	4b39      	ldr	r3, [pc, #228]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	4a38      	ldr	r2, [pc, #224]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a1 	beq.w	800323c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fa:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b08      	cmp	r3, #8
 8003104:	d05c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d141      	bne.n	8003192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe fa84 	bl	8001620 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe fa80 	bl	8001620 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e087      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b27      	ldr	r3, [pc, #156]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	3b01      	subs	r3, #1
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	491b      	ldr	r1, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe fa59 	bl	8001620 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003172:	f7fe fa55 	bl	8001620 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e05c      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x416>
 8003190:	e054      	b.n	800323c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe fa42 	bl	8001620 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe fa3e 	bl	8001620 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e045      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x444>
 80031be:	e03d      	b.n	800323c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e038      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40007000 	.word	0x40007000
 80031d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x4ec>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d028      	beq.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d121      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d11a      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800320e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003210:	4293      	cmp	r3, r2
 8003212:	d111      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	085b      	lsrs	r3, r3, #1
 8003220:	3b01      	subs	r3, #1
 8003222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d107      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800

0800324c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0cc      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b68      	ldr	r3, [pc, #416]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d90c      	bls.n	8003288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b65      	ldr	r3, [pc, #404]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0b8      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b50      	ldr	r3, [pc, #320]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	494d      	ldr	r1, [pc, #308]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d044      	beq.n	800336c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d119      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e07f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d003      	beq.n	800330a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	2b03      	cmp	r3, #3
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e06f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e067      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b37      	ldr	r3, [pc, #220]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4934      	ldr	r1, [pc, #208]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fe f970 	bl	8001620 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fe f96c 	bl	8001620 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e04f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d20c      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b22      	ldr	r3, [pc, #136]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e032      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4916      	ldr	r1, [pc, #88]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	490e      	ldr	r1, [pc, #56]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033d2:	f000 f821 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	490a      	ldr	r1, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1c8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe f8d0 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00
 8003408:	40023800 	.word	0x40023800
 800340c:	08004d28 	.word	0x08004d28
 8003410:	20000068 	.word	0x20000068
 8003414:	2000006c 	.word	0x2000006c

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800341c:	b094      	sub	sp, #80	; 0x50
 800341e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	647b      	str	r3, [r7, #68]	; 0x44
 8003424:	2300      	movs	r3, #0
 8003426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003428:	2300      	movs	r3, #0
 800342a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003430:	4b79      	ldr	r3, [pc, #484]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d00d      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x40>
 800343c:	2b08      	cmp	r3, #8
 800343e:	f200 80e1 	bhi.w	8003604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x34>
 8003446:	2b04      	cmp	r3, #4
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x3a>
 800344a:	e0db      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b73      	ldr	r3, [pc, #460]	; (800361c <HAL_RCC_GetSysClockFreq+0x204>)
 800344e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003450:	e0db      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003452:	4b73      	ldr	r3, [pc, #460]	; (8003620 <HAL_RCC_GetSysClockFreq+0x208>)
 8003454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003456:	e0d8      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003460:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003462:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d063      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346e:	4b6a      	ldr	r3, [pc, #424]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	2200      	movs	r2, #0
 8003476:	63bb      	str	r3, [r7, #56]	; 0x38
 8003478:	63fa      	str	r2, [r7, #60]	; 0x3c
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003480:	633b      	str	r3, [r7, #48]	; 0x30
 8003482:	2300      	movs	r3, #0
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
 8003486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	f04f 0000 	mov.w	r0, #0
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	0159      	lsls	r1, r3, #5
 8003498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800349c:	0150      	lsls	r0, r2, #5
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4621      	mov	r1, r4
 80034a4:	1a51      	subs	r1, r2, r1
 80034a6:	6139      	str	r1, [r7, #16]
 80034a8:	4629      	mov	r1, r5
 80034aa:	eb63 0301 	sbc.w	r3, r3, r1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034bc:	4659      	mov	r1, fp
 80034be:	018b      	lsls	r3, r1, #6
 80034c0:	4651      	mov	r1, sl
 80034c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c6:	4651      	mov	r1, sl
 80034c8:	018a      	lsls	r2, r1, #6
 80034ca:	4651      	mov	r1, sl
 80034cc:	ebb2 0801 	subs.w	r8, r2, r1
 80034d0:	4659      	mov	r1, fp
 80034d2:	eb63 0901 	sbc.w	r9, r3, r1
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ea:	4690      	mov	r8, r2
 80034ec:	4699      	mov	r9, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	eb18 0303 	adds.w	r3, r8, r3
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	462b      	mov	r3, r5
 80034f8:	eb49 0303 	adc.w	r3, r9, r3
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800350a:	4629      	mov	r1, r5
 800350c:	024b      	lsls	r3, r1, #9
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003514:	4621      	mov	r1, r4
 8003516:	024a      	lsls	r2, r1, #9
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	2200      	movs	r2, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 8003522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003528:	f7fc feaa 	bl	8000280 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003534:	e058      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b38      	ldr	r3, [pc, #224]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	4618      	mov	r0, r3
 8003540:	4611      	mov	r1, r2
 8003542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	0159      	lsls	r1, r3, #5
 800355e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003562:	0150      	lsls	r0, r2, #5
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4641      	mov	r1, r8
 800356a:	ebb2 0a01 	subs.w	sl, r2, r1
 800356e:	4649      	mov	r1, r9
 8003570:	eb63 0b01 	sbc.w	fp, r3, r1
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003588:	ebb2 040a 	subs.w	r4, r2, sl
 800358c:	eb63 050b 	sbc.w	r5, r3, fp
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	00eb      	lsls	r3, r5, #3
 800359a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359e:	00e2      	lsls	r2, r4, #3
 80035a0:	4614      	mov	r4, r2
 80035a2:	461d      	mov	r5, r3
 80035a4:	4643      	mov	r3, r8
 80035a6:	18e3      	adds	r3, r4, r3
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	464b      	mov	r3, r9
 80035ac:	eb45 0303 	adc.w	r3, r5, r3
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035be:	4629      	mov	r1, r5
 80035c0:	028b      	lsls	r3, r1, #10
 80035c2:	4621      	mov	r1, r4
 80035c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c8:	4621      	mov	r1, r4
 80035ca:	028a      	lsls	r2, r1, #10
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d2:	2200      	movs	r2, #0
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	61fa      	str	r2, [r7, #28]
 80035d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035dc:	f7fc fe50 	bl	8000280 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4613      	mov	r3, r2
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	3301      	adds	r3, #1
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003602:	e002      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_GetSysClockFreq+0x204>)
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800360c:	4618      	mov	r0, r3
 800360e:	3750      	adds	r7, #80	; 0x50
 8003610:	46bd      	mov	sp, r7
 8003612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	00f42400 	.word	0x00f42400
 8003620:	007a1200 	.word	0x007a1200

08003624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <HAL_RCC_GetHCLKFreq+0x14>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20000068 	.word	0x20000068

0800363c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003640:	f7ff fff0 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0a9b      	lsrs	r3, r3, #10
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40023800 	.word	0x40023800
 8003660:	08004d38 	.word	0x08004d38

08003664 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e07b      	b.n	800376e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003686:	d009      	beq.n	800369c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	61da      	str	r2, [r3, #28]
 800368e:	e005      	b.n	800369c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd fdd2 	bl	8001260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	ea42 0103 	orr.w	r1, r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 0104 	and.w	r1, r3, #4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	f003 0210 	and.w	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800375c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	; 0x30
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10e      	bne.n	80037a6 <BSP_LED_Init+0x2e>
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	4b33      	ldr	r3, [pc, #204]	; (800385c <BSP_LED_Init+0xe4>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	4a32      	ldr	r2, [pc, #200]	; (800385c <BSP_LED_Init+0xe4>)
 8003792:	f043 0308 	orr.w	r3, r3, #8
 8003796:	6313      	str	r3, [r2, #48]	; 0x30
 8003798:	4b30      	ldr	r3, [pc, #192]	; (800385c <BSP_LED_Init+0xe4>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	e034      	b.n	8003810 <BSP_LED_Init+0x98>
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10e      	bne.n	80037ca <BSP_LED_Init+0x52>
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	4b2a      	ldr	r3, [pc, #168]	; (800385c <BSP_LED_Init+0xe4>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	4a29      	ldr	r2, [pc, #164]	; (800385c <BSP_LED_Init+0xe4>)
 80037b6:	f043 0308 	orr.w	r3, r3, #8
 80037ba:	6313      	str	r3, [r2, #48]	; 0x30
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <BSP_LED_Init+0xe4>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	e022      	b.n	8003810 <BSP_LED_Init+0x98>
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d10e      	bne.n	80037ee <BSP_LED_Init+0x76>
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	4b21      	ldr	r3, [pc, #132]	; (800385c <BSP_LED_Init+0xe4>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	4a20      	ldr	r2, [pc, #128]	; (800385c <BSP_LED_Init+0xe4>)
 80037da:	f043 0308 	orr.w	r3, r3, #8
 80037de:	6313      	str	r3, [r2, #48]	; 0x30
 80037e0:	4b1e      	ldr	r3, [pc, #120]	; (800385c <BSP_LED_Init+0xe4>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	e010      	b.n	8003810 <BSP_LED_Init+0x98>
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d10d      	bne.n	8003810 <BSP_LED_Init+0x98>
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	4b18      	ldr	r3, [pc, #96]	; (800385c <BSP_LED_Init+0xe4>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	4a17      	ldr	r2, [pc, #92]	; (800385c <BSP_LED_Init+0xe4>)
 80037fe:	f043 0308 	orr.w	r3, r3, #8
 8003802:	6313      	str	r3, [r2, #48]	; 0x30
 8003804:	4b15      	ldr	r3, [pc, #84]	; (800385c <BSP_LED_Init+0xe4>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	4a13      	ldr	r2, [pc, #76]	; (8003860 <BSP_LED_Init+0xe8>)
 8003814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800381a:	2301      	movs	r3, #1
 800381c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800381e:	2301      	movs	r3, #1
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003822:	2302      	movs	r3, #2
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <BSP_LED_Init+0xec>)
 800382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382e:	f107 021c 	add.w	r2, r7, #28
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe f811 	bl	800185c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	4a09      	ldr	r2, [pc, #36]	; (8003864 <BSP_LED_Init+0xec>)
 800383e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	4a06      	ldr	r2, [pc, #24]	; (8003860 <BSP_LED_Init+0xe8>)
 8003846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800384a:	2200      	movs	r2, #0
 800384c:	4619      	mov	r1, r3
 800384e:	f7fe fa6d 	bl	8001d2c <HAL_GPIO_WritePin>
}
 8003852:	bf00      	nop
 8003854:	3730      	adds	r7, #48	; 0x30
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800
 8003860:	08004d40 	.word	0x08004d40
 8003864:	20000074 	.word	0x20000074

08003868 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	4a07      	ldr	r2, [pc, #28]	; (8003894 <BSP_LED_On+0x2c>)
 8003876:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	4a06      	ldr	r2, [pc, #24]	; (8003898 <BSP_LED_On+0x30>)
 800387e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003882:	2201      	movs	r2, #1
 8003884:	4619      	mov	r1, r3
 8003886:	f7fe fa51 	bl	8001d2c <HAL_GPIO_WritePin>
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000074 	.word	0x20000074
 8003898:	08004d40 	.word	0x08004d40

0800389c <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <BSP_LED_Off+0x2c>)
 80038aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	4a06      	ldr	r2, [pc, #24]	; (80038cc <BSP_LED_Off+0x30>)
 80038b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038b6:	2200      	movs	r2, #0
 80038b8:	4619      	mov	r1, r3
 80038ba:	f7fe fa37 	bl	8001d2c <HAL_GPIO_WritePin>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000074 	.word	0x20000074
 80038cc:	08004d40 	.word	0x08004d40

080038d0 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80038d4:	4814      	ldr	r0, [pc, #80]	; (8003928 <I2Cx_Init+0x58>)
 80038d6:	f7fe fed7 	bl	8002688 <HAL_I2C_GetState>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d121      	bne.n	8003924 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <I2Cx_Init+0x58>)
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <I2Cx_Init+0x5c>)
 80038e4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <I2Cx_Init+0x58>)
 80038e8:	2243      	movs	r2, #67	; 0x43
 80038ea:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <I2Cx_Init+0x58>)
 80038ee:	4a10      	ldr	r2, [pc, #64]	; (8003930 <I2Cx_Init+0x60>)
 80038f0:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <I2Cx_Init+0x58>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <I2Cx_Init+0x58>)
 80038fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038fe:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <I2Cx_Init+0x58>)
 8003902:	2200      	movs	r2, #0
 8003904:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <I2Cx_Init+0x58>)
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <I2Cx_Init+0x58>)
 800390e:	2200      	movs	r2, #0
 8003910:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <I2Cx_Init+0x58>)
 8003914:	2200      	movs	r2, #0
 8003916:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003918:	4803      	ldr	r0, [pc, #12]	; (8003928 <I2Cx_Init+0x58>)
 800391a:	f000 f86b 	bl	80039f4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800391e:	4802      	ldr	r0, [pc, #8]	; (8003928 <I2Cx_Init+0x58>)
 8003920:	f7fe fa1e 	bl	8001d60 <HAL_I2C_Init>
  }
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}
 8003928:	200001bc 	.word	0x200001bc
 800392c:	40005400 	.word	0x40005400
 8003930:	000186a0 	.word	0x000186a0

08003934 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af04      	add	r7, sp, #16
 800393a:	4603      	mov	r3, r0
 800393c:	80fb      	strh	r3, [r7, #6]
 800393e:	460b      	mov	r3, r1
 8003940:	717b      	strb	r3, [r7, #5]
 8003942:	4613      	mov	r3, r2
 8003944:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800394a:	797b      	ldrb	r3, [r7, #5]
 800394c:	b29a      	uxth	r2, r3
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <I2Cx_WriteData+0x48>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	88f9      	ldrh	r1, [r7, #6]
 8003954:	9302      	str	r3, [sp, #8]
 8003956:	2301      	movs	r3, #1
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2301      	movs	r3, #1
 8003960:	4807      	ldr	r0, [pc, #28]	; (8003980 <I2Cx_WriteData+0x4c>)
 8003962:	f7fe fb71 	bl	8002048 <HAL_I2C_Mem_Write>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8003970:	f000 f834 	bl	80039dc <I2Cx_Error>
  }
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000084 	.word	0x20000084
 8003980:	200001bc 	.word	0x200001bc

08003984 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af04      	add	r7, sp, #16
 800398a:	4603      	mov	r3, r0
 800398c:	460a      	mov	r2, r1
 800398e:	80fb      	strh	r3, [r7, #6]
 8003990:	4613      	mov	r3, r2
 8003992:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800399c:	797b      	ldrb	r3, [r7, #5]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <I2Cx_ReadData+0x50>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	88f9      	ldrh	r1, [r7, #6]
 80039a6:	9302      	str	r3, [sp, #8]
 80039a8:	2301      	movs	r3, #1
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	f107 030e 	add.w	r3, r7, #14
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2301      	movs	r3, #1
 80039b4:	4808      	ldr	r0, [pc, #32]	; (80039d8 <I2Cx_ReadData+0x54>)
 80039b6:	f7fe fc41 	bl	800223c <HAL_I2C_Mem_Read>
 80039ba:	4603      	mov	r3, r0
 80039bc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80039c4:	f000 f80a 	bl	80039dc <I2Cx_Error>
  }
  return value;
 80039c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000084 	.word	0x20000084
 80039d8:	200001bc 	.word	0x200001bc

080039dc <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80039e0:	4803      	ldr	r0, [pc, #12]	; (80039f0 <I2Cx_Error+0x14>)
 80039e2:	f7fe fb01 	bl	8001fe8 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80039e6:	f7ff ff73 	bl	80038d0 <I2Cx_Init>
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	200001bc 	.word	0x200001bc

080039f4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 80039fc:	2300      	movs	r3, #0
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <I2Cx_MspInit+0xa4>)
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <I2Cx_MspInit+0xa4>)
 8003a06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <I2Cx_MspInit+0xa4>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <I2Cx_MspInit+0xa4>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <I2Cx_MspInit+0xa4>)
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	6313      	str	r3, [r2, #48]	; 0x30
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <I2Cx_MspInit+0xa4>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8003a34:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8003a3a:	2312      	movs	r3, #18
 8003a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003a42:	2302      	movs	r3, #2
 8003a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8003a46:	2304      	movs	r3, #4
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8003a4a:	f107 0314 	add.w	r3, r7, #20
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4812      	ldr	r0, [pc, #72]	; (8003a9c <I2Cx_MspInit+0xa8>)
 8003a52:	f7fd ff03 	bl	800185c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <I2Cx_MspInit+0xa4>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <I2Cx_MspInit+0xa4>)
 8003a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a60:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <I2Cx_MspInit+0xa4>)
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <I2Cx_MspInit+0xa4>)
 8003a68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a6c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	210f      	movs	r1, #15
 8003a72:	201f      	movs	r0, #31
 8003a74:	f7fd febb 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003a78:	201f      	movs	r0, #31
 8003a7a:	f7fd fed4 	bl	8001826 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	210f      	movs	r1, #15
 8003a82:	2020      	movs	r0, #32
 8003a84:	f7fd feb3 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8003a88:	2020      	movs	r0, #32
 8003a8a:	f7fd fecc 	bl	8001826 <HAL_NVIC_EnableIRQ>
}
 8003a8e:	bf00      	nop
 8003a90:	3728      	adds	r7, #40	; 0x28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40020400 	.word	0x40020400

08003aa0 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <COMPASSACCELERO_IO_Init+0x48>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <COMPASSACCELERO_IO_Init+0x48>)
 8003ab0:	f043 0310 	orr.w	r3, r3, #16
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <COMPASSACCELERO_IO_Init+0x48>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8003ad2:	1d3b      	adds	r3, r7, #4
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4805      	ldr	r0, [pc, #20]	; (8003aec <COMPASSACCELERO_IO_Init+0x4c>)
 8003ad8:	f7fd fec0 	bl	800185c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8003adc:	f7ff fef8 	bl	80038d0 <I2Cx_Init>
}
 8003ae0:	bf00      	nop
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40021000 	.word	0x40021000

08003af0 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003b00:	f043 0310 	orr.w	r3, r3, #16
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8003b12:	2330      	movs	r3, #48	; 0x30
 8003b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8003b16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003b1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003b24:	1d3b      	adds	r3, r7, #4
 8003b26:	4619      	mov	r1, r3
 8003b28:	4808      	ldr	r0, [pc, #32]	; (8003b4c <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8003b2a:	f7fd fe97 	bl	800185c <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8003b2e:	2200      	movs	r2, #0
 8003b30:	210f      	movs	r1, #15
 8003b32:	200a      	movs	r0, #10
 8003b34:	f7fd fe5b 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8003b38:	200a      	movs	r0, #10
 8003b3a:	f7fd fe74 	bl	8001826 <HAL_NVIC_EnableIRQ>
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40021000 	.word	0x40021000

08003b50 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	80fb      	strh	r3, [r7, #6]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	717b      	strb	r3, [r7, #5]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8003b62:	793a      	ldrb	r2, [r7, #4]
 8003b64:	7979      	ldrb	r1, [r7, #5]
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fee3 	bl	8003934 <I2Cx_WriteData>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	460a      	mov	r2, r1
 8003b80:	80fb      	strh	r3, [r7, #6]
 8003b82:	4613      	mov	r3, r2
 8003b84:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8003b86:	797a      	ldrb	r2, [r7, #5]
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff fef9 	bl	8003984 <I2Cx_ReadData>
 8003b92:	4603      	mov	r3, r0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8003bb2:	4b58      	ldr	r3, [pc, #352]	; (8003d14 <BSP_ACCELERO_Init+0x178>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4798      	blx	r3
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b33      	cmp	r3, #51	; 0x33
 8003bbc:	d14f      	bne.n	8003c5e <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8003bbe:	4b56      	ldr	r3, [pc, #344]	; (8003d18 <BSP_ACCELERO_Init+0x17c>)
 8003bc0:	4a54      	ldr	r2, [pc, #336]	; (8003d14 <BSP_ACCELERO_Init+0x178>)
 8003bc2:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_400_HZ; //Cambiar freq de muestro del acc
 8003bc8:	2370      	movs	r3, #112	; 0x70
 8003bca:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8003bcc:	2307      	movs	r3, #7
 8003bce:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_8G; //Cambiar la sensibilidad del acc
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8003bdc:	2308      	movs	r3, #8
 8003bde:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003be0:	7b3a      	ldrb	r2, [r7, #12]
 8003be2:	7b7b      	ldrb	r3, [r7, #13]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003be8:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003bea:	4313      	orrs	r3, r2
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	8abb      	ldrh	r3, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003bf6:	7c3a      	ldrb	r2, [r7, #16]
 8003bf8:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	7cbb      	ldrb	r3, [r7, #18]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003c0c:	b21a      	sxth	r2, r3
 8003c0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003c18:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <BSP_ACCELERO_Init+0x17c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	8aba      	ldrh	r2, [r7, #20]
 8003c20:	4610      	mov	r0, r2
 8003c22:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8003c28:	2310      	movs	r3, #16
 8003c2a:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003c34:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8003c36:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8003c3c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003c42:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8003c4a:	4b33      	ldr	r3, [pc, #204]	; (8003d18 <BSP_ACCELERO_Init+0x17c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	8aba      	ldrh	r2, [r7, #20]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	4610      	mov	r0, r2
 8003c56:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
 8003c5c:	e054      	b.n	8003d08 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <BSP_ACCELERO_Init+0x180>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	4798      	blx	r3
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b33      	cmp	r3, #51	; 0x33
 8003c68:	d14e      	bne.n	8003d08 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <BSP_ACCELERO_Init+0x17c>)
 8003c6c:	4a2b      	ldr	r2, [pc, #172]	; (8003d1c <BSP_ACCELERO_Init+0x180>)
 8003c6e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_400_HZ; //Cambiar freq de muestro del acc
 8003c74:	2370      	movs	r3, #112	; 0x70
 8003c76:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8003c78:	2307      	movs	r3, #7
 8003c7a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_8G; //Cambiar la sensibilidad del acc
 8003c7c:	2320      	movs	r3, #32
 8003c7e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8003c80:	2300      	movs	r3, #0
 8003c82:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8003c84:	2300      	movs	r3, #0
 8003c86:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8003c88:	2308      	movs	r3, #8
 8003c8a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003c8c:	7b3a      	ldrb	r2, [r7, #12]
 8003c8e:	7b7b      	ldrb	r3, [r7, #13]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	8abb      	ldrh	r3, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003ca2:	7c3a      	ldrb	r2, [r7, #16]
 8003ca4:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	7cbb      	ldrb	r3, [r7, #18]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003cb8:	b21a      	sxth	r2, r3
 8003cba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <BSP_ACCELERO_Init+0x17c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	8aba      	ldrh	r2, [r7, #20]
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003ce0:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8003ce2:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8003ce8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003cea:	4313      	orrs	r3, r2
 8003cec:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003cee:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <BSP_ACCELERO_Init+0x17c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	8aba      	ldrh	r2, [r7, #20]
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	4610      	mov	r0, r2
 8003d02:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000034 	.word	0x20000034
 8003d18:	20000210 	.word	0x20000210
 8003d1c:	20000000 	.word	0x20000000

08003d20 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8003d2c:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <BSP_ACCELERO_GetXYZ+0x50>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d018      	beq.n	8003d68 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <BSP_ACCELERO_GetXYZ+0x50>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <BSP_ACCELERO_GetXYZ+0x50>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0b      	ldr	r2, [pc, #44]	; (8003d74 <BSP_ACCELERO_GetXYZ+0x54>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d10e      	bne.n	8003d68 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8003d5a:	89fb      	ldrh	r3, [r7, #14]
 8003d5c:	425b      	negs	r3, r3
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3302      	adds	r3, #2
 8003d64:	b212      	sxth	r2, r2
 8003d66:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8003d68:	bf00      	nop
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000210 	.word	0x20000210
 8003d74:	20000034 	.word	0x20000034

08003d78 <__errno>:
 8003d78:	4b01      	ldr	r3, [pc, #4]	; (8003d80 <__errno+0x8>)
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000088 	.word	0x20000088

08003d84 <__libc_init_array>:
 8003d84:	b570      	push	{r4, r5, r6, lr}
 8003d86:	4d0d      	ldr	r5, [pc, #52]	; (8003dbc <__libc_init_array+0x38>)
 8003d88:	4c0d      	ldr	r4, [pc, #52]	; (8003dc0 <__libc_init_array+0x3c>)
 8003d8a:	1b64      	subs	r4, r4, r5
 8003d8c:	10a4      	asrs	r4, r4, #2
 8003d8e:	2600      	movs	r6, #0
 8003d90:	42a6      	cmp	r6, r4
 8003d92:	d109      	bne.n	8003da8 <__libc_init_array+0x24>
 8003d94:	4d0b      	ldr	r5, [pc, #44]	; (8003dc4 <__libc_init_array+0x40>)
 8003d96:	4c0c      	ldr	r4, [pc, #48]	; (8003dc8 <__libc_init_array+0x44>)
 8003d98:	f000 ffae 	bl	8004cf8 <_init>
 8003d9c:	1b64      	subs	r4, r4, r5
 8003d9e:	10a4      	asrs	r4, r4, #2
 8003da0:	2600      	movs	r6, #0
 8003da2:	42a6      	cmp	r6, r4
 8003da4:	d105      	bne.n	8003db2 <__libc_init_array+0x2e>
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dac:	4798      	blx	r3
 8003dae:	3601      	adds	r6, #1
 8003db0:	e7ee      	b.n	8003d90 <__libc_init_array+0xc>
 8003db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db6:	4798      	blx	r3
 8003db8:	3601      	adds	r6, #1
 8003dba:	e7f2      	b.n	8003da2 <__libc_init_array+0x1e>
 8003dbc:	08004de8 	.word	0x08004de8
 8003dc0:	08004de8 	.word	0x08004de8
 8003dc4:	08004de8 	.word	0x08004de8
 8003dc8:	08004dec 	.word	0x08004dec

08003dcc <memset>:
 8003dcc:	4402      	add	r2, r0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d100      	bne.n	8003dd6 <memset+0xa>
 8003dd4:	4770      	bx	lr
 8003dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dda:	e7f9      	b.n	8003dd0 <memset+0x4>

08003ddc <iprintf>:
 8003ddc:	b40f      	push	{r0, r1, r2, r3}
 8003dde:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <iprintf+0x2c>)
 8003de0:	b513      	push	{r0, r1, r4, lr}
 8003de2:	681c      	ldr	r4, [r3, #0]
 8003de4:	b124      	cbz	r4, 8003df0 <iprintf+0x14>
 8003de6:	69a3      	ldr	r3, [r4, #24]
 8003de8:	b913      	cbnz	r3, 8003df0 <iprintf+0x14>
 8003dea:	4620      	mov	r0, r4
 8003dec:	f000 f866 	bl	8003ebc <__sinit>
 8003df0:	ab05      	add	r3, sp, #20
 8003df2:	9a04      	ldr	r2, [sp, #16]
 8003df4:	68a1      	ldr	r1, [r4, #8]
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	4620      	mov	r0, r4
 8003dfa:	f000 f9bd 	bl	8004178 <_vfiprintf_r>
 8003dfe:	b002      	add	sp, #8
 8003e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e04:	b004      	add	sp, #16
 8003e06:	4770      	bx	lr
 8003e08:	20000088 	.word	0x20000088

08003e0c <std>:
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	b510      	push	{r4, lr}
 8003e10:	4604      	mov	r4, r0
 8003e12:	e9c0 3300 	strd	r3, r3, [r0]
 8003e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e1a:	6083      	str	r3, [r0, #8]
 8003e1c:	8181      	strh	r1, [r0, #12]
 8003e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8003e20:	81c2      	strh	r2, [r0, #14]
 8003e22:	6183      	str	r3, [r0, #24]
 8003e24:	4619      	mov	r1, r3
 8003e26:	2208      	movs	r2, #8
 8003e28:	305c      	adds	r0, #92	; 0x5c
 8003e2a:	f7ff ffcf 	bl	8003dcc <memset>
 8003e2e:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <std+0x38>)
 8003e30:	6263      	str	r3, [r4, #36]	; 0x24
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <std+0x3c>)
 8003e34:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <std+0x40>)
 8003e38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <std+0x44>)
 8003e3c:	6224      	str	r4, [r4, #32]
 8003e3e:	6323      	str	r3, [r4, #48]	; 0x30
 8003e40:	bd10      	pop	{r4, pc}
 8003e42:	bf00      	nop
 8003e44:	08004721 	.word	0x08004721
 8003e48:	08004743 	.word	0x08004743
 8003e4c:	0800477b 	.word	0x0800477b
 8003e50:	0800479f 	.word	0x0800479f

08003e54 <_cleanup_r>:
 8003e54:	4901      	ldr	r1, [pc, #4]	; (8003e5c <_cleanup_r+0x8>)
 8003e56:	f000 b8af 	b.w	8003fb8 <_fwalk_reent>
 8003e5a:	bf00      	nop
 8003e5c:	08004a79 	.word	0x08004a79

08003e60 <__sfmoreglue>:
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	2268      	movs	r2, #104	; 0x68
 8003e64:	1e4d      	subs	r5, r1, #1
 8003e66:	4355      	muls	r5, r2
 8003e68:	460e      	mov	r6, r1
 8003e6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e6e:	f000 f8e5 	bl	800403c <_malloc_r>
 8003e72:	4604      	mov	r4, r0
 8003e74:	b140      	cbz	r0, 8003e88 <__sfmoreglue+0x28>
 8003e76:	2100      	movs	r1, #0
 8003e78:	e9c0 1600 	strd	r1, r6, [r0]
 8003e7c:	300c      	adds	r0, #12
 8003e7e:	60a0      	str	r0, [r4, #8]
 8003e80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e84:	f7ff ffa2 	bl	8003dcc <memset>
 8003e88:	4620      	mov	r0, r4
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}

08003e8c <__sfp_lock_acquire>:
 8003e8c:	4801      	ldr	r0, [pc, #4]	; (8003e94 <__sfp_lock_acquire+0x8>)
 8003e8e:	f000 b8b3 	b.w	8003ff8 <__retarget_lock_acquire_recursive>
 8003e92:	bf00      	nop
 8003e94:	20000215 	.word	0x20000215

08003e98 <__sfp_lock_release>:
 8003e98:	4801      	ldr	r0, [pc, #4]	; (8003ea0 <__sfp_lock_release+0x8>)
 8003e9a:	f000 b8ae 	b.w	8003ffa <__retarget_lock_release_recursive>
 8003e9e:	bf00      	nop
 8003ea0:	20000215 	.word	0x20000215

08003ea4 <__sinit_lock_acquire>:
 8003ea4:	4801      	ldr	r0, [pc, #4]	; (8003eac <__sinit_lock_acquire+0x8>)
 8003ea6:	f000 b8a7 	b.w	8003ff8 <__retarget_lock_acquire_recursive>
 8003eaa:	bf00      	nop
 8003eac:	20000216 	.word	0x20000216

08003eb0 <__sinit_lock_release>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	; (8003eb8 <__sinit_lock_release+0x8>)
 8003eb2:	f000 b8a2 	b.w	8003ffa <__retarget_lock_release_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	20000216 	.word	0x20000216

08003ebc <__sinit>:
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	f7ff fff0 	bl	8003ea4 <__sinit_lock_acquire>
 8003ec4:	69a3      	ldr	r3, [r4, #24]
 8003ec6:	b11b      	cbz	r3, 8003ed0 <__sinit+0x14>
 8003ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ecc:	f7ff bff0 	b.w	8003eb0 <__sinit_lock_release>
 8003ed0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ed4:	6523      	str	r3, [r4, #80]	; 0x50
 8003ed6:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <__sinit+0x68>)
 8003ed8:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <__sinit+0x6c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ede:	42a3      	cmp	r3, r4
 8003ee0:	bf04      	itt	eq
 8003ee2:	2301      	moveq	r3, #1
 8003ee4:	61a3      	streq	r3, [r4, #24]
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f000 f820 	bl	8003f2c <__sfp>
 8003eec:	6060      	str	r0, [r4, #4]
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f000 f81c 	bl	8003f2c <__sfp>
 8003ef4:	60a0      	str	r0, [r4, #8]
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	f000 f818 	bl	8003f2c <__sfp>
 8003efc:	2200      	movs	r2, #0
 8003efe:	60e0      	str	r0, [r4, #12]
 8003f00:	2104      	movs	r1, #4
 8003f02:	6860      	ldr	r0, [r4, #4]
 8003f04:	f7ff ff82 	bl	8003e0c <std>
 8003f08:	68a0      	ldr	r0, [r4, #8]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	2109      	movs	r1, #9
 8003f0e:	f7ff ff7d 	bl	8003e0c <std>
 8003f12:	68e0      	ldr	r0, [r4, #12]
 8003f14:	2202      	movs	r2, #2
 8003f16:	2112      	movs	r1, #18
 8003f18:	f7ff ff78 	bl	8003e0c <std>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	61a3      	str	r3, [r4, #24]
 8003f20:	e7d2      	b.n	8003ec8 <__sinit+0xc>
 8003f22:	bf00      	nop
 8003f24:	08004d48 	.word	0x08004d48
 8003f28:	08003e55 	.word	0x08003e55

08003f2c <__sfp>:
 8003f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2e:	4607      	mov	r7, r0
 8003f30:	f7ff ffac 	bl	8003e8c <__sfp_lock_acquire>
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <__sfp+0x84>)
 8003f36:	681e      	ldr	r6, [r3, #0]
 8003f38:	69b3      	ldr	r3, [r6, #24]
 8003f3a:	b913      	cbnz	r3, 8003f42 <__sfp+0x16>
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f7ff ffbd 	bl	8003ebc <__sinit>
 8003f42:	3648      	adds	r6, #72	; 0x48
 8003f44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	d503      	bpl.n	8003f54 <__sfp+0x28>
 8003f4c:	6833      	ldr	r3, [r6, #0]
 8003f4e:	b30b      	cbz	r3, 8003f94 <__sfp+0x68>
 8003f50:	6836      	ldr	r6, [r6, #0]
 8003f52:	e7f7      	b.n	8003f44 <__sfp+0x18>
 8003f54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f58:	b9d5      	cbnz	r5, 8003f90 <__sfp+0x64>
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <__sfp+0x88>)
 8003f5c:	60e3      	str	r3, [r4, #12]
 8003f5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f62:	6665      	str	r5, [r4, #100]	; 0x64
 8003f64:	f000 f847 	bl	8003ff6 <__retarget_lock_init_recursive>
 8003f68:	f7ff ff96 	bl	8003e98 <__sfp_lock_release>
 8003f6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f74:	6025      	str	r5, [r4, #0]
 8003f76:	61a5      	str	r5, [r4, #24]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f80:	f7ff ff24 	bl	8003dcc <memset>
 8003f84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f90:	3468      	adds	r4, #104	; 0x68
 8003f92:	e7d9      	b.n	8003f48 <__sfp+0x1c>
 8003f94:	2104      	movs	r1, #4
 8003f96:	4638      	mov	r0, r7
 8003f98:	f7ff ff62 	bl	8003e60 <__sfmoreglue>
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	6030      	str	r0, [r6, #0]
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d1d5      	bne.n	8003f50 <__sfp+0x24>
 8003fa4:	f7ff ff78 	bl	8003e98 <__sfp_lock_release>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	e7ee      	b.n	8003f8c <__sfp+0x60>
 8003fae:	bf00      	nop
 8003fb0:	08004d48 	.word	0x08004d48
 8003fb4:	ffff0001 	.word	0xffff0001

08003fb8 <_fwalk_reent>:
 8003fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fbc:	4606      	mov	r6, r0
 8003fbe:	4688      	mov	r8, r1
 8003fc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003fc4:	2700      	movs	r7, #0
 8003fc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fca:	f1b9 0901 	subs.w	r9, r9, #1
 8003fce:	d505      	bpl.n	8003fdc <_fwalk_reent+0x24>
 8003fd0:	6824      	ldr	r4, [r4, #0]
 8003fd2:	2c00      	cmp	r4, #0
 8003fd4:	d1f7      	bne.n	8003fc6 <_fwalk_reent+0xe>
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fdc:	89ab      	ldrh	r3, [r5, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d907      	bls.n	8003ff2 <_fwalk_reent+0x3a>
 8003fe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	d003      	beq.n	8003ff2 <_fwalk_reent+0x3a>
 8003fea:	4629      	mov	r1, r5
 8003fec:	4630      	mov	r0, r6
 8003fee:	47c0      	blx	r8
 8003ff0:	4307      	orrs	r7, r0
 8003ff2:	3568      	adds	r5, #104	; 0x68
 8003ff4:	e7e9      	b.n	8003fca <_fwalk_reent+0x12>

08003ff6 <__retarget_lock_init_recursive>:
 8003ff6:	4770      	bx	lr

08003ff8 <__retarget_lock_acquire_recursive>:
 8003ff8:	4770      	bx	lr

08003ffa <__retarget_lock_release_recursive>:
 8003ffa:	4770      	bx	lr

08003ffc <sbrk_aligned>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	4e0e      	ldr	r6, [pc, #56]	; (8004038 <sbrk_aligned+0x3c>)
 8004000:	460c      	mov	r4, r1
 8004002:	6831      	ldr	r1, [r6, #0]
 8004004:	4605      	mov	r5, r0
 8004006:	b911      	cbnz	r1, 800400e <sbrk_aligned+0x12>
 8004008:	f000 fb7a 	bl	8004700 <_sbrk_r>
 800400c:	6030      	str	r0, [r6, #0]
 800400e:	4621      	mov	r1, r4
 8004010:	4628      	mov	r0, r5
 8004012:	f000 fb75 	bl	8004700 <_sbrk_r>
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	d00a      	beq.n	8004030 <sbrk_aligned+0x34>
 800401a:	1cc4      	adds	r4, r0, #3
 800401c:	f024 0403 	bic.w	r4, r4, #3
 8004020:	42a0      	cmp	r0, r4
 8004022:	d007      	beq.n	8004034 <sbrk_aligned+0x38>
 8004024:	1a21      	subs	r1, r4, r0
 8004026:	4628      	mov	r0, r5
 8004028:	f000 fb6a 	bl	8004700 <_sbrk_r>
 800402c:	3001      	adds	r0, #1
 800402e:	d101      	bne.n	8004034 <sbrk_aligned+0x38>
 8004030:	f04f 34ff 	mov.w	r4, #4294967295
 8004034:	4620      	mov	r0, r4
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	2000021c 	.word	0x2000021c

0800403c <_malloc_r>:
 800403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004040:	1ccd      	adds	r5, r1, #3
 8004042:	f025 0503 	bic.w	r5, r5, #3
 8004046:	3508      	adds	r5, #8
 8004048:	2d0c      	cmp	r5, #12
 800404a:	bf38      	it	cc
 800404c:	250c      	movcc	r5, #12
 800404e:	2d00      	cmp	r5, #0
 8004050:	4607      	mov	r7, r0
 8004052:	db01      	blt.n	8004058 <_malloc_r+0x1c>
 8004054:	42a9      	cmp	r1, r5
 8004056:	d905      	bls.n	8004064 <_malloc_r+0x28>
 8004058:	230c      	movs	r3, #12
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	2600      	movs	r6, #0
 800405e:	4630      	mov	r0, r6
 8004060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004064:	4e2e      	ldr	r6, [pc, #184]	; (8004120 <_malloc_r+0xe4>)
 8004066:	f000 fdbb 	bl	8004be0 <__malloc_lock>
 800406a:	6833      	ldr	r3, [r6, #0]
 800406c:	461c      	mov	r4, r3
 800406e:	bb34      	cbnz	r4, 80040be <_malloc_r+0x82>
 8004070:	4629      	mov	r1, r5
 8004072:	4638      	mov	r0, r7
 8004074:	f7ff ffc2 	bl	8003ffc <sbrk_aligned>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	4604      	mov	r4, r0
 800407c:	d14d      	bne.n	800411a <_malloc_r+0xde>
 800407e:	6834      	ldr	r4, [r6, #0]
 8004080:	4626      	mov	r6, r4
 8004082:	2e00      	cmp	r6, #0
 8004084:	d140      	bne.n	8004108 <_malloc_r+0xcc>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	4631      	mov	r1, r6
 800408a:	4638      	mov	r0, r7
 800408c:	eb04 0803 	add.w	r8, r4, r3
 8004090:	f000 fb36 	bl	8004700 <_sbrk_r>
 8004094:	4580      	cmp	r8, r0
 8004096:	d13a      	bne.n	800410e <_malloc_r+0xd2>
 8004098:	6821      	ldr	r1, [r4, #0]
 800409a:	3503      	adds	r5, #3
 800409c:	1a6d      	subs	r5, r5, r1
 800409e:	f025 0503 	bic.w	r5, r5, #3
 80040a2:	3508      	adds	r5, #8
 80040a4:	2d0c      	cmp	r5, #12
 80040a6:	bf38      	it	cc
 80040a8:	250c      	movcc	r5, #12
 80040aa:	4629      	mov	r1, r5
 80040ac:	4638      	mov	r0, r7
 80040ae:	f7ff ffa5 	bl	8003ffc <sbrk_aligned>
 80040b2:	3001      	adds	r0, #1
 80040b4:	d02b      	beq.n	800410e <_malloc_r+0xd2>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	442b      	add	r3, r5
 80040ba:	6023      	str	r3, [r4, #0]
 80040bc:	e00e      	b.n	80040dc <_malloc_r+0xa0>
 80040be:	6822      	ldr	r2, [r4, #0]
 80040c0:	1b52      	subs	r2, r2, r5
 80040c2:	d41e      	bmi.n	8004102 <_malloc_r+0xc6>
 80040c4:	2a0b      	cmp	r2, #11
 80040c6:	d916      	bls.n	80040f6 <_malloc_r+0xba>
 80040c8:	1961      	adds	r1, r4, r5
 80040ca:	42a3      	cmp	r3, r4
 80040cc:	6025      	str	r5, [r4, #0]
 80040ce:	bf18      	it	ne
 80040d0:	6059      	strne	r1, [r3, #4]
 80040d2:	6863      	ldr	r3, [r4, #4]
 80040d4:	bf08      	it	eq
 80040d6:	6031      	streq	r1, [r6, #0]
 80040d8:	5162      	str	r2, [r4, r5]
 80040da:	604b      	str	r3, [r1, #4]
 80040dc:	4638      	mov	r0, r7
 80040de:	f104 060b 	add.w	r6, r4, #11
 80040e2:	f000 fd83 	bl	8004bec <__malloc_unlock>
 80040e6:	f026 0607 	bic.w	r6, r6, #7
 80040ea:	1d23      	adds	r3, r4, #4
 80040ec:	1af2      	subs	r2, r6, r3
 80040ee:	d0b6      	beq.n	800405e <_malloc_r+0x22>
 80040f0:	1b9b      	subs	r3, r3, r6
 80040f2:	50a3      	str	r3, [r4, r2]
 80040f4:	e7b3      	b.n	800405e <_malloc_r+0x22>
 80040f6:	6862      	ldr	r2, [r4, #4]
 80040f8:	42a3      	cmp	r3, r4
 80040fa:	bf0c      	ite	eq
 80040fc:	6032      	streq	r2, [r6, #0]
 80040fe:	605a      	strne	r2, [r3, #4]
 8004100:	e7ec      	b.n	80040dc <_malloc_r+0xa0>
 8004102:	4623      	mov	r3, r4
 8004104:	6864      	ldr	r4, [r4, #4]
 8004106:	e7b2      	b.n	800406e <_malloc_r+0x32>
 8004108:	4634      	mov	r4, r6
 800410a:	6876      	ldr	r6, [r6, #4]
 800410c:	e7b9      	b.n	8004082 <_malloc_r+0x46>
 800410e:	230c      	movs	r3, #12
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	4638      	mov	r0, r7
 8004114:	f000 fd6a 	bl	8004bec <__malloc_unlock>
 8004118:	e7a1      	b.n	800405e <_malloc_r+0x22>
 800411a:	6025      	str	r5, [r4, #0]
 800411c:	e7de      	b.n	80040dc <_malloc_r+0xa0>
 800411e:	bf00      	nop
 8004120:	20000218 	.word	0x20000218

08004124 <__sfputc_r>:
 8004124:	6893      	ldr	r3, [r2, #8]
 8004126:	3b01      	subs	r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	b410      	push	{r4}
 800412c:	6093      	str	r3, [r2, #8]
 800412e:	da08      	bge.n	8004142 <__sfputc_r+0x1e>
 8004130:	6994      	ldr	r4, [r2, #24]
 8004132:	42a3      	cmp	r3, r4
 8004134:	db01      	blt.n	800413a <__sfputc_r+0x16>
 8004136:	290a      	cmp	r1, #10
 8004138:	d103      	bne.n	8004142 <__sfputc_r+0x1e>
 800413a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800413e:	f000 bb33 	b.w	80047a8 <__swbuf_r>
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	1c58      	adds	r0, r3, #1
 8004146:	6010      	str	r0, [r2, #0]
 8004148:	7019      	strb	r1, [r3, #0]
 800414a:	4608      	mov	r0, r1
 800414c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004150:	4770      	bx	lr

08004152 <__sfputs_r>:
 8004152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004154:	4606      	mov	r6, r0
 8004156:	460f      	mov	r7, r1
 8004158:	4614      	mov	r4, r2
 800415a:	18d5      	adds	r5, r2, r3
 800415c:	42ac      	cmp	r4, r5
 800415e:	d101      	bne.n	8004164 <__sfputs_r+0x12>
 8004160:	2000      	movs	r0, #0
 8004162:	e007      	b.n	8004174 <__sfputs_r+0x22>
 8004164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004168:	463a      	mov	r2, r7
 800416a:	4630      	mov	r0, r6
 800416c:	f7ff ffda 	bl	8004124 <__sfputc_r>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d1f3      	bne.n	800415c <__sfputs_r+0xa>
 8004174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004178 <_vfiprintf_r>:
 8004178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417c:	460d      	mov	r5, r1
 800417e:	b09d      	sub	sp, #116	; 0x74
 8004180:	4614      	mov	r4, r2
 8004182:	4698      	mov	r8, r3
 8004184:	4606      	mov	r6, r0
 8004186:	b118      	cbz	r0, 8004190 <_vfiprintf_r+0x18>
 8004188:	6983      	ldr	r3, [r0, #24]
 800418a:	b90b      	cbnz	r3, 8004190 <_vfiprintf_r+0x18>
 800418c:	f7ff fe96 	bl	8003ebc <__sinit>
 8004190:	4b89      	ldr	r3, [pc, #548]	; (80043b8 <_vfiprintf_r+0x240>)
 8004192:	429d      	cmp	r5, r3
 8004194:	d11b      	bne.n	80041ce <_vfiprintf_r+0x56>
 8004196:	6875      	ldr	r5, [r6, #4]
 8004198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800419a:	07d9      	lsls	r1, r3, #31
 800419c:	d405      	bmi.n	80041aa <_vfiprintf_r+0x32>
 800419e:	89ab      	ldrh	r3, [r5, #12]
 80041a0:	059a      	lsls	r2, r3, #22
 80041a2:	d402      	bmi.n	80041aa <_vfiprintf_r+0x32>
 80041a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041a6:	f7ff ff27 	bl	8003ff8 <__retarget_lock_acquire_recursive>
 80041aa:	89ab      	ldrh	r3, [r5, #12]
 80041ac:	071b      	lsls	r3, r3, #28
 80041ae:	d501      	bpl.n	80041b4 <_vfiprintf_r+0x3c>
 80041b0:	692b      	ldr	r3, [r5, #16]
 80041b2:	b9eb      	cbnz	r3, 80041f0 <_vfiprintf_r+0x78>
 80041b4:	4629      	mov	r1, r5
 80041b6:	4630      	mov	r0, r6
 80041b8:	f000 fb5a 	bl	8004870 <__swsetup_r>
 80041bc:	b1c0      	cbz	r0, 80041f0 <_vfiprintf_r+0x78>
 80041be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041c0:	07dc      	lsls	r4, r3, #31
 80041c2:	d50e      	bpl.n	80041e2 <_vfiprintf_r+0x6a>
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	b01d      	add	sp, #116	; 0x74
 80041ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ce:	4b7b      	ldr	r3, [pc, #492]	; (80043bc <_vfiprintf_r+0x244>)
 80041d0:	429d      	cmp	r5, r3
 80041d2:	d101      	bne.n	80041d8 <_vfiprintf_r+0x60>
 80041d4:	68b5      	ldr	r5, [r6, #8]
 80041d6:	e7df      	b.n	8004198 <_vfiprintf_r+0x20>
 80041d8:	4b79      	ldr	r3, [pc, #484]	; (80043c0 <_vfiprintf_r+0x248>)
 80041da:	429d      	cmp	r5, r3
 80041dc:	bf08      	it	eq
 80041de:	68f5      	ldreq	r5, [r6, #12]
 80041e0:	e7da      	b.n	8004198 <_vfiprintf_r+0x20>
 80041e2:	89ab      	ldrh	r3, [r5, #12]
 80041e4:	0598      	lsls	r0, r3, #22
 80041e6:	d4ed      	bmi.n	80041c4 <_vfiprintf_r+0x4c>
 80041e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ea:	f7ff ff06 	bl	8003ffa <__retarget_lock_release_recursive>
 80041ee:	e7e9      	b.n	80041c4 <_vfiprintf_r+0x4c>
 80041f0:	2300      	movs	r3, #0
 80041f2:	9309      	str	r3, [sp, #36]	; 0x24
 80041f4:	2320      	movs	r3, #32
 80041f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80041fe:	2330      	movs	r3, #48	; 0x30
 8004200:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80043c4 <_vfiprintf_r+0x24c>
 8004204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004208:	f04f 0901 	mov.w	r9, #1
 800420c:	4623      	mov	r3, r4
 800420e:	469a      	mov	sl, r3
 8004210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004214:	b10a      	cbz	r2, 800421a <_vfiprintf_r+0xa2>
 8004216:	2a25      	cmp	r2, #37	; 0x25
 8004218:	d1f9      	bne.n	800420e <_vfiprintf_r+0x96>
 800421a:	ebba 0b04 	subs.w	fp, sl, r4
 800421e:	d00b      	beq.n	8004238 <_vfiprintf_r+0xc0>
 8004220:	465b      	mov	r3, fp
 8004222:	4622      	mov	r2, r4
 8004224:	4629      	mov	r1, r5
 8004226:	4630      	mov	r0, r6
 8004228:	f7ff ff93 	bl	8004152 <__sfputs_r>
 800422c:	3001      	adds	r0, #1
 800422e:	f000 80aa 	beq.w	8004386 <_vfiprintf_r+0x20e>
 8004232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004234:	445a      	add	r2, fp
 8004236:	9209      	str	r2, [sp, #36]	; 0x24
 8004238:	f89a 3000 	ldrb.w	r3, [sl]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80a2 	beq.w	8004386 <_vfiprintf_r+0x20e>
 8004242:	2300      	movs	r3, #0
 8004244:	f04f 32ff 	mov.w	r2, #4294967295
 8004248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800424c:	f10a 0a01 	add.w	sl, sl, #1
 8004250:	9304      	str	r3, [sp, #16]
 8004252:	9307      	str	r3, [sp, #28]
 8004254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004258:	931a      	str	r3, [sp, #104]	; 0x68
 800425a:	4654      	mov	r4, sl
 800425c:	2205      	movs	r2, #5
 800425e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004262:	4858      	ldr	r0, [pc, #352]	; (80043c4 <_vfiprintf_r+0x24c>)
 8004264:	f7fb ffbc 	bl	80001e0 <memchr>
 8004268:	9a04      	ldr	r2, [sp, #16]
 800426a:	b9d8      	cbnz	r0, 80042a4 <_vfiprintf_r+0x12c>
 800426c:	06d1      	lsls	r1, r2, #27
 800426e:	bf44      	itt	mi
 8004270:	2320      	movmi	r3, #32
 8004272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004276:	0713      	lsls	r3, r2, #28
 8004278:	bf44      	itt	mi
 800427a:	232b      	movmi	r3, #43	; 0x2b
 800427c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004280:	f89a 3000 	ldrb.w	r3, [sl]
 8004284:	2b2a      	cmp	r3, #42	; 0x2a
 8004286:	d015      	beq.n	80042b4 <_vfiprintf_r+0x13c>
 8004288:	9a07      	ldr	r2, [sp, #28]
 800428a:	4654      	mov	r4, sl
 800428c:	2000      	movs	r0, #0
 800428e:	f04f 0c0a 	mov.w	ip, #10
 8004292:	4621      	mov	r1, r4
 8004294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004298:	3b30      	subs	r3, #48	; 0x30
 800429a:	2b09      	cmp	r3, #9
 800429c:	d94e      	bls.n	800433c <_vfiprintf_r+0x1c4>
 800429e:	b1b0      	cbz	r0, 80042ce <_vfiprintf_r+0x156>
 80042a0:	9207      	str	r2, [sp, #28]
 80042a2:	e014      	b.n	80042ce <_vfiprintf_r+0x156>
 80042a4:	eba0 0308 	sub.w	r3, r0, r8
 80042a8:	fa09 f303 	lsl.w	r3, r9, r3
 80042ac:	4313      	orrs	r3, r2
 80042ae:	9304      	str	r3, [sp, #16]
 80042b0:	46a2      	mov	sl, r4
 80042b2:	e7d2      	b.n	800425a <_vfiprintf_r+0xe2>
 80042b4:	9b03      	ldr	r3, [sp, #12]
 80042b6:	1d19      	adds	r1, r3, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	9103      	str	r1, [sp, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bfbb      	ittet	lt
 80042c0:	425b      	neglt	r3, r3
 80042c2:	f042 0202 	orrlt.w	r2, r2, #2
 80042c6:	9307      	strge	r3, [sp, #28]
 80042c8:	9307      	strlt	r3, [sp, #28]
 80042ca:	bfb8      	it	lt
 80042cc:	9204      	strlt	r2, [sp, #16]
 80042ce:	7823      	ldrb	r3, [r4, #0]
 80042d0:	2b2e      	cmp	r3, #46	; 0x2e
 80042d2:	d10c      	bne.n	80042ee <_vfiprintf_r+0x176>
 80042d4:	7863      	ldrb	r3, [r4, #1]
 80042d6:	2b2a      	cmp	r3, #42	; 0x2a
 80042d8:	d135      	bne.n	8004346 <_vfiprintf_r+0x1ce>
 80042da:	9b03      	ldr	r3, [sp, #12]
 80042dc:	1d1a      	adds	r2, r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	9203      	str	r2, [sp, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	bfb8      	it	lt
 80042e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80042ea:	3402      	adds	r4, #2
 80042ec:	9305      	str	r3, [sp, #20]
 80042ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043d4 <_vfiprintf_r+0x25c>
 80042f2:	7821      	ldrb	r1, [r4, #0]
 80042f4:	2203      	movs	r2, #3
 80042f6:	4650      	mov	r0, sl
 80042f8:	f7fb ff72 	bl	80001e0 <memchr>
 80042fc:	b140      	cbz	r0, 8004310 <_vfiprintf_r+0x198>
 80042fe:	2340      	movs	r3, #64	; 0x40
 8004300:	eba0 000a 	sub.w	r0, r0, sl
 8004304:	fa03 f000 	lsl.w	r0, r3, r0
 8004308:	9b04      	ldr	r3, [sp, #16]
 800430a:	4303      	orrs	r3, r0
 800430c:	3401      	adds	r4, #1
 800430e:	9304      	str	r3, [sp, #16]
 8004310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004314:	482c      	ldr	r0, [pc, #176]	; (80043c8 <_vfiprintf_r+0x250>)
 8004316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800431a:	2206      	movs	r2, #6
 800431c:	f7fb ff60 	bl	80001e0 <memchr>
 8004320:	2800      	cmp	r0, #0
 8004322:	d03f      	beq.n	80043a4 <_vfiprintf_r+0x22c>
 8004324:	4b29      	ldr	r3, [pc, #164]	; (80043cc <_vfiprintf_r+0x254>)
 8004326:	bb1b      	cbnz	r3, 8004370 <_vfiprintf_r+0x1f8>
 8004328:	9b03      	ldr	r3, [sp, #12]
 800432a:	3307      	adds	r3, #7
 800432c:	f023 0307 	bic.w	r3, r3, #7
 8004330:	3308      	adds	r3, #8
 8004332:	9303      	str	r3, [sp, #12]
 8004334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004336:	443b      	add	r3, r7
 8004338:	9309      	str	r3, [sp, #36]	; 0x24
 800433a:	e767      	b.n	800420c <_vfiprintf_r+0x94>
 800433c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004340:	460c      	mov	r4, r1
 8004342:	2001      	movs	r0, #1
 8004344:	e7a5      	b.n	8004292 <_vfiprintf_r+0x11a>
 8004346:	2300      	movs	r3, #0
 8004348:	3401      	adds	r4, #1
 800434a:	9305      	str	r3, [sp, #20]
 800434c:	4619      	mov	r1, r3
 800434e:	f04f 0c0a 	mov.w	ip, #10
 8004352:	4620      	mov	r0, r4
 8004354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004358:	3a30      	subs	r2, #48	; 0x30
 800435a:	2a09      	cmp	r2, #9
 800435c:	d903      	bls.n	8004366 <_vfiprintf_r+0x1ee>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0c5      	beq.n	80042ee <_vfiprintf_r+0x176>
 8004362:	9105      	str	r1, [sp, #20]
 8004364:	e7c3      	b.n	80042ee <_vfiprintf_r+0x176>
 8004366:	fb0c 2101 	mla	r1, ip, r1, r2
 800436a:	4604      	mov	r4, r0
 800436c:	2301      	movs	r3, #1
 800436e:	e7f0      	b.n	8004352 <_vfiprintf_r+0x1da>
 8004370:	ab03      	add	r3, sp, #12
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	462a      	mov	r2, r5
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <_vfiprintf_r+0x258>)
 8004378:	a904      	add	r1, sp, #16
 800437a:	4630      	mov	r0, r6
 800437c:	f3af 8000 	nop.w
 8004380:	4607      	mov	r7, r0
 8004382:	1c78      	adds	r0, r7, #1
 8004384:	d1d6      	bne.n	8004334 <_vfiprintf_r+0x1bc>
 8004386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004388:	07d9      	lsls	r1, r3, #31
 800438a:	d405      	bmi.n	8004398 <_vfiprintf_r+0x220>
 800438c:	89ab      	ldrh	r3, [r5, #12]
 800438e:	059a      	lsls	r2, r3, #22
 8004390:	d402      	bmi.n	8004398 <_vfiprintf_r+0x220>
 8004392:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004394:	f7ff fe31 	bl	8003ffa <__retarget_lock_release_recursive>
 8004398:	89ab      	ldrh	r3, [r5, #12]
 800439a:	065b      	lsls	r3, r3, #25
 800439c:	f53f af12 	bmi.w	80041c4 <_vfiprintf_r+0x4c>
 80043a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043a2:	e711      	b.n	80041c8 <_vfiprintf_r+0x50>
 80043a4:	ab03      	add	r3, sp, #12
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	462a      	mov	r2, r5
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <_vfiprintf_r+0x258>)
 80043ac:	a904      	add	r1, sp, #16
 80043ae:	4630      	mov	r0, r6
 80043b0:	f000 f880 	bl	80044b4 <_printf_i>
 80043b4:	e7e4      	b.n	8004380 <_vfiprintf_r+0x208>
 80043b6:	bf00      	nop
 80043b8:	08004d6c 	.word	0x08004d6c
 80043bc:	08004d8c 	.word	0x08004d8c
 80043c0:	08004d4c 	.word	0x08004d4c
 80043c4:	08004dac 	.word	0x08004dac
 80043c8:	08004db6 	.word	0x08004db6
 80043cc:	00000000 	.word	0x00000000
 80043d0:	08004153 	.word	0x08004153
 80043d4:	08004db2 	.word	0x08004db2

080043d8 <_printf_common>:
 80043d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	4616      	mov	r6, r2
 80043de:	4699      	mov	r9, r3
 80043e0:	688a      	ldr	r2, [r1, #8]
 80043e2:	690b      	ldr	r3, [r1, #16]
 80043e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfb8      	it	lt
 80043ec:	4613      	movlt	r3, r2
 80043ee:	6033      	str	r3, [r6, #0]
 80043f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f4:	4607      	mov	r7, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	b10a      	cbz	r2, 80043fe <_printf_common+0x26>
 80043fa:	3301      	adds	r3, #1
 80043fc:	6033      	str	r3, [r6, #0]
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	0699      	lsls	r1, r3, #26
 8004402:	bf42      	ittt	mi
 8004404:	6833      	ldrmi	r3, [r6, #0]
 8004406:	3302      	addmi	r3, #2
 8004408:	6033      	strmi	r3, [r6, #0]
 800440a:	6825      	ldr	r5, [r4, #0]
 800440c:	f015 0506 	ands.w	r5, r5, #6
 8004410:	d106      	bne.n	8004420 <_printf_common+0x48>
 8004412:	f104 0a19 	add.w	sl, r4, #25
 8004416:	68e3      	ldr	r3, [r4, #12]
 8004418:	6832      	ldr	r2, [r6, #0]
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	42ab      	cmp	r3, r5
 800441e:	dc26      	bgt.n	800446e <_printf_common+0x96>
 8004420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004424:	1e13      	subs	r3, r2, #0
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	bf18      	it	ne
 800442a:	2301      	movne	r3, #1
 800442c:	0692      	lsls	r2, r2, #26
 800442e:	d42b      	bmi.n	8004488 <_printf_common+0xb0>
 8004430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004434:	4649      	mov	r1, r9
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	3001      	adds	r0, #1
 800443c:	d01e      	beq.n	800447c <_printf_common+0xa4>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	68e5      	ldr	r5, [r4, #12]
 8004442:	6832      	ldr	r2, [r6, #0]
 8004444:	f003 0306 	and.w	r3, r3, #6
 8004448:	2b04      	cmp	r3, #4
 800444a:	bf08      	it	eq
 800444c:	1aad      	subeq	r5, r5, r2
 800444e:	68a3      	ldr	r3, [r4, #8]
 8004450:	6922      	ldr	r2, [r4, #16]
 8004452:	bf0c      	ite	eq
 8004454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004458:	2500      	movne	r5, #0
 800445a:	4293      	cmp	r3, r2
 800445c:	bfc4      	itt	gt
 800445e:	1a9b      	subgt	r3, r3, r2
 8004460:	18ed      	addgt	r5, r5, r3
 8004462:	2600      	movs	r6, #0
 8004464:	341a      	adds	r4, #26
 8004466:	42b5      	cmp	r5, r6
 8004468:	d11a      	bne.n	80044a0 <_printf_common+0xc8>
 800446a:	2000      	movs	r0, #0
 800446c:	e008      	b.n	8004480 <_printf_common+0xa8>
 800446e:	2301      	movs	r3, #1
 8004470:	4652      	mov	r2, sl
 8004472:	4649      	mov	r1, r9
 8004474:	4638      	mov	r0, r7
 8004476:	47c0      	blx	r8
 8004478:	3001      	adds	r0, #1
 800447a:	d103      	bne.n	8004484 <_printf_common+0xac>
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	3501      	adds	r5, #1
 8004486:	e7c6      	b.n	8004416 <_printf_common+0x3e>
 8004488:	18e1      	adds	r1, r4, r3
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	2030      	movs	r0, #48	; 0x30
 800448e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004492:	4422      	add	r2, r4
 8004494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800449c:	3302      	adds	r3, #2
 800449e:	e7c7      	b.n	8004430 <_printf_common+0x58>
 80044a0:	2301      	movs	r3, #1
 80044a2:	4622      	mov	r2, r4
 80044a4:	4649      	mov	r1, r9
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c0      	blx	r8
 80044aa:	3001      	adds	r0, #1
 80044ac:	d0e6      	beq.n	800447c <_printf_common+0xa4>
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7d9      	b.n	8004466 <_printf_common+0x8e>
	...

080044b4 <_printf_i>:
 80044b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	7e0f      	ldrb	r7, [r1, #24]
 80044ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044bc:	2f78      	cmp	r7, #120	; 0x78
 80044be:	4691      	mov	r9, r2
 80044c0:	4680      	mov	r8, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	469a      	mov	sl, r3
 80044c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ca:	d807      	bhi.n	80044dc <_printf_i+0x28>
 80044cc:	2f62      	cmp	r7, #98	; 0x62
 80044ce:	d80a      	bhi.n	80044e6 <_printf_i+0x32>
 80044d0:	2f00      	cmp	r7, #0
 80044d2:	f000 80d8 	beq.w	8004686 <_printf_i+0x1d2>
 80044d6:	2f58      	cmp	r7, #88	; 0x58
 80044d8:	f000 80a3 	beq.w	8004622 <_printf_i+0x16e>
 80044dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044e4:	e03a      	b.n	800455c <_printf_i+0xa8>
 80044e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ea:	2b15      	cmp	r3, #21
 80044ec:	d8f6      	bhi.n	80044dc <_printf_i+0x28>
 80044ee:	a101      	add	r1, pc, #4	; (adr r1, 80044f4 <_printf_i+0x40>)
 80044f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044f4:	0800454d 	.word	0x0800454d
 80044f8:	08004561 	.word	0x08004561
 80044fc:	080044dd 	.word	0x080044dd
 8004500:	080044dd 	.word	0x080044dd
 8004504:	080044dd 	.word	0x080044dd
 8004508:	080044dd 	.word	0x080044dd
 800450c:	08004561 	.word	0x08004561
 8004510:	080044dd 	.word	0x080044dd
 8004514:	080044dd 	.word	0x080044dd
 8004518:	080044dd 	.word	0x080044dd
 800451c:	080044dd 	.word	0x080044dd
 8004520:	0800466d 	.word	0x0800466d
 8004524:	08004591 	.word	0x08004591
 8004528:	0800464f 	.word	0x0800464f
 800452c:	080044dd 	.word	0x080044dd
 8004530:	080044dd 	.word	0x080044dd
 8004534:	0800468f 	.word	0x0800468f
 8004538:	080044dd 	.word	0x080044dd
 800453c:	08004591 	.word	0x08004591
 8004540:	080044dd 	.word	0x080044dd
 8004544:	080044dd 	.word	0x080044dd
 8004548:	08004657 	.word	0x08004657
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	602a      	str	r2, [r5, #0]
 8004554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800455c:	2301      	movs	r3, #1
 800455e:	e0a3      	b.n	80046a8 <_printf_i+0x1f4>
 8004560:	6820      	ldr	r0, [r4, #0]
 8004562:	6829      	ldr	r1, [r5, #0]
 8004564:	0606      	lsls	r6, r0, #24
 8004566:	f101 0304 	add.w	r3, r1, #4
 800456a:	d50a      	bpl.n	8004582 <_printf_i+0xce>
 800456c:	680e      	ldr	r6, [r1, #0]
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	2e00      	cmp	r6, #0
 8004572:	da03      	bge.n	800457c <_printf_i+0xc8>
 8004574:	232d      	movs	r3, #45	; 0x2d
 8004576:	4276      	negs	r6, r6
 8004578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457c:	485e      	ldr	r0, [pc, #376]	; (80046f8 <_printf_i+0x244>)
 800457e:	230a      	movs	r3, #10
 8004580:	e019      	b.n	80045b6 <_printf_i+0x102>
 8004582:	680e      	ldr	r6, [r1, #0]
 8004584:	602b      	str	r3, [r5, #0]
 8004586:	f010 0f40 	tst.w	r0, #64	; 0x40
 800458a:	bf18      	it	ne
 800458c:	b236      	sxthne	r6, r6
 800458e:	e7ef      	b.n	8004570 <_printf_i+0xbc>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	1d19      	adds	r1, r3, #4
 8004596:	6029      	str	r1, [r5, #0]
 8004598:	0601      	lsls	r1, r0, #24
 800459a:	d501      	bpl.n	80045a0 <_printf_i+0xec>
 800459c:	681e      	ldr	r6, [r3, #0]
 800459e:	e002      	b.n	80045a6 <_printf_i+0xf2>
 80045a0:	0646      	lsls	r6, r0, #25
 80045a2:	d5fb      	bpl.n	800459c <_printf_i+0xe8>
 80045a4:	881e      	ldrh	r6, [r3, #0]
 80045a6:	4854      	ldr	r0, [pc, #336]	; (80046f8 <_printf_i+0x244>)
 80045a8:	2f6f      	cmp	r7, #111	; 0x6f
 80045aa:	bf0c      	ite	eq
 80045ac:	2308      	moveq	r3, #8
 80045ae:	230a      	movne	r3, #10
 80045b0:	2100      	movs	r1, #0
 80045b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045b6:	6865      	ldr	r5, [r4, #4]
 80045b8:	60a5      	str	r5, [r4, #8]
 80045ba:	2d00      	cmp	r5, #0
 80045bc:	bfa2      	ittt	ge
 80045be:	6821      	ldrge	r1, [r4, #0]
 80045c0:	f021 0104 	bicge.w	r1, r1, #4
 80045c4:	6021      	strge	r1, [r4, #0]
 80045c6:	b90e      	cbnz	r6, 80045cc <_printf_i+0x118>
 80045c8:	2d00      	cmp	r5, #0
 80045ca:	d04d      	beq.n	8004668 <_printf_i+0x1b4>
 80045cc:	4615      	mov	r5, r2
 80045ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80045d2:	fb03 6711 	mls	r7, r3, r1, r6
 80045d6:	5dc7      	ldrb	r7, [r0, r7]
 80045d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045dc:	4637      	mov	r7, r6
 80045de:	42bb      	cmp	r3, r7
 80045e0:	460e      	mov	r6, r1
 80045e2:	d9f4      	bls.n	80045ce <_printf_i+0x11a>
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d10b      	bne.n	8004600 <_printf_i+0x14c>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	07de      	lsls	r6, r3, #31
 80045ec:	d508      	bpl.n	8004600 <_printf_i+0x14c>
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	6861      	ldr	r1, [r4, #4]
 80045f2:	4299      	cmp	r1, r3
 80045f4:	bfde      	ittt	le
 80045f6:	2330      	movle	r3, #48	; 0x30
 80045f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004600:	1b52      	subs	r2, r2, r5
 8004602:	6122      	str	r2, [r4, #16]
 8004604:	f8cd a000 	str.w	sl, [sp]
 8004608:	464b      	mov	r3, r9
 800460a:	aa03      	add	r2, sp, #12
 800460c:	4621      	mov	r1, r4
 800460e:	4640      	mov	r0, r8
 8004610:	f7ff fee2 	bl	80043d8 <_printf_common>
 8004614:	3001      	adds	r0, #1
 8004616:	d14c      	bne.n	80046b2 <_printf_i+0x1fe>
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	b004      	add	sp, #16
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	4835      	ldr	r0, [pc, #212]	; (80046f8 <_printf_i+0x244>)
 8004624:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004628:	6829      	ldr	r1, [r5, #0]
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004630:	6029      	str	r1, [r5, #0]
 8004632:	061d      	lsls	r5, r3, #24
 8004634:	d514      	bpl.n	8004660 <_printf_i+0x1ac>
 8004636:	07df      	lsls	r7, r3, #31
 8004638:	bf44      	itt	mi
 800463a:	f043 0320 	orrmi.w	r3, r3, #32
 800463e:	6023      	strmi	r3, [r4, #0]
 8004640:	b91e      	cbnz	r6, 800464a <_printf_i+0x196>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	f023 0320 	bic.w	r3, r3, #32
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	2310      	movs	r3, #16
 800464c:	e7b0      	b.n	80045b0 <_printf_i+0xfc>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	f043 0320 	orr.w	r3, r3, #32
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	2378      	movs	r3, #120	; 0x78
 8004658:	4828      	ldr	r0, [pc, #160]	; (80046fc <_printf_i+0x248>)
 800465a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800465e:	e7e3      	b.n	8004628 <_printf_i+0x174>
 8004660:	0659      	lsls	r1, r3, #25
 8004662:	bf48      	it	mi
 8004664:	b2b6      	uxthmi	r6, r6
 8004666:	e7e6      	b.n	8004636 <_printf_i+0x182>
 8004668:	4615      	mov	r5, r2
 800466a:	e7bb      	b.n	80045e4 <_printf_i+0x130>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	6826      	ldr	r6, [r4, #0]
 8004670:	6961      	ldr	r1, [r4, #20]
 8004672:	1d18      	adds	r0, r3, #4
 8004674:	6028      	str	r0, [r5, #0]
 8004676:	0635      	lsls	r5, r6, #24
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	d501      	bpl.n	8004680 <_printf_i+0x1cc>
 800467c:	6019      	str	r1, [r3, #0]
 800467e:	e002      	b.n	8004686 <_printf_i+0x1d2>
 8004680:	0670      	lsls	r0, r6, #25
 8004682:	d5fb      	bpl.n	800467c <_printf_i+0x1c8>
 8004684:	8019      	strh	r1, [r3, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	4615      	mov	r5, r2
 800468c:	e7ba      	b.n	8004604 <_printf_i+0x150>
 800468e:	682b      	ldr	r3, [r5, #0]
 8004690:	1d1a      	adds	r2, r3, #4
 8004692:	602a      	str	r2, [r5, #0]
 8004694:	681d      	ldr	r5, [r3, #0]
 8004696:	6862      	ldr	r2, [r4, #4]
 8004698:	2100      	movs	r1, #0
 800469a:	4628      	mov	r0, r5
 800469c:	f7fb fda0 	bl	80001e0 <memchr>
 80046a0:	b108      	cbz	r0, 80046a6 <_printf_i+0x1f2>
 80046a2:	1b40      	subs	r0, r0, r5
 80046a4:	6060      	str	r0, [r4, #4]
 80046a6:	6863      	ldr	r3, [r4, #4]
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	2300      	movs	r3, #0
 80046ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b0:	e7a8      	b.n	8004604 <_printf_i+0x150>
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	462a      	mov	r2, r5
 80046b6:	4649      	mov	r1, r9
 80046b8:	4640      	mov	r0, r8
 80046ba:	47d0      	blx	sl
 80046bc:	3001      	adds	r0, #1
 80046be:	d0ab      	beq.n	8004618 <_printf_i+0x164>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	079b      	lsls	r3, r3, #30
 80046c4:	d413      	bmi.n	80046ee <_printf_i+0x23a>
 80046c6:	68e0      	ldr	r0, [r4, #12]
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	4298      	cmp	r0, r3
 80046cc:	bfb8      	it	lt
 80046ce:	4618      	movlt	r0, r3
 80046d0:	e7a4      	b.n	800461c <_printf_i+0x168>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4632      	mov	r2, r6
 80046d6:	4649      	mov	r1, r9
 80046d8:	4640      	mov	r0, r8
 80046da:	47d0      	blx	sl
 80046dc:	3001      	adds	r0, #1
 80046de:	d09b      	beq.n	8004618 <_printf_i+0x164>
 80046e0:	3501      	adds	r5, #1
 80046e2:	68e3      	ldr	r3, [r4, #12]
 80046e4:	9903      	ldr	r1, [sp, #12]
 80046e6:	1a5b      	subs	r3, r3, r1
 80046e8:	42ab      	cmp	r3, r5
 80046ea:	dcf2      	bgt.n	80046d2 <_printf_i+0x21e>
 80046ec:	e7eb      	b.n	80046c6 <_printf_i+0x212>
 80046ee:	2500      	movs	r5, #0
 80046f0:	f104 0619 	add.w	r6, r4, #25
 80046f4:	e7f5      	b.n	80046e2 <_printf_i+0x22e>
 80046f6:	bf00      	nop
 80046f8:	08004dbd 	.word	0x08004dbd
 80046fc:	08004dce 	.word	0x08004dce

08004700 <_sbrk_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d06      	ldr	r5, [pc, #24]	; (800471c <_sbrk_r+0x1c>)
 8004704:	2300      	movs	r3, #0
 8004706:	4604      	mov	r4, r0
 8004708:	4608      	mov	r0, r1
 800470a:	602b      	str	r3, [r5, #0]
 800470c:	f7fc feb0 	bl	8001470 <_sbrk>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d102      	bne.n	800471a <_sbrk_r+0x1a>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	b103      	cbz	r3, 800471a <_sbrk_r+0x1a>
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	20000220 	.word	0x20000220

08004720 <__sread>:
 8004720:	b510      	push	{r4, lr}
 8004722:	460c      	mov	r4, r1
 8004724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004728:	f000 fab2 	bl	8004c90 <_read_r>
 800472c:	2800      	cmp	r0, #0
 800472e:	bfab      	itete	ge
 8004730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004732:	89a3      	ldrhlt	r3, [r4, #12]
 8004734:	181b      	addge	r3, r3, r0
 8004736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800473a:	bfac      	ite	ge
 800473c:	6563      	strge	r3, [r4, #84]	; 0x54
 800473e:	81a3      	strhlt	r3, [r4, #12]
 8004740:	bd10      	pop	{r4, pc}

08004742 <__swrite>:
 8004742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004746:	461f      	mov	r7, r3
 8004748:	898b      	ldrh	r3, [r1, #12]
 800474a:	05db      	lsls	r3, r3, #23
 800474c:	4605      	mov	r5, r0
 800474e:	460c      	mov	r4, r1
 8004750:	4616      	mov	r6, r2
 8004752:	d505      	bpl.n	8004760 <__swrite+0x1e>
 8004754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004758:	2302      	movs	r3, #2
 800475a:	2200      	movs	r2, #0
 800475c:	f000 f9c8 	bl	8004af0 <_lseek_r>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800476a:	81a3      	strh	r3, [r4, #12]
 800476c:	4632      	mov	r2, r6
 800476e:	463b      	mov	r3, r7
 8004770:	4628      	mov	r0, r5
 8004772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004776:	f000 b869 	b.w	800484c <_write_r>

0800477a <__sseek>:
 800477a:	b510      	push	{r4, lr}
 800477c:	460c      	mov	r4, r1
 800477e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004782:	f000 f9b5 	bl	8004af0 <_lseek_r>
 8004786:	1c43      	adds	r3, r0, #1
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	bf15      	itete	ne
 800478c:	6560      	strne	r0, [r4, #84]	; 0x54
 800478e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004796:	81a3      	strheq	r3, [r4, #12]
 8004798:	bf18      	it	ne
 800479a:	81a3      	strhne	r3, [r4, #12]
 800479c:	bd10      	pop	{r4, pc}

0800479e <__sclose>:
 800479e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a2:	f000 b8d3 	b.w	800494c <_close_r>
	...

080047a8 <__swbuf_r>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	460e      	mov	r6, r1
 80047ac:	4614      	mov	r4, r2
 80047ae:	4605      	mov	r5, r0
 80047b0:	b118      	cbz	r0, 80047ba <__swbuf_r+0x12>
 80047b2:	6983      	ldr	r3, [r0, #24]
 80047b4:	b90b      	cbnz	r3, 80047ba <__swbuf_r+0x12>
 80047b6:	f7ff fb81 	bl	8003ebc <__sinit>
 80047ba:	4b21      	ldr	r3, [pc, #132]	; (8004840 <__swbuf_r+0x98>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	d12b      	bne.n	8004818 <__swbuf_r+0x70>
 80047c0:	686c      	ldr	r4, [r5, #4]
 80047c2:	69a3      	ldr	r3, [r4, #24]
 80047c4:	60a3      	str	r3, [r4, #8]
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	071a      	lsls	r2, r3, #28
 80047ca:	d52f      	bpl.n	800482c <__swbuf_r+0x84>
 80047cc:	6923      	ldr	r3, [r4, #16]
 80047ce:	b36b      	cbz	r3, 800482c <__swbuf_r+0x84>
 80047d0:	6923      	ldr	r3, [r4, #16]
 80047d2:	6820      	ldr	r0, [r4, #0]
 80047d4:	1ac0      	subs	r0, r0, r3
 80047d6:	6963      	ldr	r3, [r4, #20]
 80047d8:	b2f6      	uxtb	r6, r6
 80047da:	4283      	cmp	r3, r0
 80047dc:	4637      	mov	r7, r6
 80047de:	dc04      	bgt.n	80047ea <__swbuf_r+0x42>
 80047e0:	4621      	mov	r1, r4
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 f948 	bl	8004a78 <_fflush_r>
 80047e8:	bb30      	cbnz	r0, 8004838 <__swbuf_r+0x90>
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	60a3      	str	r3, [r4, #8]
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	6022      	str	r2, [r4, #0]
 80047f6:	701e      	strb	r6, [r3, #0]
 80047f8:	6963      	ldr	r3, [r4, #20]
 80047fa:	3001      	adds	r0, #1
 80047fc:	4283      	cmp	r3, r0
 80047fe:	d004      	beq.n	800480a <__swbuf_r+0x62>
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	07db      	lsls	r3, r3, #31
 8004804:	d506      	bpl.n	8004814 <__swbuf_r+0x6c>
 8004806:	2e0a      	cmp	r6, #10
 8004808:	d104      	bne.n	8004814 <__swbuf_r+0x6c>
 800480a:	4621      	mov	r1, r4
 800480c:	4628      	mov	r0, r5
 800480e:	f000 f933 	bl	8004a78 <_fflush_r>
 8004812:	b988      	cbnz	r0, 8004838 <__swbuf_r+0x90>
 8004814:	4638      	mov	r0, r7
 8004816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <__swbuf_r+0x9c>)
 800481a:	429c      	cmp	r4, r3
 800481c:	d101      	bne.n	8004822 <__swbuf_r+0x7a>
 800481e:	68ac      	ldr	r4, [r5, #8]
 8004820:	e7cf      	b.n	80047c2 <__swbuf_r+0x1a>
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <__swbuf_r+0xa0>)
 8004824:	429c      	cmp	r4, r3
 8004826:	bf08      	it	eq
 8004828:	68ec      	ldreq	r4, [r5, #12]
 800482a:	e7ca      	b.n	80047c2 <__swbuf_r+0x1a>
 800482c:	4621      	mov	r1, r4
 800482e:	4628      	mov	r0, r5
 8004830:	f000 f81e 	bl	8004870 <__swsetup_r>
 8004834:	2800      	cmp	r0, #0
 8004836:	d0cb      	beq.n	80047d0 <__swbuf_r+0x28>
 8004838:	f04f 37ff 	mov.w	r7, #4294967295
 800483c:	e7ea      	b.n	8004814 <__swbuf_r+0x6c>
 800483e:	bf00      	nop
 8004840:	08004d6c 	.word	0x08004d6c
 8004844:	08004d8c 	.word	0x08004d8c
 8004848:	08004d4c 	.word	0x08004d4c

0800484c <_write_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4d07      	ldr	r5, [pc, #28]	; (800486c <_write_r+0x20>)
 8004850:	4604      	mov	r4, r0
 8004852:	4608      	mov	r0, r1
 8004854:	4611      	mov	r1, r2
 8004856:	2200      	movs	r2, #0
 8004858:	602a      	str	r2, [r5, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	f7fc fdb7 	bl	80013ce <_write>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d102      	bne.n	800486a <_write_r+0x1e>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	b103      	cbz	r3, 800486a <_write_r+0x1e>
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	20000220 	.word	0x20000220

08004870 <__swsetup_r>:
 8004870:	4b32      	ldr	r3, [pc, #200]	; (800493c <__swsetup_r+0xcc>)
 8004872:	b570      	push	{r4, r5, r6, lr}
 8004874:	681d      	ldr	r5, [r3, #0]
 8004876:	4606      	mov	r6, r0
 8004878:	460c      	mov	r4, r1
 800487a:	b125      	cbz	r5, 8004886 <__swsetup_r+0x16>
 800487c:	69ab      	ldr	r3, [r5, #24]
 800487e:	b913      	cbnz	r3, 8004886 <__swsetup_r+0x16>
 8004880:	4628      	mov	r0, r5
 8004882:	f7ff fb1b 	bl	8003ebc <__sinit>
 8004886:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <__swsetup_r+0xd0>)
 8004888:	429c      	cmp	r4, r3
 800488a:	d10f      	bne.n	80048ac <__swsetup_r+0x3c>
 800488c:	686c      	ldr	r4, [r5, #4]
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004894:	0719      	lsls	r1, r3, #28
 8004896:	d42c      	bmi.n	80048f2 <__swsetup_r+0x82>
 8004898:	06dd      	lsls	r5, r3, #27
 800489a:	d411      	bmi.n	80048c0 <__swsetup_r+0x50>
 800489c:	2309      	movs	r3, #9
 800489e:	6033      	str	r3, [r6, #0]
 80048a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048a4:	81a3      	strh	r3, [r4, #12]
 80048a6:	f04f 30ff 	mov.w	r0, #4294967295
 80048aa:	e03e      	b.n	800492a <__swsetup_r+0xba>
 80048ac:	4b25      	ldr	r3, [pc, #148]	; (8004944 <__swsetup_r+0xd4>)
 80048ae:	429c      	cmp	r4, r3
 80048b0:	d101      	bne.n	80048b6 <__swsetup_r+0x46>
 80048b2:	68ac      	ldr	r4, [r5, #8]
 80048b4:	e7eb      	b.n	800488e <__swsetup_r+0x1e>
 80048b6:	4b24      	ldr	r3, [pc, #144]	; (8004948 <__swsetup_r+0xd8>)
 80048b8:	429c      	cmp	r4, r3
 80048ba:	bf08      	it	eq
 80048bc:	68ec      	ldreq	r4, [r5, #12]
 80048be:	e7e6      	b.n	800488e <__swsetup_r+0x1e>
 80048c0:	0758      	lsls	r0, r3, #29
 80048c2:	d512      	bpl.n	80048ea <__swsetup_r+0x7a>
 80048c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048c6:	b141      	cbz	r1, 80048da <__swsetup_r+0x6a>
 80048c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048cc:	4299      	cmp	r1, r3
 80048ce:	d002      	beq.n	80048d6 <__swsetup_r+0x66>
 80048d0:	4630      	mov	r0, r6
 80048d2:	f000 f991 	bl	8004bf8 <_free_r>
 80048d6:	2300      	movs	r3, #0
 80048d8:	6363      	str	r3, [r4, #52]	; 0x34
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048e0:	81a3      	strh	r3, [r4, #12]
 80048e2:	2300      	movs	r3, #0
 80048e4:	6063      	str	r3, [r4, #4]
 80048e6:	6923      	ldr	r3, [r4, #16]
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	f043 0308 	orr.w	r3, r3, #8
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	b94b      	cbnz	r3, 800490a <__swsetup_r+0x9a>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004900:	d003      	beq.n	800490a <__swsetup_r+0x9a>
 8004902:	4621      	mov	r1, r4
 8004904:	4630      	mov	r0, r6
 8004906:	f000 f92b 	bl	8004b60 <__smakebuf_r>
 800490a:	89a0      	ldrh	r0, [r4, #12]
 800490c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004910:	f010 0301 	ands.w	r3, r0, #1
 8004914:	d00a      	beq.n	800492c <__swsetup_r+0xbc>
 8004916:	2300      	movs	r3, #0
 8004918:	60a3      	str	r3, [r4, #8]
 800491a:	6963      	ldr	r3, [r4, #20]
 800491c:	425b      	negs	r3, r3
 800491e:	61a3      	str	r3, [r4, #24]
 8004920:	6923      	ldr	r3, [r4, #16]
 8004922:	b943      	cbnz	r3, 8004936 <__swsetup_r+0xc6>
 8004924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004928:	d1ba      	bne.n	80048a0 <__swsetup_r+0x30>
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	0781      	lsls	r1, r0, #30
 800492e:	bf58      	it	pl
 8004930:	6963      	ldrpl	r3, [r4, #20]
 8004932:	60a3      	str	r3, [r4, #8]
 8004934:	e7f4      	b.n	8004920 <__swsetup_r+0xb0>
 8004936:	2000      	movs	r0, #0
 8004938:	e7f7      	b.n	800492a <__swsetup_r+0xba>
 800493a:	bf00      	nop
 800493c:	20000088 	.word	0x20000088
 8004940:	08004d6c 	.word	0x08004d6c
 8004944:	08004d8c 	.word	0x08004d8c
 8004948:	08004d4c 	.word	0x08004d4c

0800494c <_close_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d06      	ldr	r5, [pc, #24]	; (8004968 <_close_r+0x1c>)
 8004950:	2300      	movs	r3, #0
 8004952:	4604      	mov	r4, r0
 8004954:	4608      	mov	r0, r1
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	f7fc fd55 	bl	8001406 <_close>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_close_r+0x1a>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_close_r+0x1a>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000220 	.word	0x20000220

0800496c <__sflush_r>:
 800496c:	898a      	ldrh	r2, [r1, #12]
 800496e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004972:	4605      	mov	r5, r0
 8004974:	0710      	lsls	r0, r2, #28
 8004976:	460c      	mov	r4, r1
 8004978:	d458      	bmi.n	8004a2c <__sflush_r+0xc0>
 800497a:	684b      	ldr	r3, [r1, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	dc05      	bgt.n	800498c <__sflush_r+0x20>
 8004980:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	dc02      	bgt.n	800498c <__sflush_r+0x20>
 8004986:	2000      	movs	r0, #0
 8004988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800498c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800498e:	2e00      	cmp	r6, #0
 8004990:	d0f9      	beq.n	8004986 <__sflush_r+0x1a>
 8004992:	2300      	movs	r3, #0
 8004994:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004998:	682f      	ldr	r7, [r5, #0]
 800499a:	602b      	str	r3, [r5, #0]
 800499c:	d032      	beq.n	8004a04 <__sflush_r+0x98>
 800499e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	075a      	lsls	r2, r3, #29
 80049a4:	d505      	bpl.n	80049b2 <__sflush_r+0x46>
 80049a6:	6863      	ldr	r3, [r4, #4]
 80049a8:	1ac0      	subs	r0, r0, r3
 80049aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049ac:	b10b      	cbz	r3, 80049b2 <__sflush_r+0x46>
 80049ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049b0:	1ac0      	subs	r0, r0, r3
 80049b2:	2300      	movs	r3, #0
 80049b4:	4602      	mov	r2, r0
 80049b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049b8:	6a21      	ldr	r1, [r4, #32]
 80049ba:	4628      	mov	r0, r5
 80049bc:	47b0      	blx	r6
 80049be:	1c43      	adds	r3, r0, #1
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	d106      	bne.n	80049d2 <__sflush_r+0x66>
 80049c4:	6829      	ldr	r1, [r5, #0]
 80049c6:	291d      	cmp	r1, #29
 80049c8:	d82c      	bhi.n	8004a24 <__sflush_r+0xb8>
 80049ca:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <__sflush_r+0x108>)
 80049cc:	40ca      	lsrs	r2, r1
 80049ce:	07d6      	lsls	r6, r2, #31
 80049d0:	d528      	bpl.n	8004a24 <__sflush_r+0xb8>
 80049d2:	2200      	movs	r2, #0
 80049d4:	6062      	str	r2, [r4, #4]
 80049d6:	04d9      	lsls	r1, r3, #19
 80049d8:	6922      	ldr	r2, [r4, #16]
 80049da:	6022      	str	r2, [r4, #0]
 80049dc:	d504      	bpl.n	80049e8 <__sflush_r+0x7c>
 80049de:	1c42      	adds	r2, r0, #1
 80049e0:	d101      	bne.n	80049e6 <__sflush_r+0x7a>
 80049e2:	682b      	ldr	r3, [r5, #0]
 80049e4:	b903      	cbnz	r3, 80049e8 <__sflush_r+0x7c>
 80049e6:	6560      	str	r0, [r4, #84]	; 0x54
 80049e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049ea:	602f      	str	r7, [r5, #0]
 80049ec:	2900      	cmp	r1, #0
 80049ee:	d0ca      	beq.n	8004986 <__sflush_r+0x1a>
 80049f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049f4:	4299      	cmp	r1, r3
 80049f6:	d002      	beq.n	80049fe <__sflush_r+0x92>
 80049f8:	4628      	mov	r0, r5
 80049fa:	f000 f8fd 	bl	8004bf8 <_free_r>
 80049fe:	2000      	movs	r0, #0
 8004a00:	6360      	str	r0, [r4, #52]	; 0x34
 8004a02:	e7c1      	b.n	8004988 <__sflush_r+0x1c>
 8004a04:	6a21      	ldr	r1, [r4, #32]
 8004a06:	2301      	movs	r3, #1
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b0      	blx	r6
 8004a0c:	1c41      	adds	r1, r0, #1
 8004a0e:	d1c7      	bne.n	80049a0 <__sflush_r+0x34>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0c4      	beq.n	80049a0 <__sflush_r+0x34>
 8004a16:	2b1d      	cmp	r3, #29
 8004a18:	d001      	beq.n	8004a1e <__sflush_r+0xb2>
 8004a1a:	2b16      	cmp	r3, #22
 8004a1c:	d101      	bne.n	8004a22 <__sflush_r+0xb6>
 8004a1e:	602f      	str	r7, [r5, #0]
 8004a20:	e7b1      	b.n	8004986 <__sflush_r+0x1a>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a28:	81a3      	strh	r3, [r4, #12]
 8004a2a:	e7ad      	b.n	8004988 <__sflush_r+0x1c>
 8004a2c:	690f      	ldr	r7, [r1, #16]
 8004a2e:	2f00      	cmp	r7, #0
 8004a30:	d0a9      	beq.n	8004986 <__sflush_r+0x1a>
 8004a32:	0793      	lsls	r3, r2, #30
 8004a34:	680e      	ldr	r6, [r1, #0]
 8004a36:	bf08      	it	eq
 8004a38:	694b      	ldreq	r3, [r1, #20]
 8004a3a:	600f      	str	r7, [r1, #0]
 8004a3c:	bf18      	it	ne
 8004a3e:	2300      	movne	r3, #0
 8004a40:	eba6 0807 	sub.w	r8, r6, r7
 8004a44:	608b      	str	r3, [r1, #8]
 8004a46:	f1b8 0f00 	cmp.w	r8, #0
 8004a4a:	dd9c      	ble.n	8004986 <__sflush_r+0x1a>
 8004a4c:	6a21      	ldr	r1, [r4, #32]
 8004a4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a50:	4643      	mov	r3, r8
 8004a52:	463a      	mov	r2, r7
 8004a54:	4628      	mov	r0, r5
 8004a56:	47b0      	blx	r6
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	dc06      	bgt.n	8004a6a <__sflush_r+0xfe>
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	e78e      	b.n	8004988 <__sflush_r+0x1c>
 8004a6a:	4407      	add	r7, r0
 8004a6c:	eba8 0800 	sub.w	r8, r8, r0
 8004a70:	e7e9      	b.n	8004a46 <__sflush_r+0xda>
 8004a72:	bf00      	nop
 8004a74:	20400001 	.word	0x20400001

08004a78 <_fflush_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	690b      	ldr	r3, [r1, #16]
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	b913      	cbnz	r3, 8004a88 <_fflush_r+0x10>
 8004a82:	2500      	movs	r5, #0
 8004a84:	4628      	mov	r0, r5
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	b118      	cbz	r0, 8004a92 <_fflush_r+0x1a>
 8004a8a:	6983      	ldr	r3, [r0, #24]
 8004a8c:	b90b      	cbnz	r3, 8004a92 <_fflush_r+0x1a>
 8004a8e:	f7ff fa15 	bl	8003ebc <__sinit>
 8004a92:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <_fflush_r+0x6c>)
 8004a94:	429c      	cmp	r4, r3
 8004a96:	d11b      	bne.n	8004ad0 <_fflush_r+0x58>
 8004a98:	686c      	ldr	r4, [r5, #4]
 8004a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0ef      	beq.n	8004a82 <_fflush_r+0xa>
 8004aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004aa4:	07d0      	lsls	r0, r2, #31
 8004aa6:	d404      	bmi.n	8004ab2 <_fflush_r+0x3a>
 8004aa8:	0599      	lsls	r1, r3, #22
 8004aaa:	d402      	bmi.n	8004ab2 <_fflush_r+0x3a>
 8004aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aae:	f7ff faa3 	bl	8003ff8 <__retarget_lock_acquire_recursive>
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	f7ff ff59 	bl	800496c <__sflush_r>
 8004aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004abc:	07da      	lsls	r2, r3, #31
 8004abe:	4605      	mov	r5, r0
 8004ac0:	d4e0      	bmi.n	8004a84 <_fflush_r+0xc>
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	059b      	lsls	r3, r3, #22
 8004ac6:	d4dd      	bmi.n	8004a84 <_fflush_r+0xc>
 8004ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aca:	f7ff fa96 	bl	8003ffa <__retarget_lock_release_recursive>
 8004ace:	e7d9      	b.n	8004a84 <_fflush_r+0xc>
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <_fflush_r+0x70>)
 8004ad2:	429c      	cmp	r4, r3
 8004ad4:	d101      	bne.n	8004ada <_fflush_r+0x62>
 8004ad6:	68ac      	ldr	r4, [r5, #8]
 8004ad8:	e7df      	b.n	8004a9a <_fflush_r+0x22>
 8004ada:	4b04      	ldr	r3, [pc, #16]	; (8004aec <_fflush_r+0x74>)
 8004adc:	429c      	cmp	r4, r3
 8004ade:	bf08      	it	eq
 8004ae0:	68ec      	ldreq	r4, [r5, #12]
 8004ae2:	e7da      	b.n	8004a9a <_fflush_r+0x22>
 8004ae4:	08004d6c 	.word	0x08004d6c
 8004ae8:	08004d8c 	.word	0x08004d8c
 8004aec:	08004d4c 	.word	0x08004d4c

08004af0 <_lseek_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4d07      	ldr	r5, [pc, #28]	; (8004b10 <_lseek_r+0x20>)
 8004af4:	4604      	mov	r4, r0
 8004af6:	4608      	mov	r0, r1
 8004af8:	4611      	mov	r1, r2
 8004afa:	2200      	movs	r2, #0
 8004afc:	602a      	str	r2, [r5, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f7fc fca8 	bl	8001454 <_lseek>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d102      	bne.n	8004b0e <_lseek_r+0x1e>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	b103      	cbz	r3, 8004b0e <_lseek_r+0x1e>
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	20000220 	.word	0x20000220

08004b14 <__swhatbuf_r>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	460e      	mov	r6, r1
 8004b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1c:	2900      	cmp	r1, #0
 8004b1e:	b096      	sub	sp, #88	; 0x58
 8004b20:	4614      	mov	r4, r2
 8004b22:	461d      	mov	r5, r3
 8004b24:	da08      	bge.n	8004b38 <__swhatbuf_r+0x24>
 8004b26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	602a      	str	r2, [r5, #0]
 8004b2e:	061a      	lsls	r2, r3, #24
 8004b30:	d410      	bmi.n	8004b54 <__swhatbuf_r+0x40>
 8004b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b36:	e00e      	b.n	8004b56 <__swhatbuf_r+0x42>
 8004b38:	466a      	mov	r2, sp
 8004b3a:	f000 f8bb 	bl	8004cb4 <_fstat_r>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	dbf1      	blt.n	8004b26 <__swhatbuf_r+0x12>
 8004b42:	9a01      	ldr	r2, [sp, #4]
 8004b44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b4c:	425a      	negs	r2, r3
 8004b4e:	415a      	adcs	r2, r3
 8004b50:	602a      	str	r2, [r5, #0]
 8004b52:	e7ee      	b.n	8004b32 <__swhatbuf_r+0x1e>
 8004b54:	2340      	movs	r3, #64	; 0x40
 8004b56:	2000      	movs	r0, #0
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	b016      	add	sp, #88	; 0x58
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b60 <__smakebuf_r>:
 8004b60:	898b      	ldrh	r3, [r1, #12]
 8004b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b64:	079d      	lsls	r5, r3, #30
 8004b66:	4606      	mov	r6, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	d507      	bpl.n	8004b7c <__smakebuf_r+0x1c>
 8004b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	2301      	movs	r3, #1
 8004b76:	6163      	str	r3, [r4, #20]
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	ab01      	add	r3, sp, #4
 8004b7e:	466a      	mov	r2, sp
 8004b80:	f7ff ffc8 	bl	8004b14 <__swhatbuf_r>
 8004b84:	9900      	ldr	r1, [sp, #0]
 8004b86:	4605      	mov	r5, r0
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f7ff fa57 	bl	800403c <_malloc_r>
 8004b8e:	b948      	cbnz	r0, 8004ba4 <__smakebuf_r+0x44>
 8004b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b94:	059a      	lsls	r2, r3, #22
 8004b96:	d4ef      	bmi.n	8004b78 <__smakebuf_r+0x18>
 8004b98:	f023 0303 	bic.w	r3, r3, #3
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	e7e3      	b.n	8004b6c <__smakebuf_r+0xc>
 8004ba4:	4b0d      	ldr	r3, [pc, #52]	; (8004bdc <__smakebuf_r+0x7c>)
 8004ba6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	6020      	str	r0, [r4, #0]
 8004bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	9b00      	ldr	r3, [sp, #0]
 8004bb4:	6163      	str	r3, [r4, #20]
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	6120      	str	r0, [r4, #16]
 8004bba:	b15b      	cbz	r3, 8004bd4 <__smakebuf_r+0x74>
 8004bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f000 f889 	bl	8004cd8 <_isatty_r>
 8004bc6:	b128      	cbz	r0, 8004bd4 <__smakebuf_r+0x74>
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	89a0      	ldrh	r0, [r4, #12]
 8004bd6:	4305      	orrs	r5, r0
 8004bd8:	81a5      	strh	r5, [r4, #12]
 8004bda:	e7cd      	b.n	8004b78 <__smakebuf_r+0x18>
 8004bdc:	08003e55 	.word	0x08003e55

08004be0 <__malloc_lock>:
 8004be0:	4801      	ldr	r0, [pc, #4]	; (8004be8 <__malloc_lock+0x8>)
 8004be2:	f7ff ba09 	b.w	8003ff8 <__retarget_lock_acquire_recursive>
 8004be6:	bf00      	nop
 8004be8:	20000214 	.word	0x20000214

08004bec <__malloc_unlock>:
 8004bec:	4801      	ldr	r0, [pc, #4]	; (8004bf4 <__malloc_unlock+0x8>)
 8004bee:	f7ff ba04 	b.w	8003ffa <__retarget_lock_release_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	20000214 	.word	0x20000214

08004bf8 <_free_r>:
 8004bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bfa:	2900      	cmp	r1, #0
 8004bfc:	d044      	beq.n	8004c88 <_free_r+0x90>
 8004bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c02:	9001      	str	r0, [sp, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f1a1 0404 	sub.w	r4, r1, #4
 8004c0a:	bfb8      	it	lt
 8004c0c:	18e4      	addlt	r4, r4, r3
 8004c0e:	f7ff ffe7 	bl	8004be0 <__malloc_lock>
 8004c12:	4a1e      	ldr	r2, [pc, #120]	; (8004c8c <_free_r+0x94>)
 8004c14:	9801      	ldr	r0, [sp, #4]
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	b933      	cbnz	r3, 8004c28 <_free_r+0x30>
 8004c1a:	6063      	str	r3, [r4, #4]
 8004c1c:	6014      	str	r4, [r2, #0]
 8004c1e:	b003      	add	sp, #12
 8004c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c24:	f7ff bfe2 	b.w	8004bec <__malloc_unlock>
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	d908      	bls.n	8004c3e <_free_r+0x46>
 8004c2c:	6825      	ldr	r5, [r4, #0]
 8004c2e:	1961      	adds	r1, r4, r5
 8004c30:	428b      	cmp	r3, r1
 8004c32:	bf01      	itttt	eq
 8004c34:	6819      	ldreq	r1, [r3, #0]
 8004c36:	685b      	ldreq	r3, [r3, #4]
 8004c38:	1949      	addeq	r1, r1, r5
 8004c3a:	6021      	streq	r1, [r4, #0]
 8004c3c:	e7ed      	b.n	8004c1a <_free_r+0x22>
 8004c3e:	461a      	mov	r2, r3
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	b10b      	cbz	r3, 8004c48 <_free_r+0x50>
 8004c44:	42a3      	cmp	r3, r4
 8004c46:	d9fa      	bls.n	8004c3e <_free_r+0x46>
 8004c48:	6811      	ldr	r1, [r2, #0]
 8004c4a:	1855      	adds	r5, r2, r1
 8004c4c:	42a5      	cmp	r5, r4
 8004c4e:	d10b      	bne.n	8004c68 <_free_r+0x70>
 8004c50:	6824      	ldr	r4, [r4, #0]
 8004c52:	4421      	add	r1, r4
 8004c54:	1854      	adds	r4, r2, r1
 8004c56:	42a3      	cmp	r3, r4
 8004c58:	6011      	str	r1, [r2, #0]
 8004c5a:	d1e0      	bne.n	8004c1e <_free_r+0x26>
 8004c5c:	681c      	ldr	r4, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	6053      	str	r3, [r2, #4]
 8004c62:	4421      	add	r1, r4
 8004c64:	6011      	str	r1, [r2, #0]
 8004c66:	e7da      	b.n	8004c1e <_free_r+0x26>
 8004c68:	d902      	bls.n	8004c70 <_free_r+0x78>
 8004c6a:	230c      	movs	r3, #12
 8004c6c:	6003      	str	r3, [r0, #0]
 8004c6e:	e7d6      	b.n	8004c1e <_free_r+0x26>
 8004c70:	6825      	ldr	r5, [r4, #0]
 8004c72:	1961      	adds	r1, r4, r5
 8004c74:	428b      	cmp	r3, r1
 8004c76:	bf04      	itt	eq
 8004c78:	6819      	ldreq	r1, [r3, #0]
 8004c7a:	685b      	ldreq	r3, [r3, #4]
 8004c7c:	6063      	str	r3, [r4, #4]
 8004c7e:	bf04      	itt	eq
 8004c80:	1949      	addeq	r1, r1, r5
 8004c82:	6021      	streq	r1, [r4, #0]
 8004c84:	6054      	str	r4, [r2, #4]
 8004c86:	e7ca      	b.n	8004c1e <_free_r+0x26>
 8004c88:	b003      	add	sp, #12
 8004c8a:	bd30      	pop	{r4, r5, pc}
 8004c8c:	20000218 	.word	0x20000218

08004c90 <_read_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4d07      	ldr	r5, [pc, #28]	; (8004cb0 <_read_r+0x20>)
 8004c94:	4604      	mov	r4, r0
 8004c96:	4608      	mov	r0, r1
 8004c98:	4611      	mov	r1, r2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	602a      	str	r2, [r5, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f7fc fb78 	bl	8001394 <_read>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_read_r+0x1e>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_read_r+0x1e>
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	20000220 	.word	0x20000220

08004cb4 <_fstat_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d07      	ldr	r5, [pc, #28]	; (8004cd4 <_fstat_r+0x20>)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	602b      	str	r3, [r5, #0]
 8004cc2:	f7fc fbac 	bl	800141e <_fstat>
 8004cc6:	1c43      	adds	r3, r0, #1
 8004cc8:	d102      	bne.n	8004cd0 <_fstat_r+0x1c>
 8004cca:	682b      	ldr	r3, [r5, #0]
 8004ccc:	b103      	cbz	r3, 8004cd0 <_fstat_r+0x1c>
 8004cce:	6023      	str	r3, [r4, #0]
 8004cd0:	bd38      	pop	{r3, r4, r5, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000220 	.word	0x20000220

08004cd8 <_isatty_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d06      	ldr	r5, [pc, #24]	; (8004cf4 <_isatty_r+0x1c>)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	f7fc fbab 	bl	800143e <_isatty>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d102      	bne.n	8004cf2 <_isatty_r+0x1a>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	b103      	cbz	r3, 8004cf2 <_isatty_r+0x1a>
 8004cf0:	6023      	str	r3, [r4, #0]
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
 8004cf4:	20000220 	.word	0x20000220

08004cf8 <_init>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	bf00      	nop
 8004cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfe:	bc08      	pop	{r3}
 8004d00:	469e      	mov	lr, r3
 8004d02:	4770      	bx	lr

08004d04 <_fini>:
 8004d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d06:	bf00      	nop
 8004d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0a:	bc08      	pop	{r3}
 8004d0c:	469e      	mov	lr, r3
 8004d0e:	4770      	bx	lr
